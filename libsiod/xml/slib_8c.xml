<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.3.1">
  <compounddef id="slib_8c" kind="file">
    <compoundname>slib.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">ctype.h</includes>
    <includes local="no">setjmp.h</includes>
    <includes local="no">signal.h</includes>
    <includes local="no">math.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">time.h</includes>
    <includes local="no">errno.h</includes>
    <includes refid="siod_8h" local="yes">siod.h</includes>
    <includes refid="siodp_8h" local="yes">siodp.h</includes>
    <incdepgraph>
      <node id="20">
        <label>siodp.h</label>
        <link refid="siodp_8h_source"/>
      </node>
      <node id="16">
        <label>stdlib.h</label>
      </node>
      <node id="13">
        <label>setjmp.h</label>
      </node>
      <node id="18">
        <label>errno.h</label>
      </node>
      <node id="11">
        <label>string.h</label>
      </node>
      <node id="19">
        <label>siod.h</label>
        <link refid="siod_8h_source"/>
      </node>
      <node id="9">
        <label>slib.c</label>
        <link refid="slib.c"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>signal.h</label>
      </node>
      <node id="17">
        <label>time.h</label>
      </node>
      <node id="15">
        <label>math.h</label>
      </node>
      <node id="12">
        <label>ctype.h</label>
      </node>
      <node id="10">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structrcsp__puts" prot="public">rcsp_puts</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="slib_8c_1ad61d80bcc1197ae95405b70f6ed61735" prot="public" static="no">
        <name>ENVLOOKUP_TRICK</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1505" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1505" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="slib_8c_1a9b7f325963a55f83cb3b6371d5f6bc9a" prot="public" static="no" mutable="no">
        <type>long</type>
        <definition>long nheaps</definition>
        <argsstring></argsstring>
        <name>nheaps</name>
        <initializer>= 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="93" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="slib_8c_1a884916aacbb4344dae6413c0318427fa" prot="public" static="no" mutable="no">
        <type><ref refid="structobj" kindref="compound">LISP</ref> *</type>
        <definition>LISP* heaps</definition>
        <argsstring></argsstring>
        <name>heaps</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="94" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="slib_8c_1afde44f787fbffa1b21bc290886e42aaa" prot="public" static="no" mutable="no">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP heap</definition>
        <argsstring></argsstring>
        <name>heap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="95" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="slib_8c_1a104aa54cbe0044f2f24fe4235f9fb132" prot="public" static="no" mutable="no">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP heap_end</definition>
        <argsstring></argsstring>
        <name>heap_end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="95" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="slib_8c_1a557ce601efaaf751de39d8f8a0950457" prot="public" static="no" mutable="no">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP heap_org</definition>
        <argsstring></argsstring>
        <name>heap_org</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="95" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="slib_8c_1a6a48ab73bc2109eb9e45207f826e3686" prot="public" static="no" mutable="no">
        <type>long</type>
        <definition>long heap_size</definition>
        <argsstring></argsstring>
        <name>heap_size</name>
        <initializer>= 5000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="96" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="slib_8c_1a071c7a04526166d1d2657cb8b6369b54" prot="public" static="no" mutable="no">
        <type>long</type>
        <definition>long old_heap_used</definition>
        <argsstring></argsstring>
        <name>old_heap_used</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="97" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="slib_8c_1a6212bfca43a4dda8dbca9e233b1d1fd8" prot="public" static="no" mutable="no">
        <type>long</type>
        <definition>long gc_status_flag</definition>
        <argsstring></argsstring>
        <name>gc_status_flag</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="98" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="slib_8c_1a7da1a58bd17377c6b373707f5cca1996" prot="public" static="no" mutable="no">
        <type>char *</type>
        <definition>char* init_file</definition>
        <argsstring></argsstring>
        <name>init_file</name>
        <initializer>= (char *) NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="99" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="slib_8c_1a6424de518b088c2ba22924f12c1a320a" prot="public" static="no" mutable="no">
        <type>char *</type>
        <definition>char* tkbuffer</definition>
        <argsstring></argsstring>
        <name>tkbuffer</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="100" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="slib_8c_1af05281508598cc8c3c8103902d3eb449" prot="public" static="no" mutable="no">
        <type>long</type>
        <definition>long gc_kind_copying</definition>
        <argsstring></argsstring>
        <name>gc_kind_copying</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="101" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="slib_8c_1ad2c57e1539e4e2d98ce561cab07ddd7a" prot="public" static="no" mutable="no">
        <type>long</type>
        <definition>long gc_cells_allocated</definition>
        <argsstring></argsstring>
        <name>gc_cells_allocated</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="102" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="slib_8c_1a8d8719d66aeb58ec01ac8878f36630ae" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double gc_time_taken</definition>
        <argsstring></argsstring>
        <name>gc_time_taken</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="103" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="slib_8c_1ab5423b98021045f31d8d01dfd9e0cc4c" prot="public" static="no" mutable="no">
        <type><ref refid="structobj" kindref="compound">LISP</ref> *</type>
        <definition>LISP* stack_start_ptr</definition>
        <argsstring></argsstring>
        <name>stack_start_ptr</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="104" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="slib_8c_1a76296880798c2baad1c784cdfee9f156" prot="public" static="no" mutable="no">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP freelist</definition>
        <argsstring></argsstring>
        <name>freelist</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="105" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="slib_8c_1a3e393354413140c15c7d042b07001ba4" prot="public" static="no" mutable="no">
        <type>jmp_buf</type>
        <definition>jmp_buf errjmp</definition>
        <argsstring></argsstring>
        <name>errjmp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="106" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="slib_8c_1a5029863d5b7dfc614ee0dd85e05eeed9" prot="public" static="no" mutable="no">
        <type>long</type>
        <definition>long errjmp_ok</definition>
        <argsstring></argsstring>
        <name>errjmp_ok</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="107" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="slib_8c_1aea35c3cfce9a1746e14eceb1235f9bb4" prot="public" static="no" mutable="no">
        <type>long</type>
        <definition>long nointerrupt</definition>
        <argsstring></argsstring>
        <name>nointerrupt</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="108" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="slib_8c_1a5e32b6df5fb092e11f07e5b1b6ce3636" prot="public" static="no" mutable="no">
        <type>long</type>
        <definition>long interrupt_differed</definition>
        <argsstring></argsstring>
        <name>interrupt_differed</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="109" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="slib_8c_1a53f35aa19c04a3335f082cb383b5b501" prot="public" static="no" mutable="no">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP oblistvar</definition>
        <argsstring></argsstring>
        <name>oblistvar</name>
        <initializer>= NIL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="110" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="slib_8c_1ae073b68646007082e5116b3d9d591b74" prot="public" static="no" mutable="no">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP sym_t</definition>
        <argsstring></argsstring>
        <name>sym_t</name>
        <initializer>= NIL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="111" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="slib_8c_1a11c05ef89b3c75ebcf7b4bcd643dd810" prot="public" static="no" mutable="no">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP eof_val</definition>
        <argsstring></argsstring>
        <name>eof_val</name>
        <initializer>= NIL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="112" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="slib_8c_1ae16607e3379791b1f1065eaa6c386b13" prot="public" static="no" mutable="no">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP sym_errobj</definition>
        <argsstring></argsstring>
        <name>sym_errobj</name>
        <initializer>= NIL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="113" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="slib_8c_1aa75ba24a630a4ce4dfe537044ac80f86" prot="public" static="no" mutable="no">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP sym_catchall</definition>
        <argsstring></argsstring>
        <name>sym_catchall</name>
        <initializer>= NIL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="114" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="slib_8c_1a493d5786cc2f881f93dd9f3df35e4002" prot="public" static="no" mutable="no">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP sym_progn</definition>
        <argsstring></argsstring>
        <name>sym_progn</name>
        <initializer>= NIL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="115" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="slib_8c_1a64a644f5428ce9fef1ea36538ac59043" prot="public" static="no" mutable="no">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP sym_lambda</definition>
        <argsstring></argsstring>
        <name>sym_lambda</name>
        <initializer>= NIL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="116" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="slib_8c_1aff59f7efc57680c3fb5e251e19ff82b3" prot="public" static="no" mutable="no">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP sym_quote</definition>
        <argsstring></argsstring>
        <name>sym_quote</name>
        <initializer>= NIL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="117" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="slib_8c_1a4265215f658669afd7e26b941dc47b4f" prot="public" static="no" mutable="no">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP sym_dot</definition>
        <argsstring></argsstring>
        <name>sym_dot</name>
        <initializer>= NIL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="118" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="slib_8c_1ae5dc0dbae68936c0dcb860c33c267f56" prot="public" static="no" mutable="no">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP sym_after_gc</definition>
        <argsstring></argsstring>
        <name>sym_after_gc</name>
        <initializer>= NIL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="119" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="slib_8c_1a7335b51e79b59ddcb3ee68e98b6b095f" prot="public" static="no" mutable="no">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP sym_eval_history_ptr</definition>
        <argsstring></argsstring>
        <name>sym_eval_history_ptr</name>
        <initializer>= NIL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="120" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="slib_8c_1a3cdd7fd4c7870815312fac12e92a7f64" prot="public" static="no" mutable="no">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP unbound_marker</definition>
        <argsstring></argsstring>
        <name>unbound_marker</name>
        <initializer>= NIL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="121" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="slib_8c_1a39a82e7462224934454802f2d91debc4" prot="public" static="no" mutable="no">
        <type><ref refid="structobj" kindref="compound">LISP</ref> *</type>
        <definition>LISP* obarray</definition>
        <argsstring></argsstring>
        <name>obarray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="122" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="slib_8c_1a55211781c93ace828a32d4c7e980c79b" prot="public" static="no" mutable="no">
        <type>long</type>
        <definition>long obarray_dim</definition>
        <argsstring></argsstring>
        <name>obarray_dim</name>
        <initializer>= 100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="123" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="slib_8c_1a11ecec7bfb44177c8f5114f279553662" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structcatch__frame" kindref="compound">catch_frame</ref> *</type>
        <definition>struct catch_frame* catch_framep</definition>
        <argsstring></argsstring>
        <name>catch_framep</name>
        <initializer>= (struct <ref refid="structcatch__frame" kindref="compound">catch_frame</ref> *) NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="124" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="slib_8c_1ad49390e225e557ee445ea7ff70d1023d" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* repl_puts)(char *)</definition>
        <argsstring>)(char *)</argsstring>
        <name>repl_puts</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="125" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="slib_8c_1aef11d3022f9e416f47cb03ab3de9b532" prot="public" static="no" mutable="no">
        <type><ref refid="structobj" kindref="compound">LISP</ref>(*</type>
        <definition>LISP(* repl_read)(void)</definition>
        <argsstring>)(void)</argsstring>
        <name>repl_read</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="126" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="slib_8c_1a712d9b729e1b6bd93388b4102125fb37" prot="public" static="no" mutable="no">
        <type><ref refid="structobj" kindref="compound">LISP</ref>(*</type>
        <definition>LISP(* repl_eval)(LISP)</definition>
        <argsstring>)(LISP)</argsstring>
        <name>repl_eval</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="127" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="slib_8c_1aaee51f45c9d4e2bb8c49d5bacaa95c57" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* repl_print)(LISP)</definition>
        <argsstring>)(LISP)</argsstring>
        <name>repl_print</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="128" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="slib_8c_1a33fade2911b2c0231cf2433cb672d1f9" prot="public" static="no" mutable="no">
        <type><ref refid="structobj" kindref="compound">LISP</ref> *</type>
        <definition>LISP* inums</definition>
        <argsstring></argsstring>
        <name>inums</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="129" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="slib_8c_1ab794a0c28143538c295fa8fdf7b86dc6" prot="public" static="no" mutable="no">
        <type>long</type>
        <definition>long inums_dim</definition>
        <argsstring></argsstring>
        <name>inums_dim</name>
        <initializer>= 256</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="130" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="slib_8c_1a4535895e3990fdf617065e842e6c9be9" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structuser__type__hooks" kindref="compound">user_type_hooks</ref> *</type>
        <definition>struct user_type_hooks* user_types</definition>
        <argsstring></argsstring>
        <name>user_types</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="131" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="slib_8c_1a83f5eb12e946173f91fd1a99e7fbb2bf" prot="public" static="no" mutable="no">
        <type>long</type>
        <definition>long user_tc_next</definition>
        <argsstring></argsstring>
        <name>user_tc_next</name>
        <initializer>= tc_user_min</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="132" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="slib_8c_1a4149a72e2907f30c7a7ce9e9a2a46122" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structgc__protected" kindref="compound">gc_protected</ref> *</type>
        <definition>struct gc_protected* protected_registers</definition>
        <argsstring></argsstring>
        <name>protected_registers</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="133" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="slib_8c_1a5c9f77c03d7cac82ff9cb56812c7bb93" prot="public" static="no" mutable="no">
        <type>jmp_buf</type>
        <definition>jmp_buf save_regs_gc_mark</definition>
        <argsstring></argsstring>
        <name>save_regs_gc_mark</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="134" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="slib_8c_1aa412797c21186c9a35fbef56345b0f98" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double gc_rt</definition>
        <argsstring></argsstring>
        <name>gc_rt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="135" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="slib_8c_1aa09da53ac5d1627dcc6b3d6304f483e5" prot="public" static="no" mutable="no">
        <type>long</type>
        <definition>long gc_cells_collected</definition>
        <argsstring></argsstring>
        <name>gc_cells_collected</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="136" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="slib_8c_1a9cbfcee01d28a9f43fa0ef073507017c" prot="public" static="no" mutable="no">
        <type>char *</type>
        <definition>char* user_ch_readm</definition>
        <argsstring></argsstring>
        <name>user_ch_readm</name>
        <initializer>= &quot;&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="137" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="slib_8c_1a8121b59a079d827eba3827c2a9cd4b5b" prot="public" static="no" mutable="no">
        <type>char *</type>
        <definition>char* user_te_readm</definition>
        <argsstring></argsstring>
        <name>user_te_readm</name>
        <initializer>= &quot;&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="138" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="slib_8c_1a0b74a1ae9c0f7568e1fe07a5db7d3cf1" prot="public" static="no" mutable="no">
        <type><ref refid="structobj" kindref="compound">LISP</ref>(*</type>
        <definition>LISP(* user_readm)(int, struct gen_readio *)</definition>
        <argsstring>)(int, struct gen_readio *)</argsstring>
        <name>user_readm</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="139" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="slib_8c_1aae64da315760fbce8cd261e094827c7f" prot="public" static="no" mutable="no">
        <type><ref refid="structobj" kindref="compound">LISP</ref>(*</type>
        <definition>LISP(* user_readt)(char *, long, int *)</definition>
        <argsstring>)(char *, long, int *)</argsstring>
        <name>user_readt</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="140" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="slib_8c_1a4fee418021a09ccaf998394ce5063464" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* fatal_exit_hook)(void)</definition>
        <argsstring>)(void)</argsstring>
        <name>fatal_exit_hook</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="141" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="slib_8c_1a733513abc37ea45822d20a4daa3627e6" prot="public" static="no" mutable="no">
        <type>char *</type>
        <definition>char* stack_limit_ptr</definition>
        <argsstring></argsstring>
        <name>stack_limit_ptr</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="146" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="slib_8c_1ab460dd9dbe2502bfcf1ce53b50e5728a" prot="public" static="no" mutable="no">
        <type>long</type>
        <definition>long stack_size</definition>
        <argsstring></argsstring>
        <name>stack_size</name>
        <initializer>= 



  50000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="151" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="slib_8c_1a79eef6fd207c42a9cd66f01f2c5877f7" prot="public" static="no" mutable="no">
        <type>long</type>
        <definition>long siod_verbose_level</definition>
        <argsstring></argsstring>
        <name>siod_verbose_level</name>
        <initializer>= 4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="154" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="slib_8c_1a6dd61c9cff7c99b09c4486ebc533487e" prot="public" static="no" mutable="no">
        <type>char *</type>
        <definition>char* siod_lib</definition>
        <argsstring></argsstring>
        <name>siod_lib</name>
        <initializer>= SIOD_LIB_DEFAULT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="169" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="slib_8c_1a6a875326e5e39e31042f8920971293d9" prot="public" static="yes" mutable="no">
        <type>char *</type>
        <definition>char* repl_c_string_arg</definition>
        <argsstring></argsstring>
        <name>repl_c_string_arg</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="337" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="337" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="slib_8c_1a80f987aa11744e87b7299d79a7adcade" prot="public" static="yes" mutable="no">
        <type>char *</type>
        <definition>char* repl_c_string_out</definition>
        <argsstring></argsstring>
        <name>repl_c_string_out</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="338" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="338" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="slib_8c_1a9632bbe67dd640abd15eae12a1a0bea7" prot="public" static="yes" mutable="no">
        <type>long</type>
        <definition>long repl_c_string_flag</definition>
        <argsstring></argsstring>
        <name>repl_c_string_flag</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="339" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="339" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="slib_8c_1a6c3bc3e8badba1aea79b5e6ad7ac8c61" prot="public" static="yes" mutable="no">
        <type>long</type>
        <definition>long repl_c_string_print_len</definition>
        <argsstring></argsstring>
        <name>repl_c_string_print_len</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="340" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="340" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="slib_8c_1a9ac566ae0bf7d18a9ad9854cc8b2d168" prot="public" static="yes" mutable="no">
        <type>long</type>
        <definition>long inside_err</definition>
        <argsstring></argsstring>
        <name>inside_err</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="592" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="592" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="slib_8c_1af6f61a0c6d82bc8e323874cad7aba8e7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void init_slib_version</definition>
        <argsstring>(void)</argsstring>
        <name>init_slib_version</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="86" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="85" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a5b75fc47bebff92498e32c8bb1a040ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *__stdcall</type>
        <definition>char* __stdcall siod_version</definition>
        <argsstring>(void)</argsstring>
        <name>siod_version</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="91" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="90" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a1bd34407b524f83802816202beade19f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void __stdcall</type>
        <definition>void __stdcall process_cla</definition>
        <argsstring>(int argc, char **argv, int warnflag)</argsstring>
        <name>process_cla</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <param>
          <type>int</type>
          <declname>warnflag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="172" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="171" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a9b269d8a234e30653d60892042dae61b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void __stdcall</type>
        <definition>void __stdcall print_welcome</definition>
        <argsstring>(void)</argsstring>
        <name>print_welcome</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="224" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="223" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a3c92c44b308f61cb5674cc0c38751fec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void __stdcall</type>
        <definition>void __stdcall print_hs_1</definition>
        <argsstring>(void)</argsstring>
        <name>print_hs_1</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="230" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="229" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a80ac3820f6cf303b057d9a3d6a650ac7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void __stdcall</type>
        <definition>void __stdcall print_hs_2</definition>
        <argsstring>(void)</argsstring>
        <name>print_hs_2</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="239" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="238" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1aa7fbee829724001a15362d4ff8fe4afb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long no_interrupt</definition>
        <argsstring>(long n)</argsstring>
        <name>no_interrupt</name>
        <param>
          <type>long</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="246" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="245" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1ab0c31bfdea3757a384261e227a14fcee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void handle_sigfpe</definition>
        <argsstring>(int sig SIG_restargs)</argsstring>
        <name>handle_sigfpe</name>
        <param>
          <type>int sig</type>
          <declname>SIG_restargs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="255" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="254" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a8345423dfb2bca818104acf41244c17a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void handle_sigint</definition>
        <argsstring>(int sig SIG_restargs)</argsstring>
        <name>handle_sigint</name>
        <param>
          <type>int sig</type>
          <declname>SIG_restargs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="263" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="262" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1abefa8aaaa49977c22c017be699ef0b8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void err_ctrl_c</definition>
        <argsstring>(void)</argsstring>
        <name>err_ctrl_c</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="281" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="280" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a7fb9cbca50eea428b6f332d7bacecc84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP get_eof_val</definition>
        <argsstring>(void)</argsstring>
        <name>get_eof_val</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="284" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="283" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a19aaf1acf29c07159c745920bfeb8542" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long repl_driver</definition>
        <argsstring>(long want_sigint, long want_init, struct repl_hooks *h)</argsstring>
        <name>repl_driver</name>
        <param>
          <type>long</type>
          <declname>want_sigint</declname>
        </param>
        <param>
          <type>long</type>
          <declname>want_init</declname>
        </param>
        <param>
          <type>struct <ref refid="structrepl__hooks" kindref="compound">repl_hooks</ref> *</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="287" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="286" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1ac6c4dee3fae317683cb98c03b52d70f6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ignore_puts</definition>
        <argsstring>(char *st)</argsstring>
        <name>ignore_puts</name>
        <param>
          <type>char *</type>
          <declname>st</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="331" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="330" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1aea69028747991dea8770625fbe52ad9a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void noprompt_puts</definition>
        <argsstring>(char *st)</argsstring>
        <name>noprompt_puts</name>
        <param>
          <type>char *</type>
          <declname>st</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="334" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="333" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a2a0c620f1d9134f1feab8e509c4e612c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>static LISP repl_c_string_read</definition>
        <argsstring>(void)</argsstring>
        <name>repl_c_string_read</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="344" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="343" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1afe3f1c8625bd0f907977077916ac451a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ignore_print</definition>
        <argsstring>(LISP x)</argsstring>
        <name>ignore_print</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="353" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="352" bodyend="353"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a60313b5ce5fddf5503f332047647462c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void not_ignore_print</definition>
        <argsstring>(LISP x)</argsstring>
        <name>not_ignore_print</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="356" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="355" bodyend="357"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a10b53940dce84a120d76ae8c3e307303" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int rcsp_puts</definition>
        <argsstring>(char *from, void *cb)</argsstring>
        <name>rcsp_puts</name>
        <param>
          <type>char *</type>
          <declname>from</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="364" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="363" bodyend="374"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1ac7c9c4e1dff93c6de8054d8bb5178eee" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void repl_c_string_print</definition>
        <argsstring>(LISP x)</argsstring>
        <name>repl_c_string_print</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="377" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="376" bodyend="385"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a8f0c7800870b93ab5849562a0be2fe9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long __stdcall</type>
        <definition>long __stdcall repl_c_string</definition>
        <argsstring>(char *str, long want_sigint, long want_init, long want_print)</argsstring>
        <name>repl_c_string</name>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>long</type>
          <declname>want_sigint</declname>
        </param>
        <param>
          <type>long</type>
          <declname>want_init</declname>
        </param>
        <param>
          <type>long</type>
          <declname>want_print</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="389" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="387" bodyend="416"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1ae0fab4a62b64039b919c5dded510720c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double myruntime</definition>
        <argsstring>(void)</argsstring>
        <name>myruntime</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="443" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="442" bodyend="445"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a94550cc1bc5d84b04ff9f710a5923760" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double myrealtime</definition>
        <argsstring>(void)</argsstring>
        <name>myrealtime</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="500" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="499" bodyend="502"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a2fb03c138c52c7dfcbee5f3b5a4d6f17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void set_repl_hooks</definition>
        <argsstring>(void(*puts_f)(char *), LISP(*read_f)(void), LISP(*eval_f)(LISP), void(*print_f)(LISP))</argsstring>
        <name>set_repl_hooks</name>
        <param>
          <type>void(*)(char *)</type>
          <declname>puts_f</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref>(*)(void)</type>
          <declname>read_f</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref>(*)(<ref refid="structobj" kindref="compound">LISP</ref>)</type>
          <declname>eval_f</declname>
        </param>
        <param>
          <type>void(*)(<ref refid="structobj" kindref="compound">LISP</ref>)</type>
          <declname>print_f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="509" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="505" bodyend="512"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a918c8f2615d640d06b29e291640ad34f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gput_st</definition>
        <argsstring>(struct gen_printio *f, char *st)</argsstring>
        <name>gput_st</name>
        <param>
          <type>struct <ref refid="structgen__printio" kindref="compound">gen_printio</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>st</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="515" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="514" bodyend="515"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1ad538d341e8f285ac04d28a93dd4d7a59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fput_st</definition>
        <argsstring>(FILE *f, char *st)</argsstring>
        <name>fput_st</name>
        <param>
          <type>FILE *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>st</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="518" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="517" bodyend="521"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a2ab8a822b56ec3cd2fc4c967e49af3a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fputs_fcn</definition>
        <argsstring>(char *st, void *cb)</argsstring>
        <name>fputs_fcn</name>
        <param>
          <type>char *</type>
          <declname>st</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="524" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="523" bodyend="525"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a672281f04ac659adcfbe460a2d873f14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void put_st</definition>
        <argsstring>(char *st)</argsstring>
        <name>put_st</name>
        <param>
          <type>char *</type>
          <declname>st</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="528" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="527" bodyend="528"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a09ea2a8813a6deda0a4282fc0689f566" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void grepl_puts</definition>
        <argsstring>(char *st, void(*repl_puts)(char *))</argsstring>
        <name>grepl_puts</name>
        <param>
          <type>char *</type>
          <declname>st</declname>
        </param>
        <param>
          <type>void(*)(char *)</type>
          <declname>repl_puts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="531" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="530" bodyend="535"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a110427cfebea07f4cbb303908f845edf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long repl</definition>
        <argsstring>(struct repl_hooks *h)</argsstring>
        <name>repl</name>
        <param>
          <type>struct <ref refid="structrepl__hooks" kindref="compound">repl_hooks</ref> *</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="538" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="537" bodyend="587"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a215a471f281a3bf0547237f9b3c524ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void set_fatal_exit_hook</definition>
        <argsstring>(void(*fcn)(void))</argsstring>
        <name>set_fatal_exit_hook</name>
        <param>
          <type>void(*)(void)</type>
          <declname>fcn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="590" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="589" bodyend="590"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a669c6661e022454c1ece3da610ed8bba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP err</definition>
        <argsstring>(const char *message, LISP x)</argsstring>
        <name>err</name>
        <param>
          <type>const char *</type>
          <declname>message</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="595" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="594" bodyend="638"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1aa6a7980dd6e74143b646854d8963cc6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP errswitch</definition>
        <argsstring>(void)</argsstring>
        <name>errswitch</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="641" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="640" bodyend="641"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a4c15c30dc4b6eed0f8ccb240b3b205db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void err_stack</definition>
        <argsstring>(char *ptr)</argsstring>
        <name>err_stack</name>
        <param>
          <type>char *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="645" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="643" bodyend="645"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a314d10fde5770c1f4e2367f99d6441f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP stack_limit</definition>
        <argsstring>(LISP amount, LISP silent)</argsstring>
        <name>stack_limit</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>amount</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>silent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="648" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="647" bodyend="657"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a5b8b1f16135f7f4c353bc8203519aa71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* try_get_c_string</definition>
        <argsstring>(LISP x)</argsstring>
        <name>try_get_c_string</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="660" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="659" bodyend="665"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1af702be0269e7a42e58bd9286806b750b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* get_c_string</definition>
        <argsstring>(LISP x)</argsstring>
        <name>get_c_string</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="668" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="667" bodyend="674"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a2b59a38785d8f82e22b99554dcbb4ab6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* get_c_string_dim</definition>
        <argsstring>(LISP x, long *len)</argsstring>
        <name>get_c_string_dim</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type>long *</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="677" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="676" bodyend="690"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a54f0e49ce0d51ba38e15344ccdd2f494" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lerr</definition>
        <argsstring>(LISP message, LISP x)</argsstring>
        <name>lerr</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="693" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="692" bodyend="697"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a986eef3b97c4aad675ed886f02481f96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gc_fatal_error</definition>
        <argsstring>(void)</argsstring>
        <name>gc_fatal_error</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="700" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="699" bodyend="700"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a72116a906cb9c1e7d87720a00038933f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP newcell</definition>
        <argsstring>(long type)</argsstring>
        <name>newcell</name>
        <param>
          <type>long</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="703" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="702" bodyend="705"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1adf24a79b6b7b95c47b51b33e9cd74a05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP cons</definition>
        <argsstring>(LISP x, LISP y)</argsstring>
        <name>cons</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="708" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="707" bodyend="712"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a38726b5f10db9e9ab86cda3303ca22f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP consp</definition>
        <argsstring>(LISP x)</argsstring>
        <name>consp</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="715" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="714" bodyend="715"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1ad4f5aa1fdca23b52a8e5c8b519b58560" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP car</definition>
        <argsstring>(LISP x)</argsstring>
        <name>car</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="718" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="717" bodyend="724"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1ab6dbdeed0cc58bd0c513c07e8f8bdfb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP cdr</definition>
        <argsstring>(LISP x)</argsstring>
        <name>cdr</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="727" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="726" bodyend="733"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a744107cefa4ff0ba07ce685e2e75954f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP setcar</definition>
        <argsstring>(LISP cell, LISP value)</argsstring>
        <name>setcar</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>cell</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="736" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="735" bodyend="737"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1addcd09abb3c0781049b348b83fd4eda0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP setcdr</definition>
        <argsstring>(LISP cell, LISP value)</argsstring>
        <name>setcdr</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>cell</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="740" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="739" bodyend="741"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1aa6db9a45292a3679ed2f1d1d414116b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP flocons</definition>
        <argsstring>(double x)</argsstring>
        <name>flocons</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="744" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="743" bodyend="753"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a5c10f7523bbbb160c2dcc90522393f69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP numberp</definition>
        <argsstring>(LISP x)</argsstring>
        <name>numberp</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="756" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="755" bodyend="756"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a5290b36e772e02d3a9014a15cc7f90ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP plus</definition>
        <argsstring>(LISP x, LISP y)</argsstring>
        <name>plus</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="759" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="758" bodyend="763"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a8e8376e84ee13eee51510be38a629b44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP ltimes</definition>
        <argsstring>(LISP x, LISP y)</argsstring>
        <name>ltimes</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="766" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="765" bodyend="770"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1aeeec06a40fb5f0fa2ceb21787090cbff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP difference</definition>
        <argsstring>(LISP x, LISP y)</argsstring>
        <name>difference</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="773" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="772" bodyend="778"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1adfadaf2359d0d2c6091ab9eba3e1d86f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP Quotient</definition>
        <argsstring>(LISP x, LISP y)</argsstring>
        <name>Quotient</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="781" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="780" bodyend="786"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1aaa74b2ca5731ca8b78c60eb0ba95c214" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lllabs</definition>
        <argsstring>(LISP x)</argsstring>
        <name>lllabs</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="789" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="788" bodyend="795"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1ae338979b4ca9b97fb5685ce8487032d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lsqrt</definition>
        <argsstring>(LISP x)</argsstring>
        <name>lsqrt</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="798" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="797" bodyend="799"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a7cfebd97f6f3ae5d2de2821aefe276de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP greaterp</definition>
        <argsstring>(LISP x, LISP y)</argsstring>
        <name>greaterp</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="802" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="801" bodyend="805"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1aa128f71f5a92488c9e369f76df87c83b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lessp</definition>
        <argsstring>(LISP x, LISP y)</argsstring>
        <name>lessp</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="808" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="807" bodyend="811"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1ab692d7fcc9df6180a09f213ec1293235" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP greaterEp</definition>
        <argsstring>(LISP x, LISP y)</argsstring>
        <name>greaterEp</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="814" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="813" bodyend="817"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a94f7791654e9100b023cc5e3ee400e17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lessEp</definition>
        <argsstring>(LISP x, LISP y)</argsstring>
        <name>lessEp</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="820" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="819" bodyend="823"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a223174f726085ace1fb57f400bc1f4e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lmax</definition>
        <argsstring>(LISP x, LISP y)</argsstring>
        <name>lmax</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="826" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="825" bodyend="829"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a5f5c2b4f88e71cad0e4b6f7feb379f77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lmin</definition>
        <argsstring>(LISP x, LISP y)</argsstring>
        <name>lmin</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="832" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="831" bodyend="835"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1aca312b3bc61638a734128f6cdff70ef6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP eq</definition>
        <argsstring>(LISP x, LISP y)</argsstring>
        <name>eq</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="838" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="837" bodyend="838"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a0358768263c05e60d8413b1c67f53c1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP eql</definition>
        <argsstring>(LISP x, LISP y)</argsstring>
        <name>eql</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="841" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="840" bodyend="845"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a1b7a93cf1c6edcbcead1fa6f4ded2e4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP symcons</definition>
        <argsstring>(char *pname, LISP vcell)</argsstring>
        <name>symcons</name>
        <param>
          <type>char *</type>
          <declname>pname</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>vcell</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="848" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="847" bodyend="852"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a695f196d520897d5ff825e6cb9466714" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP symbolp</definition>
        <argsstring>(LISP x)</argsstring>
        <name>symbolp</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="855" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="854" bodyend="855"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a6fe8ee57df0a1a922ab0c8cacb07d359" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP err_ubv</definition>
        <argsstring>(LISP v)</argsstring>
        <name>err_ubv</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="858" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="857" bodyend="858"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a0dba4e60d1a307bd72eb34a232c5a382" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP symbol_boundp</definition>
        <argsstring>(LISP x, LISP env)</argsstring>
        <name>symbol_boundp</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>env</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="861" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="860" bodyend="865"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a4f2eeda73f875cc2c69053fae3af0c83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP symbol_value</definition>
        <argsstring>(LISP x, LISP env)</argsstring>
        <name>symbol_value</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>env</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="868" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="867" bodyend="874"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a2815fbfb9fc70d853f0e901de7a3cef1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* must_malloc</definition>
        <argsstring>(unsigned long size)</argsstring>
        <name>must_malloc</name>
        <param>
          <type>unsigned long</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="879" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="878" bodyend="882"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a0377e2d31629c56795fdafd1dd6026bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP gen_intern</definition>
        <argsstring>(char *name, long copyp)</argsstring>
        <name>gen_intern</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>long</type>
          <declname>copyp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="885" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="884" bodyend="910"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1adfb86e88b64db30c40e59d5bbfee27e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP cintern</definition>
        <argsstring>(char *name)</argsstring>
        <name>cintern</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="913" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="912" bodyend="913"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1af7175dfdd915da0dc939a457276d0166" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP rintern</definition>
        <argsstring>(char *name)</argsstring>
        <name>rintern</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="916" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="915" bodyend="916"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a171fb504f35bd5484080905c19bf299f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP intern</definition>
        <argsstring>(LISP name)</argsstring>
        <name>intern</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="919" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="918" bodyend="919"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a328cb7cb38366ef63b012be672204e50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP subrcons</definition>
        <argsstring>(long type, char *name, SUBR_FUNC f)</argsstring>
        <name>subrcons</name>
        <param>
          <type>long</type>
          <declname>type</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>SUBR_FUNC</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="922" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="921" bodyend="926"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1aa0efac2bef1b1195488a51da2a22e1cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP closure</definition>
        <argsstring>(LISP env, LISP code)</argsstring>
        <name>closure</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>env</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>code</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="929" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="928" bodyend="933"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a7ddae55dcb66d90920f25e251a09c1fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gc_protect</definition>
        <argsstring>(LISP *location)</argsstring>
        <name>gc_protect</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref> *</type>
          <declname>location</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="936" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="935" bodyend="936"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a5f9b59d6968d034f6d1d71532590aca4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gc_protect_n</definition>
        <argsstring>(LISP *location, long n)</argsstring>
        <name>gc_protect_n</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref> *</type>
          <declname>location</declname>
        </param>
        <param>
          <type>long</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="939" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="938" bodyend="944"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a06a0cc45a27c17d9a90b2e883ad9d2ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gc_protect_sym</definition>
        <argsstring>(LISP *location, char *st)</argsstring>
        <name>gc_protect_sym</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref> *</type>
          <declname>location</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>st</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="947" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="946" bodyend="948"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1ae71bf6014338974403758a6ac1935734" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void scan_registers</definition>
        <argsstring>(void)</argsstring>
        <name>scan_registers</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="951" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="950" bodyend="958"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a6601c3a67e225b8c0e1884c8040ac5c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void __stdcall</type>
        <definition>void __stdcall init_storage</definition>
        <argsstring>(void)</argsstring>
        <name>init_storage</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="961" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="960" bodyend="968"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a665ff981973a9fcb00b65b512f4ca8be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_storage_1</definition>
        <argsstring>(void)</argsstring>
        <name>init_storage_1</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="971" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="970" bodyend="1019"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a2d0d66147a1835b921eed9898667ed1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_subr</definition>
        <argsstring>(char *name, long type, SUBR_FUNC fcn)</argsstring>
        <name>init_subr</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>long</type>
          <declname>type</declname>
        </param>
        <param>
          <type>SUBR_FUNC</type>
          <declname>fcn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1022" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1021" bodyend="1022"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1ad96e8236ad9c454fd50828381e437ee4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_subr_0</definition>
        <argsstring>(char *name, LISP(*fcn)(void))</argsstring>
        <name>init_subr_0</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref>(*)(void)</type>
          <declname>fcn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1025" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1024" bodyend="1025"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a65a53a19ee0d26e815f65c6030c45b62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_subr_1</definition>
        <argsstring>(char *name, LISP(*fcn)(LISP))</argsstring>
        <name>init_subr_1</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref>(*)(<ref refid="structobj" kindref="compound">LISP</ref>)</type>
          <declname>fcn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1028" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1027" bodyend="1028"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1aac49844776aec2ff766454998f5bccdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_subr_2</definition>
        <argsstring>(char *name, LISP(*fcn)(LISP, LISP))</argsstring>
        <name>init_subr_2</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref>(*)(<ref refid="structobj" kindref="compound">LISP</ref>, <ref refid="structobj" kindref="compound">LISP</ref>)</type>
          <declname>fcn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1031" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1030" bodyend="1031"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1aa5a0e6fe99cd82ba32790dd611fd4c5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_subr_2n</definition>
        <argsstring>(char *name, LISP(*fcn)(LISP, LISP))</argsstring>
        <name>init_subr_2n</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref>(*)(<ref refid="structobj" kindref="compound">LISP</ref>, <ref refid="structobj" kindref="compound">LISP</ref>)</type>
          <declname>fcn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1034" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1033" bodyend="1034"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a5762f7fc54f9b10ec7e3c9c4c8337d5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_subr_3</definition>
        <argsstring>(char *name, LISP(*fcn)(LISP, LISP, LISP))</argsstring>
        <name>init_subr_3</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref>(*)(<ref refid="structobj" kindref="compound">LISP</ref>, <ref refid="structobj" kindref="compound">LISP</ref>, <ref refid="structobj" kindref="compound">LISP</ref>)</type>
          <declname>fcn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1037" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1036" bodyend="1037"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1af2341af550a1f22f0e7ebc12709d05b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_subr_4</definition>
        <argsstring>(char *name, LISP(*fcn)(LISP, LISP, LISP, LISP))</argsstring>
        <name>init_subr_4</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref>(*)(<ref refid="structobj" kindref="compound">LISP</ref>, <ref refid="structobj" kindref="compound">LISP</ref>, <ref refid="structobj" kindref="compound">LISP</ref>, <ref refid="structobj" kindref="compound">LISP</ref>)</type>
          <declname>fcn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1040" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1039" bodyend="1040"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1ac5f9607f1a5925e4e9eb3e724fdecf06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_subr_5</definition>
        <argsstring>(char *name, LISP(*fcn)(LISP, LISP, LISP, LISP, LISP))</argsstring>
        <name>init_subr_5</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref>(*)(<ref refid="structobj" kindref="compound">LISP</ref>, <ref refid="structobj" kindref="compound">LISP</ref>, <ref refid="structobj" kindref="compound">LISP</ref>, <ref refid="structobj" kindref="compound">LISP</ref>, <ref refid="structobj" kindref="compound">LISP</ref>)</type>
          <declname>fcn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1043" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1042" bodyend="1043"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a133d21d6f417cff977358d7cbb271276" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_lsubr</definition>
        <argsstring>(char *name, LISP(*fcn)(LISP))</argsstring>
        <name>init_lsubr</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref>(*)(<ref refid="structobj" kindref="compound">LISP</ref>)</type>
          <declname>fcn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1046" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1045" bodyend="1046"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a117b4f6ba925d7f04f126b5ed21ca0b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_fsubr</definition>
        <argsstring>(char *name, LISP(*fcn)(LISP, LISP))</argsstring>
        <name>init_fsubr</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref>(*)(<ref refid="structobj" kindref="compound">LISP</ref>, <ref refid="structobj" kindref="compound">LISP</ref>)</type>
          <declname>fcn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1049" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1048" bodyend="1049"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1ad785bfde8e371039bb8114eb91a6aa37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_msubr</definition>
        <argsstring>(char *name, LISP(*fcn)(LISP *, LISP *))</argsstring>
        <name>init_msubr</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref>(*)(<ref refid="structobj" kindref="compound">LISP</ref> *, <ref refid="structobj" kindref="compound">LISP</ref> *)</type>
          <declname>fcn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1052" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1051" bodyend="1052"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1ad0c743a7c7d75a78a90795dc82b0f05b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP assq</definition>
        <argsstring>(LISP x, LISP alist)</argsstring>
        <name>assq</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>alist</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1055" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1054" bodyend="1061"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1abdc4bd54dde3ae95c97917a84b6a054f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structuser__type__hooks" kindref="compound">user_type_hooks</ref> *</type>
        <definition>struct user_type_hooks* get_user_type_hooks</definition>
        <argsstring>(long type)</argsstring>
        <name>get_user_type_hooks</name>
        <param>
          <type>long</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1065" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1064" bodyend="1074"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a910105542689e33cd8680504ed889ee5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long allocate_user_tc</definition>
        <argsstring>(void)</argsstring>
        <name>allocate_user_tc</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1077" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1076" bodyend="1081"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a8422066a0bbb30b5d5ec7e0028b20206" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void set_gc_hooks</definition>
        <argsstring>(long type, LISP(*rel)(LISP), LISP(*mark)(LISP), void(*scan)(LISP), void(*free)(LISP), long *kind)</argsstring>
        <name>set_gc_hooks</name>
        <param>
          <type>long</type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref>(*)(<ref refid="structobj" kindref="compound">LISP</ref>)</type>
          <declname>rel</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref>(*)(<ref refid="structobj" kindref="compound">LISP</ref>)</type>
          <declname>mark</declname>
        </param>
        <param>
          <type>void(*)(<ref refid="structobj" kindref="compound">LISP</ref>)</type>
          <declname>scan</declname>
        </param>
        <param>
          <type>void(*)(<ref refid="structobj" kindref="compound">LISP</ref>)</type>
          <declname>free</declname>
        </param>
        <param>
          <type>long *</type>
          <declname>kind</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1089" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1083" bodyend="1095"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1aa2796c687ce37f38313eb8a1e673ab61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP gc_relocate</definition>
        <argsstring>(LISP x)</argsstring>
        <name>gc_relocate</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1098" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1097" bodyend="1131"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a88e5690d1f412c291f043a63581681a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP get_newspace</definition>
        <argsstring>(void)</argsstring>
        <name>get_newspace</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1134" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1133" bodyend="1142"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1acd3162de6b44805d90232a94acb00362" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void scan_newspace</definition>
        <argsstring>(LISP newspace)</argsstring>
        <name>scan_newspace</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>newspace</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1145" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1144" bodyend="1171"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a6c303debd0776d7945bdd8f1f483e360" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_oldspace</definition>
        <argsstring>(LISP space, LISP end)</argsstring>
        <name>free_oldspace</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>space</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1174" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1173" bodyend="1196"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a3c807cef5c19a8d0fbac7ef270175a12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gc_stop_and_copy</definition>
        <argsstring>(void)</argsstring>
        <name>gc_stop_and_copy</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1199" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1198" bodyend="1211"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a7ec2c52d293924a12ff197d362d7233a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP allocate_aheap</definition>
        <argsstring>(void)</argsstring>
        <name>allocate_aheap</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1214" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1213" bodyend="1237"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a04255654b7f695db7fa7a21a3f6552e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gc_for_newcell</definition>
        <argsstring>(void)</argsstring>
        <name>gc_for_newcell</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1240" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1239" bodyend="1260"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a7a3f29622eb8b713afa694e813224817" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gc_mark_and_sweep</definition>
        <argsstring>(void)</argsstring>
        <name>gc_mark_and_sweep</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1263" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1262" bodyend="1280"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a73d5154c9fe24f1754bd6e7731a7d13a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gc_ms_stats_start</definition>
        <argsstring>(void)</argsstring>
        <name>gc_ms_stats_start</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1283" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1282" bodyend="1286"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a16215ecaa76d0b63d6373be3706ac84e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gc_ms_stats_end</definition>
        <argsstring>(void)</argsstring>
        <name>gc_ms_stats_end</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1289" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1288" bodyend="1294"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1aa4f5bcd30bed31d680d38dbee6549132" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gc_mark</definition>
        <argsstring>(LISP ptr)</argsstring>
        <name>gc_mark</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1297" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1296" bodyend="1330"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1ad6e9dd69ff2519d97201942b19c42e36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mark_protected_registers</definition>
        <argsstring>(void)</argsstring>
        <name>mark_protected_registers</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1333" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1332" bodyend="1340"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a6daf0b717d315631ad834b14b7530673" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mark_locations</definition>
        <argsstring>(LISP *start, LISP *end)</argsstring>
        <name>mark_locations</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref> *</type>
          <declname>start</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref> *</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1343" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1342" bodyend="1350"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a9b20fb232d2fdb72587f63445cae2a35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long looks_pointerp</definition>
        <argsstring>(LISP p)</argsstring>
        <name>looks_pointerp</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1353" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1352" bodyend="1362"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1acd1a6a61e410a95b8ccc0cf1024828c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mark_locations_array</definition>
        <argsstring>(LISP *x, long n)</argsstring>
        <name>mark_locations_array</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref> *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>long</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1365" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1364" bodyend="1370"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a7cefa1c88f045205deaed7cf59472201" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gc_sweep</definition>
        <argsstring>(void)</argsstring>
        <name>gc_sweep</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1373" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1372" bodyend="1413"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a02770d7e41720d2c4a9a512981dee2d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gc_kind_check</definition>
        <argsstring>(void)</argsstring>
        <name>gc_kind_check</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1416" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1415" bodyend="1418"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a46a02df75f8b14f7c2591a6db48e2224" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP user_gc</definition>
        <argsstring>(LISP args)</argsstring>
        <name>user_gc</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1421" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1420" bodyend="1432"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1af5b33abcc3956f70fbc1758b1fa827b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long nactive_heaps</definition>
        <argsstring>(void)</argsstring>
        <name>nactive_heaps</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1435" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1434" bodyend="1437"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1ae60d7b046ce53981aa418fb260ef55fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long freelist_length</definition>
        <argsstring>(void)</argsstring>
        <name>freelist_length</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1440" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1439" bodyend="1444"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a2c3b9fef478f03d190504f9bcac9916a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP gc_status</definition>
        <argsstring>(LISP args)</argsstring>
        <name>gc_status</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1447" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1446" bodyend="1468"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1ac982788fa49a48fcf42ecfbcfc249a65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP gc_info</definition>
        <argsstring>(LISP arg)</argsstring>
        <name>gc_info</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1471" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1470" bodyend="1485"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1abee7de64a3c86d2a46d61fbd720e9a1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP leval_args</definition>
        <argsstring>(LISP l, LISP env)</argsstring>
        <name>leval_args</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>l</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>env</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1488" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1487" bodyend="1498"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a4de2d62f1b970d09f4266f275de532de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP extend_env</definition>
        <argsstring>(LISP actuals, LISP formals, LISP env)</argsstring>
        <name>extend_env</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>actuals</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>formals</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>env</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1501" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1500" bodyend="1503"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a2dc67d4a4dc2e50f571e7bbb3ec909fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP envlookup</definition>
        <argsstring>(LISP var, LISP env)</argsstring>
        <name>envlookup</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>env</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1508" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1507" bodyend="1522"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1aabef08624025f324073973d307d08af1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void set_eval_hooks</definition>
        <argsstring>(long type, LISP(*fcn)(LISP, LISP *, LISP *))</argsstring>
        <name>set_eval_hooks</name>
        <param>
          <type>long</type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref>(*)(<ref refid="structobj" kindref="compound">LISP</ref>, <ref refid="structobj" kindref="compound">LISP</ref> *, <ref refid="structobj" kindref="compound">LISP</ref> *)</type>
          <declname>fcn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1525" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1524" bodyend="1527"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a1f649a5107d04ff82c478a5a06fa6707" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP err_closure_code</definition>
        <argsstring>(LISP tmp)</argsstring>
        <name>err_closure_code</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>tmp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1530" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1529" bodyend="1530"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1ac1a67b72248f7dcf3560f93e09c97a00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP leval</definition>
        <argsstring>(LISP x, LISP env)</argsstring>
        <name>leval</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>env</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1533" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1532" bodyend="1678"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a730d9918402689a3ee9c09130731d682" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lapply</definition>
        <argsstring>(LISP fcn, LISP args)</argsstring>
        <name>lapply</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>fcn</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1681" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1680" bodyend="1749"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1abe099b58030928ac51d67e82019240cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP setvar</definition>
        <argsstring>(LISP var, LISP val, LISP env)</argsstring>
        <name>setvar</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>env</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1752" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1751" bodyend="1756"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a9e33e857c0d0705cb61782362bbb9082" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP leval_setq</definition>
        <argsstring>(LISP args, LISP env)</argsstring>
        <name>leval_setq</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>args</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>env</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1759" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1758" bodyend="1759"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1af363a81db2cc35351d166aee37126877" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP syntax_define</definition>
        <argsstring>(LISP args)</argsstring>
        <name>syntax_define</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1762" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1761" bodyend="1768"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a0195297b8f2dd2c1003ac72b94e5c77a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP leval_define</definition>
        <argsstring>(LISP args, LISP env)</argsstring>
        <name>leval_define</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>args</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>env</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1771" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1770" bodyend="1782"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1aed0624fbcb44aa54ebff0c0c4035aee0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP leval_if</definition>
        <argsstring>(LISP *pform, LISP *penv)</argsstring>
        <name>leval_if</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref> *</type>
          <declname>pform</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref> *</type>
          <declname>penv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1785" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1784" bodyend="1790"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a78f863faf8b3d4263649dba40a97697b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP leval_lambda</definition>
        <argsstring>(LISP args, LISP env)</argsstring>
        <name>leval_lambda</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>args</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>env</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1793" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1792" bodyend="1797"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a32399c34570fabb1742d384a1ebc7a24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP leval_progn</definition>
        <argsstring>(LISP *pform, LISP *penv)</argsstring>
        <name>leval_progn</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref> *</type>
          <declname>pform</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref> *</type>
          <declname>penv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1800" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1799" bodyend="1806"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1afd32530bd394d66db65cd6ed9f31b764" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP leval_or</definition>
        <argsstring>(LISP *pform, LISP *penv)</argsstring>
        <name>leval_or</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref> *</type>
          <declname>pform</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref> *</type>
          <declname>penv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1809" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1808" bodyend="1818"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a564b994969ddb9b12cc415b68601f58c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP leval_and</definition>
        <argsstring>(LISP *pform, LISP *penv)</argsstring>
        <name>leval_and</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref> *</type>
          <declname>pform</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref> *</type>
          <declname>penv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1821" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1820" bodyend="1830"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1acc624aa1665206381a5bbc1c300b6a27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP leval_catch_1</definition>
        <argsstring>(LISP forms, LISP env)</argsstring>
        <name>leval_catch_1</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>forms</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>env</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1833" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1832" bodyend="1837"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1ad833540d0c868a3a052b1130552ac356" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP leval_catch</definition>
        <argsstring>(LISP args, LISP env)</argsstring>
        <name>leval_catch</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>args</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>env</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1840" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1839" bodyend="1849"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a11811035bb1a9882b95e9c04c4e19345" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lthrow</definition>
        <argsstring>(LISP tag, LISP value)</argsstring>
        <name>lthrow</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>tag</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1852" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1851" bodyend="1859"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1ac8b775f13790a8a310d73d7e9ff1340d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP leval_let</definition>
        <argsstring>(LISP *pform, LISP *penv)</argsstring>
        <name>leval_let</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref> *</type>
          <declname>pform</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref> *</type>
          <declname>penv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1862" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1861" bodyend="1867"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a4aabd893448c956aec64d2bee8cddbe9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP letstar_macro</definition>
        <argsstring>(LISP form)</argsstring>
        <name>letstar_macro</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>form</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1870" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1869" bodyend="1878"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a8474d4133bdf363f8842ade48f0f1c13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP letrec_macro</definition>
        <argsstring>(LISP form)</argsstring>
        <name>letrec_macro</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>form</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1881" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1880" bodyend="1887"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1ab43f65f78c600c2b019aad79cb74fe0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP reverse</definition>
        <argsstring>(LISP l)</argsstring>
        <name>reverse</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1890" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1889" bodyend="1893"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a5af89037f98ebea8513caae470f13f38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP let_macro</definition>
        <argsstring>(LISP form)</argsstring>
        <name>let_macro</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>form</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1896" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1895" bodyend="1907"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a4bc3b11ad1144525ba80ad98cfec0614" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP leval_quote</definition>
        <argsstring>(LISP args, LISP env)</argsstring>
        <name>leval_quote</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>args</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>env</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1910" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1909" bodyend="1910"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1ada2e75307a508c56099025ef32eed760" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP leval_tenv</definition>
        <argsstring>(LISP args, LISP env)</argsstring>
        <name>leval_tenv</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>args</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>env</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1913" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1912" bodyend="1913"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1aea37b84871f69aaafff97276fea5e679" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP leval_while</definition>
        <argsstring>(LISP args, LISP env)</argsstring>
        <name>leval_while</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>args</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>env</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1916" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1915" bodyend="1920"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a387f44ea63b4eb170207119d33536b31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP symbolconc</definition>
        <argsstring>(LISP args)</argsstring>
        <name>symbolconc</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1923" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1922" bodyend="1933"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1aa2b43eda6a1bcf95b080ce6768acbe4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void set_print_hooks</definition>
        <argsstring>(long type, void(*fcn)(LISP, struct gen_printio *))</argsstring>
        <name>set_print_hooks</name>
        <param>
          <type>long</type>
          <declname>type</declname>
        </param>
        <param>
          <type>void(*)(<ref refid="structobj" kindref="compound">LISP</ref>, struct <ref refid="structgen__printio" kindref="compound">gen_printio</ref> *)</type>
          <declname>fcn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1936" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1935" bodyend="1938"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1ac5e0657939d9f453472083d971a8e29b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* subr_kind_str</definition>
        <argsstring>(long n)</argsstring>
        <name>subr_kind_str</name>
        <param>
          <type>long</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1941" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1940" bodyend="1952"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a512954b56688aae5f56e49b1ad1bd5c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lprin1g</definition>
        <argsstring>(LISP exp, struct gen_printio *f)</argsstring>
        <name>lprin1g</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>exp</declname>
        </param>
        <param>
          <type>struct <ref refid="structgen__printio" kindref="compound">gen_printio</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="1955" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="1954" bodyend="2015"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a51347ef9bd8442fe0702261f27f40605" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lprint</definition>
        <argsstring>(LISP exp, LISP lf)</argsstring>
        <name>lprint</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>exp</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>lf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2018" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2017" bodyend="2021"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a1cde9000764ff6a0bf6c3539a2b92c4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lprin1</definition>
        <argsstring>(LISP exp, LISP lf)</argsstring>
        <name>lprin1</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>exp</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>lf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2024" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2023" bodyend="2026"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a0576a51fb2f2c25ae83d52dedb31517b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lprin1f</definition>
        <argsstring>(LISP exp, FILE *f)</argsstring>
        <name>lprin1f</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>exp</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2029" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2028" bodyend="2034"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1aa0911df6c69062fa5a0c23a7789443d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lread</definition>
        <argsstring>(LISP f)</argsstring>
        <name>lread</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2037" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2036" bodyend="2037"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a1fb970c08d70874a7f9be27962f1314a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int f_getc</definition>
        <argsstring>(FILE *f)</argsstring>
        <name>f_getc</name>
        <param>
          <type>FILE *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2040" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2039" bodyend="2050"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a99593ef7c4e5c06ac2efe63257c77066" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void f_ungetc</definition>
        <argsstring>(int c, FILE *f)</argsstring>
        <name>f_ungetc</name>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2053" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2052" bodyend="2053"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a00b6fa79a0f1d0cb2340992bc405c2aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int flush_ws</definition>
        <argsstring>(struct gen_readio *f, char *eoferr)</argsstring>
        <name>flush_ws</name>
        <param>
          <type>struct <ref refid="structgen__readio" kindref="compound">gen_readio</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>eoferr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2056" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2055" bodyend="2063"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1ac2ac12cc61f77db9b56a611bb6dae0c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lreadf</definition>
        <argsstring>(FILE *f)</argsstring>
        <name>lreadf</name>
        <param>
          <type>FILE *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2066" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2065" bodyend="2070"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a16af5c4b944d88f5d3ef1a4ee18617c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP readtl</definition>
        <argsstring>(struct gen_readio *f)</argsstring>
        <name>readtl</name>
        <param>
          <type>struct <ref refid="structgen__readio" kindref="compound">gen_readio</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2073" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2072" bodyend="2077"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1af36c694163efbbe8397f4eed685ed65d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void set_read_hooks</definition>
        <argsstring>(char *all_set, char *end_set, LISP(*fcn1)(int, struct gen_readio *), LISP(*fcn2)(char *, long, int *))</argsstring>
        <name>set_read_hooks</name>
        <param>
          <type>char *</type>
          <declname>all_set</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>end_set</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref>(*)(int, struct <ref refid="structgen__readio" kindref="compound">gen_readio</ref> *)</type>
          <declname>fcn1</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref>(*)(char *, long, int *)</type>
          <declname>fcn2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2082" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2079" bodyend="2085"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a5a8c19ff5cd220da39df87538f2ddf24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lreadr</definition>
        <argsstring>(struct gen_readio *f)</argsstring>
        <name>lreadr</name>
        <param>
          <type>struct <ref refid="structgen__readio" kindref="compound">gen_readio</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2088" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2087" bodyend="2130"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a11907e67cefc1d891de3be63cd9913aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lreadparen</definition>
        <argsstring>(struct gen_readio *f)</argsstring>
        <name>lreadparen</name>
        <param>
          <type>struct <ref refid="structgen__readio" kindref="compound">gen_readio</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2133" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2132" bodyend="2144"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1aa63ded598148825ab1b40a8ece01a5c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lreadtk</definition>
        <argsstring>(char *buffer, long j)</argsstring>
        <name>lreadtk</name>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>long</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2147" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2146" bodyend="2170"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a1ad6946e92388b92ac05072085dbe38b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP copy_list</definition>
        <argsstring>(LISP x)</argsstring>
        <name>copy_list</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2173" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2172" bodyend="2175"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1ab9afc27e30eb92deb292d7434e15e1a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP apropos</definition>
        <argsstring>(LISP matchl)</argsstring>
        <name>apropos</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>matchl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2178" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2177" bodyend="2187"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1aeb3ed415d749034f6669764f5ea5d370" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP fopen_cg</definition>
        <argsstring>(FILE *(*fcn)(const char *, const char *), char *name, char *how)</argsstring>
        <name>fopen_cg</name>
        <param>
          <type>FILE *(*)(const char *, const char *)</type>
          <declname>fcn</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>how</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2190" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2189" bodyend="2204"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a16ec1e6c4f754f6d80590292391193f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP fopen_c</definition>
        <argsstring>(char *name, char *how)</argsstring>
        <name>fopen_c</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>how</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2207" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2206" bodyend="2207"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a15d4e3a86de28e7b7489fc66aad0f0e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP fopen_l</definition>
        <argsstring>(LISP name, LISP how)</argsstring>
        <name>fopen_l</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>how</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2210" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2209" bodyend="2210"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1ad553ea42dd704d621602af3cb60cfcf0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP delq</definition>
        <argsstring>(LISP elem, LISP l)</argsstring>
        <name>delq</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>elem</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2213" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2212" bodyend="2217"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a5411921bc079c09067ada4644f6c5da7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP fclose_l</definition>
        <argsstring>(LISP p)</argsstring>
        <name>fclose_l</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2220" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2219" bodyend="2225"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1af4bfda2605b73c0e5c7307b0088286d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP vload</definition>
        <argsstring>(char *ofname, long cflag, long rflag)</argsstring>
        <name>vload</name>
        <param>
          <type>char *</type>
          <declname>ofname</declname>
        </param>
        <param>
          <type>long</type>
          <declname>cflag</declname>
        </param>
        <param>
          <type>long</type>
          <declname>rflag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2228" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2227" bodyend="2310"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a867e02599bd2c800bf4c6ab4a137114c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP load</definition>
        <argsstring>(LISP fname, LISP cflag, LISP rflag)</argsstring>
        <name>load</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>fname</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>cflag</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>rflag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2313" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2312" bodyend="2313"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a2bae50076c210f5bde59c472d376e6af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP require</definition>
        <argsstring>(LISP fname)</argsstring>
        <name>require</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>fname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2316" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2315" bodyend="2324"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a856d607ad5d42df15c49e9b02a1a84ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP save_forms</definition>
        <argsstring>(LISP fname, LISP forms, LISP how)</argsstring>
        <name>save_forms</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>fname</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>forms</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>how</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2327" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2326" bodyend="2347"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a81337b84dc2832d69e498d4e4d818667" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP quit</definition>
        <argsstring>(void)</argsstring>
        <name>quit</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2350" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2349" bodyend="2350"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a161f09b1e3adce30a7e6fd3e0145dc59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP nullp</definition>
        <argsstring>(LISP x)</argsstring>
        <name>nullp</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2353" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2352" bodyend="2353"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1ae45823719fde5a5784394907ad255600" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP arglchk</definition>
        <argsstring>(LISP x)</argsstring>
        <name>arglchk</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2356" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2355" bodyend="2363"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a3a3fdeb979a93f1808be1ea0a38168f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void file_gc_free</definition>
        <argsstring>(LISP ptr)</argsstring>
        <name>file_gc_free</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2366" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2365" bodyend="2371"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a3f48eeb0c19a83bda599d643800793a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void file_prin1</definition>
        <argsstring>(LISP ptr, struct gen_printio *f)</argsstring>
        <name>file_prin1</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>struct <ref refid="structgen__printio" kindref="compound">gen_printio</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2374" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2373" bodyend="2382"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a56036279e670aec9b8fe7b91b57a4c99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FILE *</type>
        <definition>FILE* get_c_file</definition>
        <argsstring>(LISP p, FILE *deflt)</argsstring>
        <name>get_c_file</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>p</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>deflt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2385" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2384" bodyend="2388"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a2df1601caa4385e0eff76c26d177b98d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lgetc</definition>
        <argsstring>(LISP p)</argsstring>
        <name>lgetc</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2391" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2390" bodyend="2393"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a31d82a1732f5f22ac8dd84d219765def" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lungetc</definition>
        <argsstring>(LISP ii, LISP p)</argsstring>
        <name>lungetc</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>ii</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2396" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2395" bodyend="2400"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a5c46781d45ac977833c2153cc15bf7f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lputc</definition>
        <argsstring>(LISP c, LISP p)</argsstring>
        <name>lputc</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2403" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2402" bodyend="2414"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a9666fc8191fb82d488a8e6fe1e3dca09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lputs</definition>
        <argsstring>(LISP str, LISP p)</argsstring>
        <name>lputs</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>str</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2417" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2416" bodyend="2418"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1adea5b8044e594d74a38221efa9a4b003" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lftell</definition>
        <argsstring>(LISP file)</argsstring>
        <name>lftell</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2421" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2420" bodyend="2421"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a8de5d91775729b78c693d817d9bbad66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lfseek</definition>
        <argsstring>(LISP file, LISP offset, LISP direction)</argsstring>
        <name>lfseek</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>file</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>offset</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>direction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2424" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2423" bodyend="2425"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a125b62e7b2fa061c6584f3ee16245efc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP parse_number</definition>
        <argsstring>(LISP x)</argsstring>
        <name>parse_number</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2428" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2427" bodyend="2430"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a7929eb2254c004e51e9df41213642734" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void __stdcall</type>
        <definition>void __stdcall init_subrs</definition>
        <argsstring>(void)</argsstring>
        <name>init_subrs</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2433" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2432" bodyend="2434"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a8c1a1b6793a1a4cfe00fec10c80ae76c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP closure_code</definition>
        <argsstring>(LISP exp)</argsstring>
        <name>closure_code</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>exp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2437" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2436" bodyend="2437"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1ac2dd1d89b090991184717bb5cb4decfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP closure_env</definition>
        <argsstring>(LISP exp)</argsstring>
        <name>closure_env</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>exp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2440" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2439" bodyend="2440"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a53a25be98b04cf09f2a2a5f979d85938" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lwhile</definition>
        <argsstring>(LISP form, LISP env)</argsstring>
        <name>lwhile</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>form</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>env</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2443" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2442" bodyend="2447"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a20d2c7a956b7deac553d77d95ab7c58b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP nreverse</definition>
        <argsstring>(LISP x)</argsstring>
        <name>nreverse</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2450" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2449" bodyend="2456"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a0a2f5680c02a7f54c083476011c960d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP siod_verbose</definition>
        <argsstring>(LISP arg)</argsstring>
        <name>siod_verbose</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2459" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2458" bodyend="2461"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a2201fcd2540bcc4c05f99532a62aaa7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int __stdcall</type>
        <definition>int __stdcall siod_verbose_check</definition>
        <argsstring>(int level)</argsstring>
        <name>siod_verbose_check</name>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2464" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2463" bodyend="2464"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1ad577336154c35f141dc2e77bbb6c5265" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lruntime</definition>
        <argsstring>(void)</argsstring>
        <name>lruntime</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2467" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2466" bodyend="2468"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a8d50742a869f1ea3ee1652c38ee3be8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lrealtime</definition>
        <argsstring>(void)</argsstring>
        <name>lrealtime</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2471" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2470" bodyend="2471"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a6b61117660f1f04fad5bf45d78af411c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP caar</definition>
        <argsstring>(LISP x)</argsstring>
        <name>caar</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2474" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2473" bodyend="2474"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1aec83fbf53fd9cbb36aadd5d939916bef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP cadr</definition>
        <argsstring>(LISP x)</argsstring>
        <name>cadr</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2477" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2476" bodyend="2477"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a58f7c369a9dcb853fbccece3185c318f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP cdar</definition>
        <argsstring>(LISP x)</argsstring>
        <name>cdar</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2480" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2479" bodyend="2480"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a853e4d9d09070b0fc3c2a5f0429eb1ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP cddr</definition>
        <argsstring>(LISP x)</argsstring>
        <name>cddr</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2483" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2482" bodyend="2483"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a1370c7bacdb218bb56975a7486d1caef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lrand</definition>
        <argsstring>(LISP m)</argsstring>
        <name>lrand</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2486" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2485" bodyend="2491"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a77f91f9d99435da82f0e07bcb9db8297" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lsrand</definition>
        <argsstring>(LISP s)</argsstring>
        <name>lsrand</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2494" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2493" bodyend="2495"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a004240a9dfeaa0b7b87a75fd1cf1e83e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP a_true_value</definition>
        <argsstring>(void)</argsstring>
        <name>a_true_value</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2498" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2497" bodyend="2498"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a393bf785a9a629116ec058e84ecc8f51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP poparg</definition>
        <argsstring>(LISP *ptr, LISP defaultv)</argsstring>
        <name>poparg</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>defaultv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2501" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2500" bodyend="2506"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1ac9c0f4b2f6f937c21ac095925dbd2e2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* last_c_errmsg</definition>
        <argsstring>(int num)</argsstring>
        <name>last_c_errmsg</name>
        <param>
          <type>int</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2509" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2508" bodyend="2516"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a23e49d37ba6c631b8dc01956589729eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP llast_c_errmsg</definition>
        <argsstring>(int num)</argsstring>
        <name>llast_c_errmsg</name>
        <param>
          <type>int</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2519" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2518" bodyend="2522"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1ab11116adc1e02e9b205f800fada905db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lllast_c_errmsg</definition>
        <argsstring>(void)</argsstring>
        <name>lllast_c_errmsg</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2525" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2524" bodyend="2525"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a85c440526efab90f6659c97ba8d778f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t safe_strlen</definition>
        <argsstring>(const char *s, size_t size)</argsstring>
        <name>safe_strlen</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2528" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2527" bodyend="2532"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a063032e708bbd9a619681be48fd1e6d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* safe_strcpy</definition>
        <argsstring>(char *s1, size_t size1, const char *s2)</argsstring>
        <name>safe_strcpy</name>
        <param>
          <type>char *</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2535" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2534" bodyend="2544"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1ac07fea648f1b27f13b989181a010a5d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* safe_strcat</definition>
        <argsstring>(char *s1, size_t size1, const char *s2)</argsstring>
        <name>safe_strcat</name>
        <param>
          <type>char *</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2547" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2546" bodyend="2550"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1a0a9c9ddf6f13e481d4ad28a51f7f293e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>static LISP parser_read</definition>
        <argsstring>(LISP ignore)</argsstring>
        <name>parser_read</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>ignore</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2553" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2552" bodyend="2553"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1aef88313ca71ea607fa0390ef7d8f5197" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>static LISP os_classification</definition>
        <argsstring>(void)</argsstring>
        <name>os_classification</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2556" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2555" bodyend="2566"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1ab0f60af27ce0b81cab33cf26c77c91ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_subrs_1</definition>
        <argsstring>(void)</argsstring>
        <name>init_subrs_1</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2569" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2568" bodyend="2664"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1aa7709178b2756c0f99391013456f9aee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void err0</definition>
        <argsstring>(void)</argsstring>
        <name>err0</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2670" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2669" bodyend="2670"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1aba2697e9f75053fd7ac848aacc2d2e18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pr</definition>
        <argsstring>(LISP p)</argsstring>
        <name>pr</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2673" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2672" bodyend="2676"/>
      </memberdef>
      <memberdef kind="function" id="slib_8c_1ae4d3d28ceddfcbc787c4034a968186c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void prp</definition>
        <argsstring>(LISP *p)</argsstring>
        <name>prp</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" line="2679" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c" bodystart="2678" bodyend="2680"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>Scheme<sp/>In<sp/>One<sp/>Defun,<sp/>but<sp/>in<sp/>C<sp/>this<sp/>time.</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>COPYRIGHT<sp/>(c)<sp/>1988-1997<sp/>BY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PARADIGM<sp/>ASSOCIATES<sp/>INCORPORATED,<sp/>CAMBRIDGE,<sp/>MASSACHUSETTS.<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ALL<sp/>RIGHTS<sp/>RESERVED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment">Permission<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>distribute<sp/>and<sp/>sell<sp/>this<sp/>software</highlight></codeline>
<codeline lineno="8"><highlight class="comment">and<sp/>its<sp/>documentation<sp/>for<sp/>any<sp/>purpose<sp/>and<sp/>without<sp/>fee<sp/>is<sp/>hereby</highlight></codeline>
<codeline lineno="9"><highlight class="comment">granted,<sp/>provided<sp/>that<sp/>the<sp/>above<sp/>copyright<sp/>notice<sp/>appear<sp/>in<sp/>all<sp/>copies</highlight></codeline>
<codeline lineno="10"><highlight class="comment">and<sp/>that<sp/>both<sp/>that<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>appear</highlight></codeline>
<codeline lineno="11"><highlight class="comment">in<sp/>supporting<sp/>documentation,<sp/>and<sp/>that<sp/>the<sp/>name<sp/>of<sp/>Paradigm<sp/>Associates</highlight></codeline>
<codeline lineno="12"><highlight class="comment">Inc<sp/>not<sp/>be<sp/>used<sp/>in<sp/>advertising<sp/>or<sp/>publicity<sp/>pertaining<sp/>to<sp/>distribution</highlight></codeline>
<codeline lineno="13"><highlight class="comment">of<sp/>the<sp/>software<sp/>without<sp/>specific,<sp/>written<sp/>prior<sp/>permission.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"></highlight></codeline>
<codeline lineno="15"><highlight class="comment">PARADIGM<sp/>DISCLAIMS<sp/>ALL<sp/>WARRANTIES<sp/>WITH<sp/>REGARD<sp/>TO<sp/>THIS<sp/>SOFTWARE,<sp/>INCLUDING</highlight></codeline>
<codeline lineno="16"><highlight class="comment">ALL<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS,<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL</highlight></codeline>
<codeline lineno="17"><highlight class="comment">PARADIGM<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>SPECIAL,<sp/>INDIRECT<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>OR</highlight></codeline>
<codeline lineno="18"><highlight class="comment">ANY<sp/>DAMAGES<sp/>WHATSOEVER<sp/>RESULTING<sp/>FROM<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA<sp/>OR<sp/>PROFITS,</highlight></codeline>
<codeline lineno="19"><highlight class="comment">WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>NEGLIGENCE<sp/>OR<sp/>OTHER<sp/>TORTIOUS<sp/>ACTION,</highlight></codeline>
<codeline lineno="20"><highlight class="comment">ARISING<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>USE<sp/>OR<sp/>PERFORMANCE<sp/>OF<sp/>THIS</highlight></codeline>
<codeline lineno="21"><highlight class="comment">SOFTWARE.</highlight></codeline>
<codeline lineno="22"><highlight class="comment"></highlight></codeline>
<codeline lineno="23"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="26"><highlight class="comment"></highlight></codeline>
<codeline lineno="27"><highlight class="comment">gjc@world.std.com</highlight></codeline>
<codeline lineno="28"><highlight class="comment"></highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/><sp/><sp/>Release<sp/>1.0:<sp/>24-APR-88</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/><sp/><sp/>Release<sp/>1.1:<sp/>25-APR-88,<sp/>added:<sp/>macros,<sp/>predicates,<sp/>load.<sp/>With<sp/>additions<sp/>by</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/><sp/><sp/><sp/>Barak.Pearlmutter@DOGHEN.BOLTZ.CS.CMU.EDU:<sp/>Full<sp/>flonum<sp/>recognizer,</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/><sp/><sp/><sp/>cleaned<sp/>up<sp/>uses<sp/>of<sp/>NULL/0.<sp/>Now<sp/>distributed<sp/>with<sp/>siod.scm.</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/><sp/><sp/>Release<sp/>1.2:<sp/>28-APR-88,<sp/>name<sp/>changes<sp/>as<sp/>requested<sp/>by<sp/>JAR@AI.AI.MIT.EDU,</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/><sp/><sp/><sp/>plus<sp/>some<sp/>bug<sp/>fixes.</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/><sp/><sp/>Release<sp/>1.3:<sp/>1-MAY-88,<sp/>changed<sp/>env<sp/>to<sp/>use<sp/>frames<sp/>instead<sp/>of<sp/>alist.</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/><sp/><sp/><sp/>define<sp/>now<sp/>works<sp/>properly.<sp/>vms<sp/>specific<sp/>function<sp/>edit.</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/><sp/><sp/>Release<sp/>1.4<sp/>20-NOV-89.<sp/>Minor<sp/>Cleanup<sp/>and<sp/>remodularization.</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/><sp/><sp/><sp/>Now<sp/>in<sp/>3<sp/>files,<sp/>siod.h,<sp/>slib.c,<sp/>siod.c.<sp/>Makes<sp/>it<sp/>easier<sp/>to<sp/>write<sp/>your</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/><sp/><sp/><sp/>own<sp/>main<sp/>loops.<sp/>Some<sp/>short-int<sp/>changes<sp/>for<sp/>lightspeed<sp/>C<sp/>included.</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/><sp/><sp/>Release<sp/>1.5<sp/>29-NOV-89.<sp/>Added<sp/>startup<sp/>flag<sp/>-g,<sp/>select<sp/>stop<sp/>and<sp/>copy</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/><sp/><sp/><sp/>or<sp/>mark-and-sweep<sp/>garbage<sp/>collection,<sp/>which<sp/>assumes<sp/>that<sp/>the<sp/>stack/register</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/><sp/><sp/><sp/>marking<sp/>code<sp/>is<sp/>correct<sp/>for<sp/>your<sp/>architecture.<sp/></highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/><sp/><sp/>Release<sp/>2.0<sp/>1-DEC-89.<sp/>Added<sp/>repl_hooks,<sp/>Catch,<sp/>Throw.<sp/>This<sp/>is<sp/>significantly</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/><sp/><sp/><sp/>different<sp/>enough<sp/>(from<sp/>1.3)<sp/>now<sp/>that<sp/>I&apos;m<sp/>calling<sp/>it<sp/>a<sp/>major<sp/>release.</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/><sp/><sp/>Release<sp/>2.1<sp/>4-DEC-89.<sp/>Small<sp/>reader<sp/>features,<sp/>dot,<sp/>backquote,<sp/>comma.</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/><sp/><sp/>Release<sp/>2.2<sp/>5-DEC-89.<sp/>gc,read,print,eval,<sp/>hooks<sp/>for<sp/>user<sp/>defined<sp/>datatypes.</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/><sp/><sp/>Release<sp/>2.3<sp/>6-DEC-89.<sp/>save_forms,<sp/>obarray<sp/>intern<sp/>mechanism.<sp/>comment<sp/>char.</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/><sp/><sp/>Release<sp/>2.3a.........<sp/>minor<sp/>speed-ups.<sp/>i/o<sp/>interrupt<sp/>considerations.</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/><sp/><sp/>Release<sp/>2.4<sp/>27-APR-90<sp/>gen_readr,<sp/>for<sp/>read-from-string.</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/><sp/><sp/>Release<sp/>2.5<sp/>18-SEP-90<sp/>arrays<sp/>added<sp/>to<sp/>SIOD.C<sp/>by<sp/>popular<sp/>demand.<sp/>inums.</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/><sp/><sp/>Release<sp/>2.6<sp/>11-MAR-92<sp/>function<sp/>prototypes,<sp/>some<sp/>remodularization.</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/><sp/><sp/>Release<sp/>2.7<sp/>20-MAR-92<sp/>hash<sp/>tables,<sp/>fasload.<sp/>Stack<sp/>check.</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/><sp/><sp/>Release<sp/>2.8<sp/><sp/>3-APR-92<sp/>Bug<sp/>fixes,<sp/>\n<sp/>syntax<sp/>in<sp/>string<sp/>reading.</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/><sp/><sp/>Release<sp/>2.9<sp/>28-AUG-92<sp/>gc<sp/>sweep<sp/>bug<sp/>fix.<sp/>fseek,<sp/>ftell,<sp/>etc.<sp/>Change<sp/>to</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/><sp/><sp/>envlookup<sp/>to<sp/>allow<sp/>(a<sp/>.<sp/>rest)<sp/>suggested<sp/>by<sp/>bowles@is.s.u-tokyo.ac.jp.</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/><sp/><sp/>Release<sp/>2.9a<sp/>10-AUG-93.<sp/>Minor<sp/>changes<sp/>for<sp/>Windows<sp/>NT.</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/><sp/><sp/>Release<sp/>3.0<sp/><sp/>1-MAY-94.<sp/>Release<sp/>it,<sp/>include<sp/>changes/cleanup<sp/>recommended<sp/>by</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/><sp/><sp/><sp/>andreasg@nynexst.com<sp/>for<sp/>the<sp/>OS2<sp/>C++<sp/>compiler.<sp/>Compilation<sp/>and<sp/>running</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/><sp/><sp/><sp/>tested<sp/>using<sp/>DEC<sp/>C,<sp/>VAX<sp/>C.<sp/>WINDOWS<sp/>NT.<sp/>GNU<sp/>C<sp/>on<sp/>SPARC.<sp/>Storage</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/><sp/><sp/><sp/>management<sp/>improvements,<sp/>more<sp/>string<sp/>functions.<sp/>SQL<sp/>support.</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/><sp/><sp/>Release<sp/>3.1?<sp/>-JUN-95<sp/>verbose<sp/>flag,<sp/>other<sp/>integration<sp/>improvements<sp/>for<sp/>htqs.c</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/><sp/><sp/><sp/>hpux<sp/>by<sp/>denson@sdd.hp.com,<sp/>solaris<sp/>by<sp/>pgw9@columbia.edu.</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/><sp/><sp/>Release<sp/>3.2X<sp/>MAR-96.<sp/>dynamic<sp/>linking,<sp/>subr<sp/>closures,<sp/>other<sp/>improvements.</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/><sp/><sp/>Release<sp/>3.2<sp/><sp/>12-JUN-96.<sp/>Bug<sp/>fixes.<sp/>Call<sp/>it<sp/>a<sp/>release.</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/><sp/><sp/>Release<sp/>3.3x<sp/>cleanup<sp/>for<sp/>gcc<sp/>-Wall.</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/><sp/><sp/>Release<sp/>3.4<sp/>win95<sp/>cleanup.</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/><sp/><sp/>Release<sp/>3.5<sp/>5-MAY-97<sp/>fixes,<sp/>plus<sp/>win95<sp/>&quot;compiler&quot;<sp/>to<sp/>create<sp/>exe<sp/>files.</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(<sp/>disable<sp/>:<sp/>4996<sp/>)</highlight></codeline>
<codeline lineno="71"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ctype.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;setjmp.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;signal.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;errno.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;siod.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;siodp.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init_slib_version(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="86"><highlight class="normal">{setvar(cintern(</highlight><highlight class="stringliteral">&quot;*slib-version*&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>cintern(</highlight><highlight class="stringliteral">&quot;$Id:<sp/>slib.c,v<sp/>1.16<sp/>1997/12/05<sp/>14:44:44<sp/>gjc<sp/>Exp<sp/>$&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>NIL);}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>__stdcall<sp/>siod_version(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="91"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;3.5<sp/>5-MAY-97&quot;</highlight><highlight class="normal">);}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>nheaps<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>*heaps;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>heap,heap_end,heap_org;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>heap_size<sp/>=<sp/>5000;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>old_heap_used;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>gc_status_flag<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*init_file<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>NULL;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tkbuffer<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>gc_kind_copying<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>gc_cells_allocated<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gc_time_taken;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>*stack_start_ptr<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>freelist;</highlight></codeline>
<codeline lineno="106"><highlight class="normal">jmp_buf<sp/>errjmp;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>errjmp_ok<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>nointerrupt<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>interrupt_differed<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>oblistvar<sp/>=<sp/>NIL;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>sym_t<sp/>=<sp/>NIL;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>eof_val<sp/>=<sp/>NIL;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>sym_errobj<sp/>=<sp/>NIL;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>sym_catchall<sp/>=<sp/>NIL;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>sym_progn<sp/>=<sp/>NIL;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>sym_lambda<sp/>=<sp/>NIL;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>sym_quote<sp/>=<sp/>NIL;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>sym_dot<sp/>=<sp/>NIL;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>sym_after_gc<sp/>=<sp/>NIL;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>sym_eval_history_ptr<sp/>=<sp/>NIL;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>unbound_marker<sp/>=<sp/>NIL;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>*obarray;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>obarray_dim<sp/>=<sp/>100;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcatch__frame" kindref="compound">catch_frame</ref><sp/>*catch_framep<sp/>=<sp/>(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcatch__frame" kindref="compound">catch_frame</ref><sp/>*)<sp/>NULL;</highlight></codeline>
<codeline lineno="125"><highlight class="normal">void<sp/>(*repl_puts)(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>(*repl_read)(void)<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>(*repl_eval)(<ref refid="structobj" kindref="compound">LISP</ref>)<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="128"><highlight class="normal">void<sp/>(*repl_print)(<ref refid="structobj" kindref="compound">LISP</ref>)<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>*inums;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>inums_dim<sp/>=<sp/>256;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structuser__type__hooks" kindref="compound">user_type_hooks</ref><sp/>*user_types<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>user_tc_next<sp/>=<sp/>tc_user_min;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgc__protected" kindref="compound">gc_protected</ref><sp/>*protected_registers<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="134"><highlight class="normal">jmp_buf<sp/>save_regs_gc_mark;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gc_rt;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>gc_cells_collected;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*user_ch_readm<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*user_te_readm<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>(*user_readm)(int,<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgen__readio" kindref="compound">gen_readio</ref><sp/>*)<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>(*user_readt)(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,long,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="141"><highlight class="normal">void<sp/>(*fatal_exit_hook)(void)<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>THINK_C</highlight></codeline>
<codeline lineno="143"><highlight class="preprocessor"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ipoll_counter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="145"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stack_limit_ptr<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>stack_size<sp/>=<sp/></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>THINK_C</highlight></codeline>
<codeline lineno="149"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>10000;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="151"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>50000;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="153"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>siod_verbose_level<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>SIOD_LIB_DEFAULT</highlight></codeline>
<codeline lineno="157"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>unix</highlight></codeline>
<codeline lineno="158"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>SIOD_LIB_DEFAULT<sp/>&quot;/usr/local/lib/siod&quot;</highlight></codeline>
<codeline lineno="159"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="160"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>vms</highlight></codeline>
<codeline lineno="161"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>SIOD_LIB_DEFAULT<sp/>&quot;SIOD_LIB:&quot;</highlight></codeline>
<codeline lineno="162"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="163"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32</highlight></codeline>
<codeline lineno="164"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>SIOD_LIB_DEFAULT<sp/>&quot;c:\\siod\\&quot;</highlight></codeline>
<codeline lineno="165"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;float.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="167"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="168"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*siod_lib<sp/>=<sp/>SIOD_LIB_DEFAULT;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__stdcall<sp/>process_cla(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>warnflag)</highlight></codeline>
<codeline lineno="172"><highlight class="normal">{</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ptr;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>siod_lib_set<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(vms)</highlight></codeline>
<codeline lineno="176"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!siod_lib_set)</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32</highlight></codeline>
<codeline lineno="179"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(argc<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{siod_lib<sp/>=<sp/>strdup(argv[0]);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>siod_lib_set<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((ptr<sp/>=<sp/>strrchr(siod_lib,</highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">)))</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr[1]<sp/>=<sp/>0;}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="185"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getenv(</highlight><highlight class="stringliteral">&quot;SIOD_LIB&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{siod_lib<sp/>=<sp/>getenv(</highlight><highlight class="stringliteral">&quot;SIOD_LIB&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>siod_lib_set<sp/>=<sp/>1;}}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="189"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(k=1;k&lt;argc;++k)</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strlen(argv[k])&lt;2)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(argv[k][0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(warnflag)<sp/>printf(</highlight><highlight class="stringliteral">&quot;bad<sp/>arg:<sp/>%s\n&quot;</highlight><highlight class="normal">,argv[k]);</highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(argv[k][1])</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;l&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>siod_lib<sp/>=<sp/>&amp;argv[k][2];</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;h&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>heap_size<sp/>=<sp/>atol(&amp;(argv[k][2]));</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((ptr<sp/>=<sp/>strchr(&amp;(argv[k][2]),</highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">)))</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nheaps<sp/>=<sp/>atol(&amp;ptr[1]);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;o&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>obarray_dim<sp/>=<sp/>atol(&amp;(argv[k][2]));</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;i&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>init_file<sp/>=<sp/>&amp;(argv[k][2]);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;n&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>inums_dim<sp/>=<sp/>atol(&amp;(argv[k][2]));</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;g&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>gc_kind_copying<sp/>=<sp/>atol(&amp;(argv[k][2]));</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;s&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>stack_size<sp/>=<sp/>atol(&amp;(argv[k][2]));</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;v&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>siod_verbose_level<sp/>=<sp/>atol(&amp;(argv[k][2]));</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(warnflag)<sp/>printf(</highlight><highlight class="stringliteral">&quot;bad<sp/>arg:<sp/>%s\n&quot;</highlight><highlight class="normal">,argv[k]);}}}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__stdcall<sp/>print_welcome(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="224"><highlight class="normal">{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(siod_verbose_level<sp/>&gt;=<sp/>2)</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/>{printf(</highlight><highlight class="stringliteral">&quot;Welcome<sp/>to<sp/>SIOD,<sp/>Scheme<sp/>In<sp/>One<sp/>Defun,<sp/>Version<sp/>%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>siod_version());</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;(C)<sp/>Copyright<sp/>1988-1994<sp/>Paradigm<sp/>Associates<sp/>Inc.\n&quot;</highlight><highlight class="normal">);}}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__stdcall<sp/>print_hs_1(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="230"><highlight class="normal">{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(siod_verbose_level<sp/>&gt;=<sp/>2)</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/>{printf(</highlight><highlight class="stringliteral">&quot;%ld<sp/>heaps.<sp/>size<sp/>=<sp/>%ld<sp/>cells,<sp/>%ld<sp/>bytes.<sp/>%ld<sp/>inums.<sp/>GC<sp/>is<sp/>%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nheaps,</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>heap_size,heap_size*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">obj</ref>),</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inums_dim,</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(gc_kind_copying<sp/>==<sp/>1)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;stop<sp/>and<sp/>copy&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;mark<sp/>and<sp/>sweep&quot;</highlight><highlight class="normal">);}}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__stdcall<sp/>print_hs_2(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="239"><highlight class="normal">{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(siod_verbose_level<sp/>&gt;=<sp/>2)</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gc_kind_copying<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;heaps[0]<sp/>at<sp/>%p,<sp/>heaps[1]<sp/>at<sp/>%p\n&quot;</highlight><highlight class="normal">,heaps[0],heaps[1]);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;heaps[0]<sp/>at<sp/>%p\n&quot;</highlight><highlight class="normal">,heaps[0]);}}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>no_interrupt(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="246"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/>x<sp/>=<sp/>nointerrupt;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/>nointerrupt<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((nointerrupt<sp/>==<sp/>0)<sp/>&amp;&amp;<sp/>(interrupt_differed<sp/>==<sp/>1))</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/>{interrupt_differed<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>err_ctrl_c();}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(x);}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handle_sigfpe(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sig<sp/>SIG_restargs)</highlight></codeline>
<codeline lineno="255"><highlight class="normal">{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32</highlight></codeline>
<codeline lineno="257"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>_fpreset();</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="259"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>signal(SIGFPE,handle_sigfpe);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/>err(</highlight><highlight class="stringliteral">&quot;floating<sp/>point<sp/>exception&quot;</highlight><highlight class="normal">,NIL);}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handle_sigint(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sig<sp/>SIG_restargs)</highlight></codeline>
<codeline lineno="263"><highlight class="normal">{signal(SIGINT,handle_sigint);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(WIN32)</highlight></codeline>
<codeline lineno="265"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/>interrupt_differed<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="267"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nointerrupt<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/>interrupt_differed<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/>err_ctrl_c();</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="272"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(WIN32)</highlight></codeline>
<codeline lineno="275"><highlight class="preprocessor"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handle_interrupt_differed(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="276"><highlight class="normal">{interrupt_differed<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/>err_ctrl_c();}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="279"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>err_ctrl_c(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="281"><highlight class="normal">{err(</highlight><highlight class="stringliteral">&quot;control-c<sp/>interrupt&quot;</highlight><highlight class="normal">,NIL);}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>get_eof_val(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="284"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(eof_val);}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>repl_driver(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>want_sigint,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>want_init,</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structrepl__hooks" kindref="compound">repl_hooks</ref><sp/>*h)</highlight></codeline>
<codeline lineno="287"><highlight class="normal">{</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>rv;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structrepl__hooks" kindref="compound">repl_hooks</ref><sp/>hd;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>stack_start;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>void<sp/>(*osigint)(int);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>void<sp/>(*osigfpe)(int);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/>stack_start_ptr<sp/>=<sp/>&amp;stack_start;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/>stack_limit_ptr<sp/>=<sp/>STACK_LIMIT(stack_start_ptr,stack_size);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/>k<sp/>=<sp/>setjmp(errjmp);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(want_sigint)<sp/>signal(SIGINT,osigint);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>signal(SIGFPE,osigfpe);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>stack_start_ptr<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>stack_limit_ptr<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(2);}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(want_sigint)<sp/>osigint<sp/>=<sp/>signal(SIGINT,handle_sigint);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32_X</highlight></codeline>
<codeline lineno="304"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>doesn&apos;t<sp/>work,<sp/>because<sp/>library<sp/>functions<sp/>like<sp/>atof</highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/><sp/><sp/><sp/>depend<sp/>on<sp/>default<sp/>setting,<sp/>or<sp/>some<sp/>other<sp/>reason<sp/>I<sp/>didn&apos;t</highlight></codeline>
<codeline lineno="306"><highlight class="comment"><sp/><sp/><sp/><sp/>have<sp/>time<sp/>to<sp/>investigate.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/>_controlfp(_EM_INVALID,</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_MCW_EM);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="310"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>osigfpe<sp/>=<sp/>signal(SIGFPE,handle_sigfpe);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/>catch_framep<sp/>=<sp/>(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcatch__frame" kindref="compound">catch_frame</ref><sp/>*)<sp/>NULL;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/>errjmp_ok<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/>interrupt_differed<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/>nointerrupt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(want_init<sp/>&amp;&amp;<sp/>init_file<sp/>&amp;&amp;<sp/>(k<sp/>==<sp/>0))<sp/>vload(init_file,0,1);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!h)</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/>{hd.repl_puts<sp/>=<sp/>repl_puts;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>hd.repl_read<sp/>=<sp/>repl_read;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>hd.repl_eval<sp/>=<sp/>repl_eval;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>hd.repl_print<sp/>=<sp/>repl_print;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>repl(&amp;hd);}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/>rv<sp/>=<sp/>repl(h);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(want_sigint)<sp/>signal(SIGINT,osigint);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/>signal(SIGFPE,osigfpe);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/>stack_start_ptr<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/>stack_limit_ptr<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(rv);}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ignore_puts(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*st)</highlight></codeline>
<codeline lineno="331"><highlight class="normal">{}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>noprompt_puts(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*st)</highlight></codeline>
<codeline lineno="334"><highlight class="normal">{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(st,</highlight><highlight class="stringliteral">&quot;&gt;<sp/>&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/>put_st(st);}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*repl_c_string_arg<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*repl_c_string_out<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>repl_c_string_flag<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>repl_c_string_print_len<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>repl_c_string_read(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="344"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>s;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(repl_c_string_arg<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(get_eof_val());</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/>s<sp/>=<sp/>strcons(strlen(repl_c_string_arg),repl_c_string_arg);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/>repl_c_string_arg<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(repl_c_string_out)<sp/>repl_c_string_out[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(read_from_string(s));}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ignore_print(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x)</highlight></codeline>
<codeline lineno="353"><highlight class="normal">{repl_c_string_flag<sp/>=<sp/>1;}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>not_ignore_print(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x)</highlight></codeline>
<codeline lineno="356"><highlight class="normal">{repl_c_string_flag<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/>lprint(x,NIL);}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359" refid="structrcsp__puts" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structrcsp__puts" kindref="compound">rcsp_puts</ref></highlight></codeline>
<codeline lineno="360"><highlight class="normal">{</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ptr;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*end;};</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structrcsp__puts" kindref="compound">rcsp_puts</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*from,</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*cb)</highlight></codeline>
<codeline lineno="364"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>fromlen,intolen,cplen;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structrcsp__puts" kindref="compound">rcsp_puts</ref><sp/>*p<sp/>=<sp/>(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structrcsp__puts" kindref="compound">rcsp_puts</ref><sp/>*)<sp/>cb;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/>fromlen<sp/>=<sp/>strlen(from);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/>intolen<sp/>=<sp/>p-&gt;end<sp/>-<sp/>p-&gt;ptr;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/>cplen<sp/>=<sp/>(fromlen<sp/>&gt;<sp/>intolen)<sp/>?<sp/>intolen<sp/>:<sp/>fromlen;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/>memcpy(p-&gt;ptr,from,cplen);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/>p-&gt;ptr<sp/>=<sp/>&amp;p-&gt;ptr[cplen];</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/>*p-&gt;ptr<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cplen<sp/>!=<sp/>fromlen)</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;repl_c_string_print<sp/>overflow&quot;</highlight><highlight class="normal">,NIL);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(1);}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>repl_c_string_print(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x)</highlight></codeline>
<codeline lineno="377"><highlight class="normal">{</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgen__printio" kindref="compound">gen_printio</ref><sp/>s;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structrcsp__puts" kindref="compound">rcsp_puts</ref><sp/>p;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/>s.putc_fcn<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/>s.puts_fcn<sp/>=<sp/><ref refid="structrcsp__puts" kindref="compound">rcsp_puts</ref>;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/>p.ptr<sp/>=<sp/>repl_c_string_out;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/>p.end<sp/>=<sp/>&amp;repl_c_string_out[repl_c_string_print_len<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/>s.cb_argument<sp/>=<sp/>&amp;p;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/>lprin1g(x,&amp;s);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/>repl_c_string_flag<sp/>=<sp/>1;}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>__stdcall<sp/>repl_c_string(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>want_sigint,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>want_init,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>want_print)</highlight></codeline>
<codeline lineno="389"><highlight class="normal">{</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structrepl__hooks" kindref="compound">repl_hooks</ref><sp/>h;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>retval;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/>h.repl_read<sp/>=<sp/>repl_c_string_read;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/>h.repl_eval<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(want_print<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/>{h.repl_puts<sp/>=<sp/>ignore_puts;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>h.repl_print<sp/>=<sp/>repl_c_string_print;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>repl_c_string_print_len<sp/>=<sp/>want_print;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>repl_c_string_out<sp/>=<sp/>str;}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(want_print)</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/>{h.repl_puts<sp/>=<sp/>noprompt_puts;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>h.repl_print<sp/>=<sp/>not_ignore_print;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>repl_c_string_print_len<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>repl_c_string_out<sp/>=<sp/>NULL;}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/>{h.repl_puts<sp/>=<sp/>ignore_puts;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>h.repl_print<sp/>=<sp/>ignore_print;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>repl_c_string_print_len<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>repl_c_string_out<sp/>=<sp/>NULL;}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/>repl_c_string_arg<sp/>=<sp/>str;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/>repl_c_string_flag<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/>retval<sp/>=<sp/>repl_driver(want_sigint,want_init,&amp;h);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(retval<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(retval);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(repl_c_string_flag<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(2);}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>unix</highlight></codeline>
<codeline lineno="419"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/times.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>sun</highlight></codeline>
<codeline lineno="422"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="424"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifndef<sp/>CLK_TCK</highlight></codeline>
<codeline lineno="425"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>CLK_TCK<sp/>60</highlight></codeline>
<codeline lineno="426"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="427"><highlight class="preprocessor"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>myruntime(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="428"><highlight class="normal">{</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>total;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">tms<sp/>b;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/>times(&amp;b);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/>total<sp/>=<sp/>b.tms_utime;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/>total<sp/>+=<sp/>b.tms_stime;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(total<sp/>/<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)CLK_TCK);}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="435"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>defined(THINK_C)<sp/>|<sp/>defined(WIN32)<sp/>|<sp/>defined(VMS)</highlight></codeline>
<codeline lineno="436"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifndef<sp/>CLOCKS_PER_SEC</highlight></codeline>
<codeline lineno="437"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>CLOCKS_PER_SEC<sp/>CLK_TCK</highlight></codeline>
<codeline lineno="438"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="439"><highlight class="preprocessor"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>myruntime(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="440"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>clock())<sp/>/<sp/>((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>CLOCKS_PER_SEC));}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="442"><highlight class="preprocessor"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>myruntime(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="443"><highlight class="normal">{time_t<sp/>x;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/>time(&amp;x);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>x);}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="447"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="448"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__osf__)</highlight></codeline>
<codeline lineno="450"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/timers.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>TIMEOFDAY</highlight></codeline>
<codeline lineno="452"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>TIMEOFDAY<sp/>1</highlight></codeline>
<codeline lineno="453"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="454"><highlight class="preprocessor"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>myrealtime(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="455"><highlight class="normal">{</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">timespec<sp/>x;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!getclock(TIMEOFDAY,&amp;x))</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(x.tv_sec<sp/>+<sp/>(((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>x.tv_nsec)<sp/>*<sp/>1.0e-9));</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0.0);}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="461"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(VMS)</highlight></codeline>
<codeline lineno="463"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;ssdef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;starlet.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>myrealtime(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="467"><highlight class="normal">{</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>x[2];</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sys$gettim(&amp;x)<sp/>==<sp/>SS$_NORMAL)</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>0.0)<sp/>c<sp/>=<sp/>pow((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>2,(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>31)<sp/>*<sp/>100.0e-9;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(x[0]<sp/>*<sp/>100.0e-9<sp/>+<sp/>x[1]<sp/>*<sp/>c);}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0.0);}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="476"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(SUN5)<sp/>||<sp/>defined(linux)</highlight></codeline>
<codeline lineno="478"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(linux)</highlight></codeline>
<codeline lineno="480"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="482"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>myrealtime(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="484"><highlight class="normal">{</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">timeval<sp/>x;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gettimeofday(&amp;x,NULL))</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0.0);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>x.tv_sec)<sp/>+<sp/>((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>x.tv_usec)<sp/>*<sp/>1.0E-6);}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="489"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(WIN32)</highlight></codeline>
<codeline lineno="491"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/timeb.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>myrealtime(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="493"><highlight class="normal">{</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_timeb<sp/>x;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/>_ftime(&amp;x);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(x.time<sp/>+<sp/>((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>x.millitm)<sp/>*<sp/>0.001);}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="497"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(__osf__)<sp/>&amp;<sp/>!defined(VMS)<sp/>&amp;<sp/>!defined(SUN5)<sp/>&amp;<sp/>!defined(WIN32)<sp/>&amp;!defined(linux)</highlight></codeline>
<codeline lineno="499"><highlight class="preprocessor"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>myrealtime(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="500"><highlight class="normal">{time_t<sp/>x;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/>time(&amp;x);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>x);}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="504"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_repl_hooks(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*puts_f)(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*),</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>(*read_f)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>(*eval_f)(<ref refid="structobj" kindref="compound">LISP</ref>),</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*print_f)(<ref refid="structobj" kindref="compound">LISP</ref>))</highlight></codeline>
<codeline lineno="509"><highlight class="normal">{repl_puts<sp/>=<sp/>puts_f;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/>repl_read<sp/>=<sp/>read_f;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/>repl_eval<sp/>=<sp/>eval_f;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/>repl_print<sp/>=<sp/>print_f;}</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>gput_st(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgen__printio" kindref="compound">gen_printio</ref><sp/>*f,</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*st)</highlight></codeline>
<codeline lineno="515"><highlight class="normal">{PUTS_FCN(st,f);}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fput_st(FILE<sp/>*f,</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*st)</highlight></codeline>
<codeline lineno="518"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>flag;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/>flag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/>fprintf(f,</highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,st);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/>no_interrupt(flag);}</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fputs_fcn(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*st,</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*cb)</highlight></codeline>
<codeline lineno="524"><highlight class="normal">{fput_st((FILE<sp/>*)cb,st);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(1);}</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>put_st(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*st)</highlight></codeline>
<codeline lineno="528"><highlight class="normal">{fput_st(stdout,st);}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>grepl_puts(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*st,</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*repl_puts)(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*))</highlight></codeline>
<codeline lineno="531"><highlight class="normal">{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(repl_puts<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/>{put_st(st);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>fflush(stdout);}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/>(*repl_puts)(st);}</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>repl(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structrepl__hooks" kindref="compound">repl_hooks</ref><sp/>*h)</highlight></codeline>
<codeline lineno="538"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>x,cw<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rt,ct;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(1)</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((gc_kind_copying<sp/>==<sp/>1)<sp/>&amp;&amp;<sp/>((gc_status_flag)<sp/>||<sp/>heap<sp/>&gt;=<sp/>heap_end))</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{rt<sp/>=<sp/>myruntime();</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gc_stop_and_copy();</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(siod_verbose_level<sp/>&gt;=<sp/>2)</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>{sprintf(tkbuffer,</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;GC<sp/>took<sp/>%g<sp/>seconds,<sp/>%ld<sp/>compressed<sp/>to<sp/>%ld,<sp/>%ld<sp/>free\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>myruntime()-rt,old_heap_used,(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)(heap-heap_org),(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)(heap_end-heap));</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>grepl_puts(tkbuffer,h-&gt;repl_puts);}}</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(siod_verbose_level<sp/>&gt;=<sp/>2)</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>grepl_puts(</highlight><highlight class="stringliteral">&quot;&gt;<sp/>&quot;</highlight><highlight class="normal">,h-&gt;repl_puts);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h-&gt;repl_read<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>lread(NIL);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>(*h-&gt;repl_read)();</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>EQ(x,eof_val)<sp/>break;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>rt<sp/>=<sp/>myruntime();</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>ct<sp/>=<sp/>myrealtime();</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(gc_kind_copying<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cw<sp/>=<sp/>heap;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{gc_cells_allocated<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gc_time_taken<sp/>=<sp/>0.0;}</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h-&gt;repl_eval<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>leval(x,NIL);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>(*h-&gt;repl_eval)(x);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gc_kind_copying<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(tkbuffer,</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Evaluation<sp/>took<sp/>%g<sp/>seconds<sp/>%ld<sp/>cons<sp/>work,<sp/>%g<sp/>real.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>myruntime()-rt,</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)(heap-cw),</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>myrealtime()-ct);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(tkbuffer,</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Evaluation<sp/>took<sp/>%g<sp/>seconds<sp/>(%g<sp/>in<sp/>gc)<sp/>%ld<sp/>cons<sp/>work,<sp/>%g<sp/>real.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>myruntime()-rt,</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gc_time_taken,</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gc_cells_allocated,</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>myrealtime()-ct);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(siod_verbose_level<sp/>&gt;=<sp/>2)</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>grepl_puts(tkbuffer,h-&gt;repl_puts);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h-&gt;repl_print<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(siod_verbose_level<sp/>&gt;=<sp/>2)</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>lprint(x,NIL);}</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*h-&gt;repl_print)(x);}</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);}</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_fatal_exit_hook(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*fcn)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="590"><highlight class="normal">{fatal_exit_hook<sp/>=<sp/>fcn;}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>inside_err<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>err(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*message,<sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>x)</highlight></codeline>
<codeline lineno="595"><highlight class="normal">{</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcatch__frame" kindref="compound">catch_frame</ref><sp/>*l;</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>was_inside<sp/>=<sp/>inside_err;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>retval,nx;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*msg,*eobj;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/>nointerrupt<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((!message)<sp/>&amp;&amp;<sp/>CONSP(x)<sp/>&amp;&amp;<sp/>TYPEP(CAR(x),tc_string))</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/>{msg<sp/>=<sp/>get_c_string(CAR(x));</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>nx<sp/>=<sp/>CDR(x);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/>retval<sp/>=<sp/>x;}</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/>{msg<sp/>=<sp/>message;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/>nx<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/>retval<sp/>=<sp/>NIL;}</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((eobj<sp/>=<sp/>try_get_c_string(nx))<sp/>&amp;&amp;<sp/>!memchr(eobj,0,80<sp/>))</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/>eobj<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((siod_verbose_level<sp/>&gt;=<sp/>1)<sp/>&amp;&amp;<sp/>msg)</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NULLP(nx)</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;ERROR:<sp/>%s\n&quot;,msg);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(eobj)</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;ERROR:<sp/>%s<sp/>(errobj<sp/>%s)\n&quot;,msg,eobj);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;ERROR:<sp/>%s<sp/>(see<sp/>errobj)\n&quot;,msg);}</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/>if<sp/>(errjmp_ok<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/>{inside_err<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>setvar(sym_errobj,nx,NIL);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(l=catch_framep;<sp/>l;<sp/>l<sp/>=<sp/>(*l).next)</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(EQ((*l).tag,sym_errobj)<sp/>||</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EQ((*l).tag,sym_catchall))</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!msg)<sp/>msg<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;quit&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>(*l).retval<sp/>=<sp/>(NNULLP(retval)<sp/>?<sp/>retval<sp/>:</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(was_inside)<sp/>?<sp/>NIL<sp/>:</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cons(strcons(strlen(msg),msg),nx));</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>nointerrupt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>inside_err<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>longjmp((*l).cframe,2);}</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/>inside_err<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/>longjmp(errjmp,(msg)<sp/>?<sp/>1<sp/>:<sp/>2);}</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(siod_verbose_level<sp/>&gt;=<sp/>1)</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;FATAL<sp/>ERROR<sp/>DURING<sp/>STARTUP<sp/>OR<sp/>CRITICAL<sp/>CODE<sp/>SECTION\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fatal_exit_hook)</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/>(*fatal_exit_hook)();</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/>exit(10);</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>errswitch(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="641"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(err(</highlight><highlight class="stringliteral">&quot;BUG.<sp/>Reached<sp/>impossible<sp/>case&quot;</highlight><highlight class="normal">,NIL));}</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>err_stack(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ptr)</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>user<sp/>could<sp/>be<sp/>given<sp/>an<sp/>option<sp/>to<sp/>continue<sp/>here<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal">{err(</highlight><highlight class="stringliteral">&quot;the<sp/>currently<sp/>assigned<sp/>stack<sp/>limit<sp/>has<sp/>been<sp/>exceded&quot;</highlight><highlight class="normal">,NIL);}</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>stack_limit(<ref refid="structobj" kindref="compound">LISP</ref><sp/>amount,<ref refid="structobj" kindref="compound">LISP</ref><sp/>silent)</highlight></codeline>
<codeline lineno="648"><highlight class="normal">{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NNULLP(amount)</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/>{stack_size<sp/>=<sp/>get_c_long(amount);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>stack_limit_ptr<sp/>=<sp/>STACK_LIMIT(stack_start_ptr,stack_size);}</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NULLP(silent)</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/>{sprintf(tkbuffer,</highlight><highlight class="stringliteral">&quot;Stack_size<sp/>=<sp/>%ld<sp/>bytes,<sp/>[%p,%p]\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stack_size,stack_start_ptr,stack_limit_ptr);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>put_st(tkbuffer);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(stack_size));}</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*try_get_c_string(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x)</highlight></codeline>
<codeline lineno="660"><highlight class="normal">{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>TYPEP(x,tc_symbol)</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/>return(PNAME(x));</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/>else<sp/>if<sp/>TYPEP(x,tc_string)</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/>return(x-&gt;storage_as.</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.data);</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/>else</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/>return(NULL);}</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*get_c_string(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x)</highlight></codeline>
<codeline lineno="668"><highlight class="normal">{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>TYPEP(x,tc_symbol)</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/>return(PNAME(x));</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/>else<sp/>if<sp/>TYPEP(x,tc_string)</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/>return(x-&gt;storage_as.</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.data);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/>else</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/>err(&quot;not<sp/>a<sp/>symbol<sp/>or<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&quot;,x);</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/>return(NULL);}</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*get_c_string_dim(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*len)</highlight></codeline>
<codeline lineno="677"><highlight class="normal">{</highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(TYPE(x))</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_symbol:</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*len<sp/>=<sp/>strlen(PNAME(x));</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(PNAME(x));</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_string:</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_byte_array:</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*len<sp/>=<sp/>x-&gt;storage_as.string.dim;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(x-&gt;storage_as.string.data);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_long_array:</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*len<sp/>=<sp/>x-&gt;storage_as.long_array.dim<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(long);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)x-&gt;storage_as.long_array.data);</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;not<sp/>a<sp/>symbol<sp/>or<sp/>string&quot;</highlight><highlight class="normal">,x);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NULL);}}</highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lerr(<ref refid="structobj" kindref="compound">LISP</ref><sp/>message,<sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>x)</highlight></codeline>
<codeline lineno="693"><highlight class="normal">{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CONSP(message)<sp/>&amp;&amp;<sp/>TYPEP(CAR(message),tc_string))</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/>err(NULL,message);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/>err(get_c_string(message),x);</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>gc_fatal_error(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="700"><highlight class="normal">{err(</highlight><highlight class="stringliteral">&quot;ran<sp/>out<sp/>of<sp/>storage&quot;</highlight><highlight class="normal">,NIL);}</highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>newcell(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>type)</highlight></codeline>
<codeline lineno="703"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>z;</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/>NEWCELL(z,type);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(z);}</highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>cons(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x,<ref refid="structobj" kindref="compound">LISP</ref><sp/>y)</highlight></codeline>
<codeline lineno="708"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>z;</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/>NEWCELL(z,tc_cons);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/>CAR(z)<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/>CDR(z)<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(z);}</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>consp(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x)</highlight></codeline>
<codeline lineno="715"><highlight class="normal">{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>CONSP(x)<sp/>return(sym_t);<sp/>else<sp/>return(NIL);}</highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>car(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x)</highlight></codeline>
<codeline lineno="718"><highlight class="normal">{</highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>TYPE(x)</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_nil:</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_cons:</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(CAR(x));</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(err(</highlight><highlight class="stringliteral">&quot;wta<sp/>to<sp/>car&quot;</highlight><highlight class="normal">,x));}}</highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>cdr(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x)</highlight></codeline>
<codeline lineno="727"><highlight class="normal">{</highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>TYPE(x)</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_nil:</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_cons:</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(CDR(x));</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(err(</highlight><highlight class="stringliteral">&quot;wta<sp/>to<sp/>cdr&quot;</highlight><highlight class="normal">,x));}}</highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>setcar(<ref refid="structobj" kindref="compound">LISP</ref><sp/>cell,<sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>value)</highlight></codeline>
<codeline lineno="736"><highlight class="normal">{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NCONSP(cell)<sp/>err(&quot;wta<sp/>to<sp/>setcar&quot;,cell);</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/>return(CAR(cell)<sp/>=<sp/>value);}</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>setcdr(<ref refid="structobj" kindref="compound">LISP</ref><sp/>cell,<sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>value)</highlight></codeline>
<codeline lineno="740"><highlight class="normal">{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NCONSP(cell)<sp/>err(&quot;wta<sp/>to<sp/>setcdr&quot;,cell);</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/>return(CDR(cell)<sp/>=<sp/>value);}</highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>flocons(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x)</highlight></codeline>
<codeline lineno="744"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>z;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((inums_dim<sp/>&gt;<sp/>0)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>((x<sp/>-<sp/>(n<sp/>=<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)x))<sp/>==<sp/>0)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>(x<sp/>&gt;=<sp/>0)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>(n<sp/>&lt;<sp/>inums_dim))</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(inums[n]);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/>NEWCELL(z,tc_flonum);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/>FLONM(z)<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(z);}</highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>numberp(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x)</highlight></codeline>
<codeline lineno="756"><highlight class="normal">{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>FLONUMP(x)<sp/>return(sym_t);<sp/>else<sp/>return(NIL);}</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>plus(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x,<ref refid="structobj" kindref="compound">LISP</ref><sp/>y)</highlight></codeline>
<codeline lineno="759"><highlight class="normal">{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NULLP(y)</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/>return(NULLP(x)<sp/>?<sp/>flocons(0)<sp/>:<sp/>x);</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/>if<sp/>NFLONUMP(x)<sp/>err(&quot;wta(1st)<sp/>to<sp/>plus&quot;,x);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/>if<sp/>NFLONUMP(y)<sp/>err(&quot;wta(2nd)<sp/>to<sp/>plus&quot;,y);</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/>return(flocons(FLONM(x)<sp/>+<sp/>FLONM(y)));}</highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>ltimes(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x,<ref refid="structobj" kindref="compound">LISP</ref><sp/>y)</highlight></codeline>
<codeline lineno="766"><highlight class="normal">{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NULLP(y)</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/>return(NULLP(x)<sp/>?<sp/>flocons(1)<sp/>:<sp/>x);</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/>if<sp/>NFLONUMP(x)<sp/>err(&quot;wta(1st)<sp/>to<sp/>times&quot;,x);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/>if<sp/>NFLONUMP(y)<sp/>err(&quot;wta(2nd)<sp/>to<sp/>times&quot;,y);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/>return(flocons(FLONM(x)*FLONM(y)));}</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>difference(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x,<ref refid="structobj" kindref="compound">LISP</ref><sp/>y)</highlight></codeline>
<codeline lineno="773"><highlight class="normal">{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NFLONUMP(x)<sp/>err(&quot;wta(1st)<sp/>to<sp/>difference&quot;,x);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/>if<sp/>NULLP(y)</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/>return(flocons(-FLONM(x)));</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/>else</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NFLONUMP(y)<sp/>err(&quot;wta(2nd)<sp/>to<sp/>difference&quot;,y);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/>return(flocons(FLONM(x)<sp/>-<sp/>FLONM(y)));}}</highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>Quotient(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x,<ref refid="structobj" kindref="compound">LISP</ref><sp/>y)</highlight></codeline>
<codeline lineno="781"><highlight class="normal">{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NFLONUMP(x)<sp/>err(&quot;wta(1st)<sp/>to<sp/>quotient&quot;,x);</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/>if<sp/>NULLP(y)</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/>return(flocons(1/FLONM(x)));</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/>else</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NFLONUMP(y)<sp/>err(&quot;wta(2nd)<sp/>to<sp/>quotient&quot;,y);</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/>return(flocons(FLONM(x)/FLONM(y)));}}</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lllabs(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x)</highlight></codeline>
<codeline lineno="789"><highlight class="normal">{</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NFLONUMP(x)<sp/>err(&quot;wta<sp/>to<sp/>abs&quot;,x);</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/>v<sp/>=<sp/>FLONM(x);</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/>if<sp/>(v<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/>return(flocons(-v));</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/>else</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/>return(x);}</highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lsqrt(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x)</highlight></codeline>
<codeline lineno="798"><highlight class="normal">{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NFLONUMP(x)<sp/>err(&quot;wta<sp/>to<sp/>sqrt&quot;,x);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/>return(flocons(sqrt(FLONM(x))));}</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>greaterp(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x,<ref refid="structobj" kindref="compound">LISP</ref><sp/>y)</highlight></codeline>
<codeline lineno="802"><highlight class="normal">{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NFLONUMP(x)<sp/>err(&quot;wta(1st)<sp/>to<sp/>greaterp&quot;,x);</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/>if<sp/>NFLONUMP(y)<sp/>err(&quot;wta(2nd)<sp/>to<sp/>greaterp&quot;,y);</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/>if<sp/>(FLONM(x)&gt;FLONM(y))<sp/>return(sym_t);</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/>return(NIL);}</highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lessp(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x,<ref refid="structobj" kindref="compound">LISP</ref><sp/>y)</highlight></codeline>
<codeline lineno="808"><highlight class="normal">{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NFLONUMP(x)<sp/>err(&quot;wta(1st)<sp/>to<sp/>lessp&quot;,x);</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/>if<sp/>NFLONUMP(y)<sp/>err(&quot;wta(2nd)<sp/>to<sp/>lessp&quot;,y);</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/>if<sp/>(FLONM(x)&lt;FLONM(y))<sp/>return(sym_t);</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/>return(NIL);}</highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>greaterEp(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x,<ref refid="structobj" kindref="compound">LISP</ref><sp/>y)</highlight></codeline>
<codeline lineno="814"><highlight class="normal">{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NFLONUMP(x)<sp/>err(&quot;wta(1st)<sp/>to<sp/>greaterp&quot;,x);</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/>if<sp/>NFLONUMP(y)<sp/>err(&quot;wta(2nd)<sp/>to<sp/>greaterp&quot;,y);</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/>if<sp/>(FLONM(x)&gt;=FLONM(y))<sp/>return(sym_t);</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/>return(NIL);}</highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lessEp(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x,<ref refid="structobj" kindref="compound">LISP</ref><sp/>y)</highlight></codeline>
<codeline lineno="820"><highlight class="normal">{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NFLONUMP(x)<sp/>err(&quot;wta(1st)<sp/>to<sp/>lessp&quot;,x);</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/>if<sp/>NFLONUMP(y)<sp/>err(&quot;wta(2nd)<sp/>to<sp/>lessp&quot;,y);</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/>if<sp/>(FLONM(x)&lt;=FLONM(y))<sp/>return(sym_t);</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/>return(NIL);}</highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lmax(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x,<ref refid="structobj" kindref="compound">LISP</ref><sp/>y)</highlight></codeline>
<codeline lineno="826"><highlight class="normal">{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NULLP(y)<sp/>return(x);</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/>if<sp/>NFLONUMP(x)<sp/>err(&quot;wta(1st)<sp/>to<sp/>max&quot;,x);</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/>if<sp/>NFLONUMP(y)<sp/>err(&quot;wta(2nd)<sp/>to<sp/>max&quot;,y);</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/>return((FLONM(x)<sp/>&gt;<sp/>FLONM(y))<sp/>?<sp/>x<sp/>:<sp/>y);}</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lmin(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x,<ref refid="structobj" kindref="compound">LISP</ref><sp/>y)</highlight></codeline>
<codeline lineno="832"><highlight class="normal">{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NULLP(y)<sp/>return(x);</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/>if<sp/>NFLONUMP(x)<sp/>err(&quot;wta(1st)<sp/>to<sp/>min&quot;,x);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/>if<sp/>NFLONUMP(y)<sp/>err(&quot;wta(2nd)<sp/>to<sp/>min&quot;,y);</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/>return((FLONM(x)<sp/>&lt;<sp/>FLONM(y))<sp/>?<sp/>x<sp/>:<sp/>y);}</highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>eq(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x,<ref refid="structobj" kindref="compound">LISP</ref><sp/>y)</highlight></codeline>
<codeline lineno="838"><highlight class="normal">{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>EQ(x,y)<sp/>return(sym_t);<sp/>else<sp/>return(NIL);}</highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>eql(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x,<ref refid="structobj" kindref="compound">LISP</ref><sp/>y)</highlight></codeline>
<codeline lineno="841"><highlight class="normal">{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>EQ(x,y)<sp/>return(sym_t);<sp/>else<sp/></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/>if<sp/>NFLONUMP(x)<sp/>return(NIL);<sp/>else</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/>if<sp/>NFLONUMP(y)<sp/>return(NIL);<sp/>else</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/>if<sp/>(FLONM(x)<sp/>==<sp/>FLONM(y))<sp/>return(sym_t);</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/>return(NIL);}</highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>symcons(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pname,<ref refid="structobj" kindref="compound">LISP</ref><sp/>vcell)</highlight></codeline>
<codeline lineno="848"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>z;</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/>NEWCELL(z,tc_symbol);</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/>PNAME(z)<sp/>=<sp/>pname;</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/>VCELL(z)<sp/>=<sp/>vcell;</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(z);}</highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>symbolp(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x)</highlight></codeline>
<codeline lineno="855"><highlight class="normal">{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>SYMBOLP(x)<sp/>return(sym_t);<sp/>else<sp/>return(NIL);}</highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>err_ubv(<ref refid="structobj" kindref="compound">LISP</ref><sp/>v)</highlight></codeline>
<codeline lineno="858"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(err(</highlight><highlight class="stringliteral">&quot;unbound<sp/>variable&quot;</highlight><highlight class="normal">,v));}</highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>symbol_boundp(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x,<ref refid="structobj" kindref="compound">LISP</ref><sp/>env)</highlight></codeline>
<codeline lineno="861"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>tmp;</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NSYMBOLP(x)<sp/>err(&quot;not<sp/>a<sp/>symbol&quot;,x);</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/>tmp<sp/>=<sp/>envlookup(x,env);</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/>if<sp/>NNULLP(tmp)<sp/>return(sym_t);</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/>if<sp/>EQ(VCELL(x),unbound_marker)<sp/>return(NIL);<sp/>else<sp/>return(sym_t);}</highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>symbol_value(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x,<ref refid="structobj" kindref="compound">LISP</ref><sp/>env)</highlight></codeline>
<codeline lineno="868"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>tmp;</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NSYMBOLP(x)<sp/>err(&quot;not<sp/>a<sp/>symbol&quot;,x);</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/>tmp<sp/>=<sp/>envlookup(x,env);</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/>if<sp/>NNULLP(tmp)<sp/>return(CAR(tmp));</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/>tmp<sp/>=<sp/>VCELL(x);</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/>if<sp/>EQ(tmp,unbound_marker)<sp/>err_ubv(x);</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/>return(tmp);}</highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*must_malloc(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>size)</highlight></codeline>
<codeline lineno="879"><highlight class="normal">{</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tmp;</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/>tmp<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>malloc((size)<sp/>?<sp/>size<sp/>:<sp/>1);</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp<sp/>==<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)NULL)<sp/>err(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>allocate<sp/>storage<sp/>from<sp/>system&quot;</highlight><highlight class="normal">,NIL);</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(tmp);}</highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>gen_intern(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>copyp)</highlight></codeline>
<codeline lineno="885"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>l,sym,sl;</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cname;</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>hash=0,n,c,flag;</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/>flag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obarray_dim<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/>{hash<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>obarray_dim;</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/>cname<sp/>=<sp/>name;</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">((c<sp/>=<sp/>*cname++))<sp/>hash<sp/>=<sp/>((hash<sp/>*<sp/>17)<sp/>^<sp/>c)<sp/>%<sp/>n;</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/>sl<sp/>=<sp/>obarray[hash];}</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/>sl<sp/>=<sp/>oblistvar;</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(l=sl;NNULLP(l);l=CDR(l))</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name,PNAME(CAR(l)))<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{no_interrupt(flag);</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(CAR(l));}</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(copyp<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/>{cname<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>must_malloc(strlen(name)+1);</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/>strcpy(cname,name);}</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/>cname<sp/>=<sp/>name;</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/>sym<sp/>=<sp/>symcons(cname,unbound_marker);</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obarray_dim<sp/>&gt;<sp/>1)<sp/>obarray[hash]<sp/>=<sp/>cons(sym,sl);</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/>oblistvar<sp/>=<sp/>cons(sym,oblistvar);</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/>no_interrupt(flag);</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(sym);}</highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>cintern(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name)</highlight></codeline>
<codeline lineno="913"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(gen_intern(name,0));}</highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>rintern(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name)</highlight></codeline>
<codeline lineno="916"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(gen_intern(name,1));}</highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>intern(<ref refid="structobj" kindref="compound">LISP</ref><sp/>name)</highlight></codeline>
<codeline lineno="919"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(rintern(get_c_string(name)));}</highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>subrcons(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>type,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/>SUBR_FUNC<sp/>f)</highlight></codeline>
<codeline lineno="922"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>z;</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/>NEWCELL(z,type);</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/>(*z).storage_as.subr.name<sp/>=<sp/>name;</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/>(*z).storage_as.subr0.f<sp/>=<sp/>f;</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(z);}</highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>closure(<ref refid="structobj" kindref="compound">LISP</ref><sp/>env,<ref refid="structobj" kindref="compound">LISP</ref><sp/>code)</highlight></codeline>
<codeline lineno="929"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>z;</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/>NEWCELL(z,tc_closure);</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/>(*z).storage_as.closure.env<sp/>=<sp/>env;</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/>(*z).storage_as.closure.code<sp/>=<sp/>code;</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(z);}</highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>gc_protect(<ref refid="structobj" kindref="compound">LISP</ref><sp/>*location)</highlight></codeline>
<codeline lineno="936"><highlight class="normal">{gc_protect_n(location,1);}</highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>gc_protect_n(<ref refid="structobj" kindref="compound">LISP</ref><sp/>*location,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="939"><highlight class="normal">{</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgc__protected" kindref="compound">gc_protected</ref><sp/>*reg;</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/>reg<sp/>=<sp/>(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgc__protected" kindref="compound">gc_protected</ref><sp/>*)<sp/>must_malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgc__protected" kindref="compound">gc_protected</ref>));</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/>(*reg).location<sp/>=<sp/>location;</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/>(*reg).length<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/>(*reg).next<sp/>=<sp/>protected_registers;</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/>protected_registers<sp/>=<sp/>reg;}</highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>gc_protect_sym(<ref refid="structobj" kindref="compound">LISP</ref><sp/>*location,</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*st)</highlight></codeline>
<codeline lineno="947"><highlight class="normal">{*location<sp/>=<sp/>cintern(st);</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/>gc_protect(location);}</highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>scan_registers(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="951"><highlight class="normal">{</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgc__protected" kindref="compound">gc_protected</ref><sp/>*reg;</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>*location;</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>j,n;</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(reg<sp/>=<sp/>protected_registers;<sp/>reg;<sp/>reg<sp/>=<sp/>(*reg).next)</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/>{location<sp/>=<sp/>(*reg).location;</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>(*reg).length;</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;j&lt;n;++j)</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>location[j]<sp/>=<sp/>gc_relocate(location[j]);}}</highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__stdcall<sp/>init_storage(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="961"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>stack_start;</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stack_start_ptr<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/>stack_start_ptr<sp/>=<sp/>&amp;stack_start;</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/>init_storage_1();</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/>init_storage_a();</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/>set_gc_hooks(tc_c_file,0,0,0,file_gc_free,&amp;j);</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/>set_print_hooks(tc_c_file,file_prin1);}</highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init_storage_1(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="971"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>ptr;</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/>tkbuffer<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>must_malloc(TKBUFFERN+1);</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((gc_kind_copying<sp/>==<sp/>1)<sp/>&amp;&amp;<sp/>(nheaps<sp/>!=<sp/>2))<sp/>||<sp/>(nheaps<sp/>&lt;<sp/>1))</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;invalid<sp/>number<sp/>of<sp/>heaps&quot;</highlight><highlight class="normal">,NIL);</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/>heaps<sp/>=<sp/>(<ref refid="structobj" kindref="compound">LISP</ref><sp/>*)<sp/>must_malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structobj" kindref="compound">LISP</ref>)<sp/>*<sp/>nheaps);</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;j&lt;nheaps;++j)<sp/>heaps[j]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/>heaps[0]<sp/>=<sp/>(<ref refid="structobj" kindref="compound">LISP</ref>)<sp/>must_malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">obj</ref>)*heap_size);</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/>heap<sp/>=<sp/>heaps[0];</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/>heap_org<sp/>=<sp/>heap;</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/>heap_end<sp/>=<sp/>heap<sp/>+<sp/>heap_size;</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gc_kind_copying<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/>heaps[1]<sp/>=<sp/>(<ref refid="structobj" kindref="compound">LISP</ref>)<sp/>must_malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">obj</ref>)*heap_size);</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/>freelist<sp/>=<sp/>NIL;</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/>gc_protect(&amp;oblistvar);</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obarray_dim<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/>{obarray<sp/>=<sp/>(<ref refid="structobj" kindref="compound">LISP</ref><sp/>*)<sp/>must_malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structobj" kindref="compound">LISP</ref>)<sp/>*<sp/>obarray_dim);</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;j&lt;obarray_dim;++j)</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obarray[j]<sp/>=<sp/>NIL;</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/>gc_protect_n(obarray,obarray_dim);}</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/>unbound_marker<sp/>=<sp/>cons(cintern(</highlight><highlight class="stringliteral">&quot;**unbound-marker**&quot;</highlight><highlight class="normal">),NIL);</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/>gc_protect(&amp;unbound_marker);</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/>eof_val<sp/>=<sp/>cons(cintern(</highlight><highlight class="stringliteral">&quot;eof&quot;</highlight><highlight class="normal">),NIL);</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/>gc_protect(&amp;eof_val);</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/>gc_protect_sym(&amp;sym_t,</highlight><highlight class="stringliteral">&quot;t&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/>setvar(sym_t,sym_t,NIL);</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/>setvar(cintern(</highlight><highlight class="stringliteral">&quot;nil&quot;</highlight><highlight class="normal">),NIL,NIL);</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/>setvar(cintern(</highlight><highlight class="stringliteral">&quot;let&quot;</highlight><highlight class="normal">),cintern(</highlight><highlight class="stringliteral">&quot;let-internal-macro&quot;</highlight><highlight class="normal">),NIL);</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/>setvar(cintern(</highlight><highlight class="stringliteral">&quot;let*&quot;</highlight><highlight class="normal">),cintern(</highlight><highlight class="stringliteral">&quot;let*-macro&quot;</highlight><highlight class="normal">),NIL);</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/>setvar(cintern(</highlight><highlight class="stringliteral">&quot;letrec&quot;</highlight><highlight class="normal">),cintern(</highlight><highlight class="stringliteral">&quot;letrec-macro&quot;</highlight><highlight class="normal">),NIL);</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/>gc_protect_sym(&amp;sym_errobj,</highlight><highlight class="stringliteral">&quot;errobj&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/>setvar(sym_errobj,NIL,NIL);</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/>gc_protect_sym(&amp;sym_catchall,</highlight><highlight class="stringliteral">&quot;all&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/>gc_protect_sym(&amp;sym_progn,</highlight><highlight class="stringliteral">&quot;begin&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/>gc_protect_sym(&amp;sym_lambda,</highlight><highlight class="stringliteral">&quot;lambda&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/>gc_protect_sym(&amp;sym_quote,</highlight><highlight class="stringliteral">&quot;quote&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/>gc_protect_sym(&amp;sym_dot,</highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/>gc_protect_sym(&amp;sym_after_gc,</highlight><highlight class="stringliteral">&quot;*after-gc*&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/>setvar(sym_after_gc,NIL,NIL);</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/>gc_protect_sym(&amp;sym_eval_history_ptr,</highlight><highlight class="stringliteral">&quot;*eval-history-ptr*&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/>setvar(sym_eval_history_ptr,NIL,NIL);</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inums_dim<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/>{inums<sp/>=<sp/>(<ref refid="structobj" kindref="compound">LISP</ref><sp/>*)<sp/>must_malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structobj" kindref="compound">LISP</ref>)<sp/>*<sp/>inums_dim);</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;j&lt;inums_dim;++j)</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{NEWCELL(ptr,tc_flonum);</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLONM(ptr)<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inums[j]<sp/>=<sp/>ptr;}</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/>gc_protect_n(inums,inums_dim);}}</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init_subr(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>type,<sp/>SUBR_FUNC<sp/>fcn)</highlight></codeline>
<codeline lineno="1022"><highlight class="normal">{setvar(cintern(name),subrcons(type,name,fcn),NIL);}</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init_subr_0(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>(*fcn)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="1025"><highlight class="normal">{init_subr(name,tc_subr_0,(SUBR_FUNC)fcn);}</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>(*fcn)(<ref refid="structobj" kindref="compound">LISP</ref>))</highlight></codeline>
<codeline lineno="1028"><highlight class="normal">{init_subr(name,tc_subr_1,(SUBR_FUNC)fcn);}</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>(*fcn)(<ref refid="structobj" kindref="compound">LISP</ref>,<ref refid="structobj" kindref="compound">LISP</ref>))</highlight></codeline>
<codeline lineno="1031"><highlight class="normal">{init_subr(name,tc_subr_2,(SUBR_FUNC)fcn);}</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init_subr_2n(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>(*fcn)(<ref refid="structobj" kindref="compound">LISP</ref>,<ref refid="structobj" kindref="compound">LISP</ref>))</highlight></codeline>
<codeline lineno="1034"><highlight class="normal">{init_subr(name,tc_subr_2n,(SUBR_FUNC)fcn);}</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init_subr_3(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>(*fcn)(<ref refid="structobj" kindref="compound">LISP</ref>,<ref refid="structobj" kindref="compound">LISP</ref>,<ref refid="structobj" kindref="compound">LISP</ref>))</highlight></codeline>
<codeline lineno="1037"><highlight class="normal">{init_subr(name,tc_subr_3,(SUBR_FUNC)fcn);}</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init_subr_4(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>(*fcn)(<ref refid="structobj" kindref="compound">LISP</ref>,<ref refid="structobj" kindref="compound">LISP</ref>,<ref refid="structobj" kindref="compound">LISP</ref>,<ref refid="structobj" kindref="compound">LISP</ref>))</highlight></codeline>
<codeline lineno="1040"><highlight class="normal">{init_subr(name,tc_subr_4,(SUBR_FUNC)fcn);}</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init_subr_5(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>(*fcn)(<ref refid="structobj" kindref="compound">LISP</ref>,<ref refid="structobj" kindref="compound">LISP</ref>,<ref refid="structobj" kindref="compound">LISP</ref>,<ref refid="structobj" kindref="compound">LISP</ref>,<ref refid="structobj" kindref="compound">LISP</ref>))</highlight></codeline>
<codeline lineno="1043"><highlight class="normal">{init_subr(name,tc_subr_5,(SUBR_FUNC)fcn);}</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init_lsubr(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>(*fcn)(<ref refid="structobj" kindref="compound">LISP</ref>))</highlight></codeline>
<codeline lineno="1046"><highlight class="normal">{init_subr(name,tc_lsubr,(SUBR_FUNC)fcn);}</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init_fsubr(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>(*fcn)(<ref refid="structobj" kindref="compound">LISP</ref>,<ref refid="structobj" kindref="compound">LISP</ref>))</highlight></codeline>
<codeline lineno="1049"><highlight class="normal">{init_subr(name,tc_fsubr,(SUBR_FUNC)fcn);}</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init_msubr(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>(*fcn)(<ref refid="structobj" kindref="compound">LISP</ref><sp/>*,<ref refid="structobj" kindref="compound">LISP</ref><sp/>*))</highlight></codeline>
<codeline lineno="1052"><highlight class="normal">{init_subr(name,tc_msubr,(SUBR_FUNC)fcn);}</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>assq(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x,<ref refid="structobj" kindref="compound">LISP</ref><sp/>alist)</highlight></codeline>
<codeline lineno="1055"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>l,tmp;</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(l=alist;CONSP(l);l=CDR(l))</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/>{tmp<sp/>=<sp/>CAR(l);</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CONSP(tmp)<sp/>&amp;&amp;<sp/>EQ(CAR(tmp),x))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(tmp);</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/>INTERRUPT_CHECK();}</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>EQ(l,NIL)<sp/>return(NIL);</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/>return(err(&quot;improper<sp/>list<sp/>to<sp/>assq&quot;,alist));}</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal">struct<sp/><ref refid="structuser__type__hooks" kindref="compound">user_type_hooks</ref><sp/>*get_user_type_hooks(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>type)</highlight></codeline>
<codeline lineno="1065"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(user_types<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/>{n<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structuser__type__hooks" kindref="compound">user_type_hooks</ref>)<sp/>*<sp/>tc_table_dim;</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/>user_types<sp/>=<sp/>(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structuser__type__hooks" kindref="compound">user_type_hooks</ref><sp/>*)<sp/>must_malloc(n);</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(user_types,0,n);}</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((type<sp/>&gt;=<sp/>0)<sp/>&amp;&amp;<sp/>(type<sp/>&lt;<sp/>tc_table_dim))</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(&amp;user_types[type]);</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;type<sp/>number<sp/>out<sp/>of<sp/>range&quot;</highlight><highlight class="normal">,NIL);</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NULL);}</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>allocate_user_tc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1077"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>user_tc_next;</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&gt;<sp/>tc_user_max)</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;ran<sp/>out<sp/>of<sp/>user<sp/>type<sp/>codes&quot;</highlight><highlight class="normal">,NIL);</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/>++user_tc_next;</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(x);}</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_gc_hooks(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>type,</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>(*rel)(<ref refid="structobj" kindref="compound">LISP</ref>),</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>(*mark)(<ref refid="structobj" kindref="compound">LISP</ref>),</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*scan)(<ref refid="structobj" kindref="compound">LISP</ref>),</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*free)(<ref refid="structobj" kindref="compound">LISP</ref>),</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*kind)</highlight></codeline>
<codeline lineno="1089"><highlight class="normal">{</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structuser__type__hooks" kindref="compound">user_type_hooks</ref><sp/>*p;</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/>p<sp/>=<sp/>get_user_type_hooks(type);</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/>p-&gt;gc_relocate<sp/>=<sp/>rel;</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/>p-&gt;gc_scan<sp/>=<sp/>scan;</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/>p-&gt;gc_mark<sp/>=<sp/>mark;</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/>p-&gt;gc_free<sp/>=<sp/>free;</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/>*kind<sp/>=<sp/>gc_kind_copying;}</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>gc_relocate(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x)</highlight></codeline>
<codeline lineno="1098"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>nw;</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structuser__type__hooks" kindref="compound">user_type_hooks</ref><sp/>*p;</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>EQ(x,NIL)<sp/>return(NIL);</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/>if<sp/>((*x).gc_mark<sp/>==<sp/>1)<sp/>return(CAR(x));</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/>switch<sp/>TYPE(x)</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_flonum:</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_cons:</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_symbol:</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_closure:</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_0:</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_1:</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_2:</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_2n:</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_3:</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_4:</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_5:</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_lsubr:</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_fsubr:</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_msubr:</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((nw<sp/>=<sp/>heap)<sp/>&gt;=<sp/>heap_end)<sp/>gc_fatal_error();</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>heap<sp/>=<sp/>nw+1;</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(nw,x,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">obj</ref>));</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>get_user_type_hooks(TYPE(x));</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p-&gt;gc_relocate)</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/>nw<sp/>=<sp/>(*p-&gt;gc_relocate)(x);</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((nw<sp/>=<sp/>heap)<sp/>&gt;=<sp/>heap_end)<sp/>gc_fatal_error();</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>heap<sp/>=<sp/>nw+1;</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>memcpy(nw,x,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">obj</ref>));}}</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/>(*x).gc_mark<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/>CAR(x)<sp/>=<sp/>nw;</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(nw);}</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>get_newspace(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1134"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>newspace;</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(heap_org<sp/>==<sp/>heaps[0])</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/>newspace<sp/>=<sp/>heaps[1];</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/>newspace<sp/>=<sp/>heaps[0];</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/>heap<sp/>=<sp/>newspace;</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/>heap_org<sp/>=<sp/>heap;</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/>heap_end<sp/>=<sp/>heap<sp/>+<sp/>heap_size;</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(newspace);}</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>scan_newspace(<ref refid="structobj" kindref="compound">LISP</ref><sp/>newspace)</highlight></codeline>
<codeline lineno="1145"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>ptr;</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structuser__type__hooks" kindref="compound">user_type_hooks</ref><sp/>*p;</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(ptr=newspace;<sp/>ptr<sp/>&lt;<sp/>heap;<sp/>++ptr)</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>TYPE(ptr)</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_cons:</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_closure:</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>CAR(ptr)<sp/>=<sp/>gc_relocate(CAR(ptr));</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>CDR(ptr)<sp/>=<sp/>gc_relocate(CDR(ptr));</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_symbol:</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>VCELL(ptr)<sp/>=<sp/>gc_relocate(VCELL(ptr));</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_flonum:</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_0:</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_1:</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_2:</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_2n:</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_3:</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_4:</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_5:</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_lsubr:</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_fsubr:</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_msubr:</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>get_user_type_hooks(TYPE(ptr));</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p-&gt;gc_scan)<sp/>(*p-&gt;gc_scan)(ptr);}}}</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>free_oldspace(<ref refid="structobj" kindref="compound">LISP</ref><sp/>space,<ref refid="structobj" kindref="compound">LISP</ref><sp/>end)</highlight></codeline>
<codeline lineno="1174"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>ptr;</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structuser__type__hooks" kindref="compound">user_type_hooks</ref><sp/>*p;</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(ptr=space;<sp/>ptr<sp/>&lt;<sp/>end;<sp/>++ptr)</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr-&gt;gc_mark<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>TYPE(ptr)</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_cons:</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_closure:</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_symbol:</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_flonum:</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_0:</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_1:</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_2:</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_2n:</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_3:</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_4:</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_5:</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_lsubr:</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_fsubr:</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_msubr:</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>get_user_type_hooks(TYPE(ptr));</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p-&gt;gc_free)<sp/>(*p-&gt;gc_free)(ptr);}}</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1198"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>gc_stop_and_copy(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1199"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>newspace,oldspace,end;</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>flag;</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/>flag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/>errjmp_ok<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/>oldspace<sp/>=<sp/>heap_org;</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/>end<sp/>=<sp/>heap;</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/>old_heap_used<sp/>=<sp/>end<sp/>-<sp/>oldspace;</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/>newspace<sp/>=<sp/>get_newspace();</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/>scan_registers();</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/>scan_newspace(newspace);</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/>free_oldspace(oldspace,end);</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/>errjmp_ok<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/>no_interrupt(flag);}</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>allocate_aheap(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1214"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>j,flag;</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>ptr,end,next;</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/>gc_kind_check();</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;j&lt;nheaps;++j)</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!heaps[j])</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{flag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gc_status_flag<sp/>&amp;&amp;<sp/>(siod_verbose_level<sp/>&gt;=<sp/>4))</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;[allocating<sp/>heap<sp/>%ld]\n&quot;</highlight><highlight class="normal">,j);</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>heaps[j]<sp/>=<sp/>(<ref refid="structobj" kindref="compound">LISP</ref>)<sp/>must_malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">obj</ref>)*heap_size);</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>heaps[j];</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>heaps[j]<sp/>+<sp/>heap_size;</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(1)</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/>{(*ptr).type<sp/>=<sp/>tc_free_cell;</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>next<sp/>=<sp/>ptr<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(next<sp/>&lt;<sp/>end)</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{CDR(ptr)<sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>next;}</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{CDR(ptr)<sp/>=<sp/>freelist;</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;}}</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>freelist<sp/>=<sp/>heaps[j];</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>flag<sp/>=<sp/>no_interrupt(flag);</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(sym_t);}</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>gc_for_newcell(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1240"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>flag,n;</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>l;</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(heap<sp/>&lt;<sp/>heap_end)</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/>{freelist<sp/>=<sp/>heap;</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/>CDR(freelist)<sp/>=<sp/>NIL;</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/>++heap;</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(errjmp_ok<sp/>==<sp/>0)<sp/>gc_fatal_error();</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/>flag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/>errjmp_ok<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/>gc_mark_and_sweep();</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/>errjmp_ok<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/>no_interrupt(flag);</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(n=0,l=freelist;(n<sp/>&lt;<sp/>100)<sp/>&amp;&amp;<sp/>NNULLP(l);<sp/>++n)<sp/>l<sp/>=<sp/>CDR(l);</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NULLP(allocate_aheap())</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gc_fatal_error();}</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/>else<sp/>if<sp/>((n<sp/>==<sp/>100)<sp/>&amp;&amp;<sp/>NNULLP(sym_after_gc))</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/>leval(leval(sym_after_gc,NIL),NIL);</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/>else</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/>allocate_aheap();}</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>gc_mark_and_sweep(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1263"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>stack_end;</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/>gc_ms_stats_start();</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(heap<sp/>&lt;<sp/>heap_end)</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/>{heap-&gt;type<sp/>=<sp/>tc_free_cell;</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/>heap-&gt;gc_mark<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/>++heap;}</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/>setjmp(save_regs_gc_mark);</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/>mark_locations((<ref refid="structobj" kindref="compound">LISP</ref><sp/>*)<sp/>save_regs_gc_mark,</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structobj" kindref="compound">LISP</ref><sp/>*)<sp/>(((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>save_regs_gc_mark)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(save_regs_gc_mark)));</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/>mark_protected_registers();</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/>mark_locations((<ref refid="structobj" kindref="compound">LISP</ref><sp/>*)<sp/>stack_start_ptr,</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structobj" kindref="compound">LISP</ref><sp/>*)<sp/>&amp;stack_end);</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>THINK_C</highlight></codeline>
<codeline lineno="1276"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>mark_locations((<ref refid="structobj" kindref="compound">LISP</ref><sp/>*)<sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>stack_start_ptr<sp/>+<sp/>2),</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structobj" kindref="compound">LISP</ref><sp/>*)<sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>&amp;stack_end<sp/>+<sp/>2));</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1279"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>gc_sweep();</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/>gc_ms_stats_end();}</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"></highlight></codeline>
<codeline lineno="1282"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>gc_ms_stats_start(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1283"><highlight class="normal">{gc_rt<sp/>=<sp/>myruntime();</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/>gc_cells_collected<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gc_status_flag<sp/>&amp;&amp;<sp/>(siod_verbose_level<sp/>&gt;=<sp/>4))</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;[starting<sp/>GC]\n&quot;</highlight><highlight class="normal">);}</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"></highlight></codeline>
<codeline lineno="1288"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>gc_ms_stats_end(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1289"><highlight class="normal">{gc_rt<sp/>=<sp/>myruntime()<sp/>-<sp/>gc_rt;</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/>gc_time_taken<sp/>=<sp/>gc_time_taken<sp/>+<sp/>gc_rt;</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gc_status_flag<sp/>&amp;&amp;<sp/>(siod_verbose_level<sp/>&gt;=<sp/>4))</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;[GC<sp/>took<sp/>%g<sp/>cpu<sp/>seconds,<sp/>%ld<sp/>cells<sp/>collected]\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gc_rt,</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gc_cells_collected);}</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>gc_mark(<ref refid="structobj" kindref="compound">LISP</ref><sp/>ptr)</highlight></codeline>
<codeline lineno="1297"><highlight class="normal">{</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structuser__type__hooks" kindref="compound">user_type_hooks</ref><sp/>*p;</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/>gc_mark_loop:</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NULLP(ptr)<sp/>return;</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/>if<sp/>((*ptr).gc_mark)<sp/>return;</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/>(*ptr).gc_mark<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/>switch<sp/>((*ptr).type)</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_flonum:</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_cons:</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gc_mark(CAR(ptr));</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>CDR(ptr);</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>gc_mark_loop;</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_symbol:</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>VCELL(ptr);</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>gc_mark_loop;</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_closure:</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gc_mark((*ptr).storage_as.closure.code);</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>(*ptr).storage_as.closure.env;</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>gc_mark_loop;</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_0:</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_1:</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_2:</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_2n:</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_3:</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_4:</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_5:</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_lsubr:</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_fsubr:</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_msubr:</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>get_user_type_hooks(TYPE(ptr));</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p-&gt;gc_mark)</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>(*p-&gt;gc_mark)(ptr);}}</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mark_protected_registers(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1333"><highlight class="normal">{</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgc__protected" kindref="compound">gc_protected</ref><sp/>*reg;</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>*location;</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>j,n;</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(reg<sp/>=<sp/>protected_registers;<sp/>reg;<sp/>reg<sp/>=<sp/>(*reg).next)</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/>{location<sp/>=<sp/>(*reg).location;</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>(*reg).length;</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;j&lt;n;++j)</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gc_mark(location[j]);}}</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"></highlight></codeline>
<codeline lineno="1342"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mark_locations(<ref refid="structobj" kindref="compound">LISP</ref><sp/>*start,<ref refid="structobj" kindref="compound">LISP</ref><sp/>*end)</highlight></codeline>
<codeline lineno="1343"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>*tmp;</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start<sp/>&gt;<sp/>end)</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/>{tmp<sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/>start<sp/>=<sp/>end;</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/>end<sp/>=<sp/>tmp;}</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/>n<sp/>=<sp/>end<sp/>-<sp/>start;</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/>mark_locations_array(start,n);}</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"></highlight></codeline>
<codeline lineno="1352"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>looks_pointerp(<ref refid="structobj" kindref="compound">LISP</ref><sp/>p)</highlight></codeline>
<codeline lineno="1353"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>h;</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;j&lt;nheaps;++j)</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((h<sp/>=<sp/>heaps[j])<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(p<sp/>&gt;=<sp/>h)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(p<sp/>&lt;<sp/>(h<sp/>+<sp/>heap_size))<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)p)<sp/>-<sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)h))<sp/>%<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">obj</ref>))<sp/>==<sp/>0)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NTYPEP(p,tc_free_cell))</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(1);</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);}</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"></highlight></codeline>
<codeline lineno="1364"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mark_locations_array(<ref refid="structobj" kindref="compound">LISP</ref><sp/>*x,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="1365"><highlight class="normal">{</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>p;</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;j&lt;n;++j)</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/>{p<sp/>=<sp/>x[j];</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(looks_pointerp(p))</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gc_mark(p);}}</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>gc_sweep(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1373"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>ptr,end,nfreelist,org;</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>n,k;</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structuser__type__hooks" kindref="compound">user_type_hooks</ref><sp/>*p;</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/>end<sp/>=<sp/>heap_end;</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/>nfreelist<sp/>=<sp/>NIL;</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(k=0;k&lt;nheaps;++k)</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(heaps[k])</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{org<sp/>=<sp/>heaps[k];</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>org<sp/>+<sp/>heap_size;</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(ptr=org;<sp/>ptr<sp/>&lt;<sp/>end;<sp/>++ptr)</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((*ptr).gc_mark<sp/>==<sp/>0))</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">((*ptr).type)</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_free_cell:</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_cons:</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_closure:</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_symbol:</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_flonum:</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_0:</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_1:</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_2:</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_2n:</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_3:</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_4:</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_5:</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_lsubr:</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_fsubr:</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_msubr:</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>get_user_type_hooks(TYPE(ptr));</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p-&gt;gc_free)</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*p-&gt;gc_free)(ptr);}</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++n;</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*ptr).type<sp/>=<sp/>tc_free_cell;</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CDR(ptr)<sp/>=<sp/>nfreelist;</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nfreelist<sp/>=<sp/>ptr;}</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*ptr).gc_mark<sp/>=<sp/>0;}</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/>gc_cells_collected<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/>freelist<sp/>=<sp/>nfreelist;}</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"></highlight></codeline>
<codeline lineno="1415"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>gc_kind_check(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1416"><highlight class="normal">{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gc_kind_copying<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;cannot<sp/>perform<sp/>operation<sp/>with<sp/>stop-and-copy<sp/>GC<sp/>mode.<sp/>Use<sp/>-g0\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NIL);}</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"></highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>user_gc(<ref refid="structobj" kindref="compound">LISP</ref><sp/>args)</highlight></codeline>
<codeline lineno="1421"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>old_status_flag,flag;</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/>gc_kind_check();</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/>flag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/>errjmp_ok<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/>old_status_flag<sp/>=<sp/>gc_status_flag;</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NNULLP(args)</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/>if<sp/>NULLP(car(args))<sp/>gc_status_flag<sp/>=<sp/>0;<sp/>else<sp/>gc_status_flag<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/>gc_mark_and_sweep();</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/>gc_status_flag<sp/>=<sp/>old_status_flag;</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/>errjmp_ok<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/>no_interrupt(flag);</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/>return(NIL);}</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"></highlight></codeline>
<codeline lineno="1434"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>nactive_heaps(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1435"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>m;</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(m=0;(m<sp/>&lt;<sp/>nheaps)<sp/>&amp;&amp;<sp/>heaps[m];++m);</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(m);}</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"></highlight></codeline>
<codeline lineno="1439"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>freelist_length(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1440"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>l;</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(n=0,l=freelist;NNULLP(l);<sp/>++n)<sp/>l<sp/>=<sp/>CDR(l);</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/>n<sp/>+=<sp/>(heap_end<sp/>-<sp/>heap);</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(n);}</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>gc_status(<ref refid="structobj" kindref="compound">LISP</ref><sp/>args)</highlight></codeline>
<codeline lineno="1447"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>n,m;</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NNULLP(args)<sp/></highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/>if<sp/>NULLP(car(args))<sp/>gc_status_flag<sp/>=<sp/>0;<sp/>else<sp/>gc_status_flag<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/>if<sp/>(gc_kind_copying<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gc_status_flag)</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>put_st(</highlight><highlight class="stringliteral">&quot;garbage<sp/>collection<sp/>is<sp/>on\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>put_st(</highlight><highlight class="stringliteral">&quot;garbage<sp/>collection<sp/>is<sp/>off\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(tkbuffer,</highlight><highlight class="stringliteral">&quot;%ld<sp/>allocated<sp/>%ld<sp/>free\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)(heap<sp/>-<sp/>heap_org),<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)(heap_end<sp/>-<sp/>heap));</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/>put_st(tkbuffer);}</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gc_status_flag)</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>put_st(</highlight><highlight class="stringliteral">&quot;garbage<sp/>collection<sp/>verbose\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>put_st(</highlight><highlight class="stringliteral">&quot;garbage<sp/>collection<sp/>silent\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/>{m<sp/>=<sp/>nactive_heaps();</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>freelist_length();</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>sprintf(tkbuffer,</highlight><highlight class="stringliteral">&quot;%ld/%ld<sp/>heaps,<sp/>%ld<sp/>allocated<sp/>%ld<sp/>free\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m,nheaps,m*heap_size<sp/>-<sp/>n,n);</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>put_st(tkbuffer);}}</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"></highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>gc_info(<ref refid="structobj" kindref="compound">LISP</ref><sp/>arg)</highlight></codeline>
<codeline lineno="1471"><highlight class="normal">{</highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(get_c_long(arg))</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">((gc_kind_copying<sp/>==<sp/>1)<sp/>?<sp/>sym_t<sp/>:<sp/>NIL);</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(nactive_heaps()));</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(nheaps));</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(heap_size));</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons((gc_kind_copying<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>(heap_end<sp/>-<sp/>heap)</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>freelist_length()));</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}}</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"></highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>leval_args(<ref refid="structobj" kindref="compound">LISP</ref><sp/>l,<ref refid="structobj" kindref="compound">LISP</ref><sp/>env)</highlight></codeline>
<codeline lineno="1488"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>result,v1,v2,tmp;</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NULLP(l)<sp/>return(NIL);</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/>if<sp/>NCONSP(l)<sp/>err(&quot;bad<sp/>syntax<sp/>argument<sp/>list&quot;,l);</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/>result<sp/>=<sp/>cons(leval(CAR(l),env),NIL);</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/>for(v1=result,v2=CDR(l);</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>CONSP(v2);</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>v1<sp/>=<sp/>tmp,<sp/>v2<sp/>=<sp/>CDR(v2))</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/>{tmp<sp/>=<sp/>cons(leval(CAR(v2),env),NIL);</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/>CDR(v1)<sp/>=<sp/>tmp;}</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NNULLP(v2)<sp/>err(&quot;bad<sp/>syntax<sp/>argument<sp/>list&quot;,l);</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/>return(result);}</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"></highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>extend_env(<ref refid="structobj" kindref="compound">LISP</ref><sp/>actuals,<ref refid="structobj" kindref="compound">LISP</ref><sp/>formals,<ref refid="structobj" kindref="compound">LISP</ref><sp/>env)</highlight></codeline>
<codeline lineno="1501"><highlight class="normal">{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>SYMBOLP(formals)</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/>return(cons(cons(cons(formals,NIL),cons(actuals,NIL)),env));</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/>return(cons(cons(formals,actuals),env));}</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"></highlight></codeline>
<codeline lineno="1505"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ENVLOOKUP_TRICK<sp/>1</highlight></codeline>
<codeline lineno="1506"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>envlookup(<ref refid="structobj" kindref="compound">LISP</ref><sp/>var,<ref refid="structobj" kindref="compound">LISP</ref><sp/>env)</highlight></codeline>
<codeline lineno="1508"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>frame,al,fl,tmp;</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(frame=env;CONSP(frame);frame=CDR(frame))</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/>{tmp<sp/>=<sp/>CAR(frame);</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NCONSP(tmp)<sp/>err(&quot;damaged<sp/>frame&quot;,tmp);</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/>for(fl=CAR(tmp),al=CDR(tmp);CONSP(fl);fl=CDR(fl),al=CDR(al))</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NCONSP(al)<sp/>err(&quot;too<sp/>few<sp/>arguments&quot;,tmp);</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>EQ(CAR(fl),var)<sp/>return(al);}</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>suggested<sp/>by<sp/>a<sp/>user.<sp/>It<sp/>works<sp/>for<sp/>reference<sp/>(although<sp/>conses)</highlight></codeline>
<codeline lineno="1516"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>but<sp/>doesn&apos;t<sp/>allow<sp/>for<sp/>set!<sp/>to<sp/>work<sp/>properly...<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1517"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(ENVLOOKUP_TRICK)</highlight></codeline>
<codeline lineno="1518"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SYMBOLP(fl)<sp/>&amp;&amp;<sp/>EQ(fl,<sp/>var))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(cons(al,<sp/>NIL));</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1520"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NNULLP(frame)<sp/>err(&quot;damaged<sp/>env&quot;,env);</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/>return(NIL);}</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"></highlight></codeline>
<codeline lineno="1524"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_eval_hooks(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>type,<ref refid="structobj" kindref="compound">LISP</ref><sp/>(*fcn)(<ref refid="structobj" kindref="compound">LISP</ref>,<sp/>LISP<sp/>*,LISP<sp/>*))</highlight></codeline>
<codeline lineno="1525"><highlight class="normal">{</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structuser__type__hooks" kindref="compound">user_type_hooks</ref><sp/>*p;</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/>p<sp/>=<sp/>get_user_type_hooks(type);</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/>p-&gt;leval<sp/>=<sp/>fcn;}</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"></highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>err_closure_code(<ref refid="structobj" kindref="compound">LISP</ref><sp/>tmp)</highlight></codeline>
<codeline lineno="1530"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(err(</highlight><highlight class="stringliteral">&quot;closure<sp/>code<sp/>type<sp/>not<sp/>valid&quot;</highlight><highlight class="normal">,tmp));}</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"></highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>leval(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x,<ref refid="structobj" kindref="compound">LISP</ref><sp/>env)</highlight></codeline>
<codeline lineno="1533"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>tmp,arg1;</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structuser__type__hooks" kindref="compound">user_type_hooks</ref><sp/>*p;</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/>STACK_CHECK(&amp;x);</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/>loop:</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/>INTERRUPT_CHECK();</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/>tmp<sp/>=<sp/>VCELL(sym_eval_history_ptr);</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>TYPEP(tmp,tc_cons)</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/>{CAR(tmp)<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/>VCELL(sym_eval_history_ptr)<sp/>=<sp/>CDR(tmp);}</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>TYPE(x)</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_symbol:</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>envlookup(x,env);</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NNULLP(tmp)<sp/>return(CAR(tmp));</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>VCELL(x);</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>EQ(tmp,unbound_marker)<sp/>err_ubv(x);</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return(tmp);</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/>case<sp/>tc_cons:</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>CAR(x);</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>switch<sp/>TYPE(tmp)</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_symbol:</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>envlookup(tmp,env);</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NNULLP(tmp)</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{tmp<sp/>=<sp/>CAR(tmp);</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>VCELL(CAR(x));</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>EQ(tmp,unbound_marker)<sp/>err_ubv(CAR(x));</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>case<sp/>tc_cons:</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>leval(tmp,env);</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;}</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>switch<sp/>TYPE(tmp)</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_0:</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(SUBR0(tmp)());</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_1:</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(SUBR1(tmp)(leval(car(CDR(x)),env)));</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_2:</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>CDR(x);</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg1<sp/>=<sp/>leval(car(x),env);</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>NULLP(x)<sp/>?<sp/>NIL<sp/>:<sp/>CDR(x);</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(SUBR2(tmp)(arg1,</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>leval(car(x),env)));</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_2n:</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>CDR(x);</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg1<sp/>=<sp/>leval(car(x),env);</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>NULLP(x)<sp/>?<sp/>NIL<sp/>:<sp/>CDR(x);</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg1<sp/>=<sp/>SUBR2(tmp)(arg1,</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>leval(car(x),env));</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(x=cdr(x);CONSP(x);x=CDR(x))</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg1<sp/>=<sp/>SUBR2(tmp)(arg1,leval(CAR(x),env));</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(arg1);</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_3:</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>CDR(x);</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg1<sp/>=<sp/>leval(car(x),env);</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>NULLP(x)<sp/>?<sp/>NIL<sp/>:<sp/>CDR(x);</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(SUBR3(tmp)(arg1,</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>leval(car(x),env),</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>leval(car(cdr(x)),env)));</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"></highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_4:</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>CDR(x);</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg1<sp/>=<sp/>leval(car(x),env);</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>NULLP(x)<sp/>?<sp/>NIL<sp/>:<sp/>CDR(x);</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(SUBR4(tmp)(arg1,</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>leval(car(x),env),</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>leval(car(cdr(x)),env),</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>leval(car(cdr(cdr(x))),env)));</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"></highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_5:</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>CDR(x);</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg1<sp/>=<sp/>leval(car(x),env);</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>NULLP(x)<sp/>?<sp/>NIL<sp/>:<sp/>CDR(x);</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(SUBR5(tmp)(arg1,</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>leval(car(x),env),</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>leval(car(cdr(x)),env),</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>leval(car(cdr(cdr(x))),env),</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>leval(car(cdr(cdr(cdr(x)))),env)));</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"></highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_lsubr:</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(SUBR1(tmp)(leval_args(CDR(x),env)));</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_fsubr:</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(SUBR2(tmp)(CDR(x),env));</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_msubr:</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NULLP(SUBRM(tmp)(&amp;x,&amp;env))<sp/>return(x);</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>goto<sp/>loop;</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>case<sp/>tc_closure:</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>switch<sp/>TYPE((*tmp).storage_as.closure.code)</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_cons:</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env<sp/>=<sp/>extend_env(leval_args(CDR(x),env),</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CAR((*tmp).storage_as.closure.code),</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*tmp).storage_as.closure.env);</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>CDR((*tmp).storage_as.closure.code);</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>loop;</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_1:</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(SUBR1(tmp-&gt;storage_as.closure.code)</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tmp-&gt;storage_as.closure.env));</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_2:</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>CDR(x);</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg1<sp/>=<sp/>leval(car(x),env);</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(SUBR2(tmp-&gt;storage_as.closure.code)</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tmp-&gt;storage_as.closure.env,arg1));</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_3:</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>CDR(x);</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg1<sp/>=<sp/>leval(car(x),env);</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>NULLP(x)<sp/>?<sp/>NIL<sp/>:<sp/>CDR(x);</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(SUBR3(tmp-&gt;storage_as.closure.code)</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tmp-&gt;storage_as.closure.env,</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg1,</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>leval(car(x),env)));</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_4:</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>CDR(x);</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg1<sp/>=<sp/>leval(car(x),env);</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>NULLP(x)<sp/>?<sp/>NIL<sp/>:<sp/>CDR(x);</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(SUBR4(tmp-&gt;storage_as.closure.code)</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tmp-&gt;storage_as.closure.env,</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg1,</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>leval(car(x),env),</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>leval(car(cdr(x)),env)));</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_5:</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>CDR(x);</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg1<sp/>=<sp/>leval(car(x),env);</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>NULLP(x)<sp/>?<sp/>NIL<sp/>:<sp/>CDR(x);</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(SUBR5(tmp-&gt;storage_as.closure.code)</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tmp-&gt;storage_as.closure.env,</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg1,</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>leval(car(x),env),</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>leval(car(cdr(x)),env),</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>leval(car(cdr(cdr(x))),env)));</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"></highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_lsubr:</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(SUBR1(tmp-&gt;storage_as.closure.code)</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(cons(tmp-&gt;storage_as.closure.env,</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>leval_args(CDR(x),env))));</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err_closure_code(tmp);}</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_symbol:</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>cons(tmp,cons(cons(sym_quote,cons(x,NIL)),NIL));</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>leval(x,NIL);</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>loop;</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>get_user_type_hooks(TYPE(tmp));</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p-&gt;leval)</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NULLP((*p-&gt;leval)(tmp,&amp;x,&amp;env))<sp/>return(x);<sp/>else<sp/>goto<sp/>loop;}</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err(&quot;bad<sp/>function&quot;,tmp);}</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/>default:</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return(x);}}</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"></highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lapply(<ref refid="structobj" kindref="compound">LISP</ref><sp/>fcn,<ref refid="structobj" kindref="compound">LISP</ref><sp/>args)</highlight></codeline>
<codeline lineno="1681"><highlight class="normal">{</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structuser__type__hooks" kindref="compound">user_type_hooks</ref><sp/>*p;</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>acc;</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/>STACK_CHECK(&amp;fcn);</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/>INTERRUPT_CHECK();</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>TYPE(fcn)</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_0:</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(SUBR0(fcn)());</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_1:</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(SUBR1(fcn)(car(args)));</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_2:</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(SUBR2(fcn)(car(args),car(cdr(args))));</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_2n:</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>acc<sp/>=<sp/>SUBR2(fcn)(car(args),car(cdr(args)));</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(args=cdr(cdr(args));CONSP(args);args=CDR(args))</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/>acc<sp/>=<sp/>SUBR2(fcn)(acc,CAR(args));</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(acc);</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_3:</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(SUBR3(fcn)(car(args),car(cdr(args)),car(cdr(cdr(args)))));</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_4:</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(SUBR4(fcn)(car(args),car(cdr(args)),car(cdr(cdr(args))),</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>car(cdr(cdr(cdr(args))))));</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_5:</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(SUBR5(fcn)(car(args),car(cdr(args)),car(cdr(cdr(args))),</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>car(cdr(cdr(cdr(args)))),</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>car(cdr(cdr(cdr(cdr(args)))))));</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_lsubr:</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(SUBR1(fcn)(args));</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_fsubr:</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_msubr:</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_symbol:</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(err(</highlight><highlight class="stringliteral">&quot;cannot<sp/>be<sp/>applied&quot;</highlight><highlight class="normal">,fcn));</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_closure:</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>TYPE(fcn-&gt;storage_as.closure.code)</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_cons:</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(leval(cdr(fcn-&gt;storage_as.closure.code),</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extend_env(args,</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>car(fcn-&gt;storage_as.closure.code),</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcn-&gt;storage_as.closure.env)));</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_1:</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(SUBR1(fcn-&gt;storage_as.closure.code)</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(fcn-&gt;storage_as.closure.env));</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_2:</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(SUBR2(fcn-&gt;storage_as.closure.code)</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(fcn-&gt;storage_as.closure.env,</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>car(args)));</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_3:</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(SUBR3(fcn-&gt;storage_as.closure.code)</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(fcn-&gt;storage_as.closure.env,</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>car(args),car(cdr(args))));</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_4:</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(SUBR4(fcn-&gt;storage_as.closure.code)</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(fcn-&gt;storage_as.closure.env,</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>car(args),car(cdr(args)),car(cdr(cdr(args)))));</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_5:</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(SUBR5(fcn-&gt;storage_as.closure.code)</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(fcn-&gt;storage_as.closure.env,</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>car(args),car(cdr(args)),car(cdr(cdr(args))),</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>car(cdr(cdr(cdr(args))))));</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_lsubr:</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(SUBR1(fcn-&gt;storage_as.closure.code)</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(cons(fcn-&gt;storage_as.closure.env,args)));</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(err_closure_code(fcn));}</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>get_user_type_hooks(TYPE(fcn));</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p-&gt;leval)</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(err(</highlight><highlight class="stringliteral">&quot;have<sp/>eval,<sp/>dont<sp/>know<sp/>apply&quot;</highlight><highlight class="normal">,fcn));</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(err(</highlight><highlight class="stringliteral">&quot;cannot<sp/>be<sp/>applied&quot;</highlight><highlight class="normal">,fcn));}}</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"></highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>setvar(<ref refid="structobj" kindref="compound">LISP</ref><sp/>var,<ref refid="structobj" kindref="compound">LISP</ref><sp/>val,<ref refid="structobj" kindref="compound">LISP</ref><sp/>env)</highlight></codeline>
<codeline lineno="1752"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>tmp;</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NSYMBOLP(var)<sp/>err(&quot;wta(non-symbol)<sp/>to<sp/>setvar&quot;,var);</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/>tmp<sp/>=<sp/>envlookup(var,env);</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/>if<sp/>NULLP(tmp)<sp/>return(VCELL(var)<sp/>=<sp/>val);</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/>return(CAR(tmp)=val);}</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>leval_setq(<ref refid="structobj" kindref="compound">LISP</ref><sp/>args,<ref refid="structobj" kindref="compound">LISP</ref><sp/>env)</highlight></codeline>
<codeline lineno="1759"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(setvar(car(args),leval(car(cdr(args)),env),env));}</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"></highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>syntax_define(<ref refid="structobj" kindref="compound">LISP</ref><sp/>args)</highlight></codeline>
<codeline lineno="1762"><highlight class="normal">{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>SYMBOLP(car(args))<sp/>return(args);</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/>return(syntax_define(</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cons(car(car(args)),</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/>cons(cons(sym_lambda,</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cons(cdr(car(args)),</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdr(args))),</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NIL))));}</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>leval_define(<ref refid="structobj" kindref="compound">LISP</ref><sp/>args,<ref refid="structobj" kindref="compound">LISP</ref><sp/>env)</highlight></codeline>
<codeline lineno="1771"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>tmp,var,val;</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/>tmp<sp/>=<sp/>syntax_define(args);</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/>var<sp/>=<sp/>car(tmp);</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NSYMBOLP(var)<sp/>err(&quot;wta(non-symbol)<sp/>to<sp/>define&quot;,var);</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/>val<sp/>=<sp/>leval(car(cdr(tmp)),env);</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/>tmp<sp/>=<sp/>envlookup(var,env);</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/>if<sp/>NNULLP(tmp)<sp/>return(CAR(tmp)<sp/>=<sp/>val);</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/>if<sp/>NULLP(env)<sp/>return(VCELL(var)<sp/>=<sp/>val);</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/>tmp<sp/>=<sp/>car(env);</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/>setcar(tmp,cons(var,car(tmp)));</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/>setcdr(tmp,cons(val,cdr(tmp)));</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/>return(val);}</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>leval_if(<ref refid="structobj" kindref="compound">LISP</ref><sp/>*pform,<ref refid="structobj" kindref="compound">LISP</ref><sp/>*penv)</highlight></codeline>
<codeline lineno="1785"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>args,env;</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/>args<sp/>=<sp/>cdr(*pform);</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/>env<sp/>=<sp/>*penv;</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NNULLP(leval(car(args),env))<sp/></highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/>*pform<sp/>=<sp/>car(cdr(args));<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>*pform<sp/>=<sp/>car(cdr(cdr(args)));</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(sym_t);}</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"></highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>leval_lambda(<ref refid="structobj" kindref="compound">LISP</ref><sp/>args,<ref refid="structobj" kindref="compound">LISP</ref><sp/>env)</highlight></codeline>
<codeline lineno="1793"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>body;</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NULLP(cdr(cdr(args)))</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/>body<sp/>=<sp/>car(cdr(args));</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/>else<sp/>body<sp/>=<sp/>cons(sym_progn,cdr(args));</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/>return(closure(env,cons(arglchk(car(args)),body)));}</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>leval_progn(<ref refid="structobj" kindref="compound">LISP</ref><sp/>*pform,<ref refid="structobj" kindref="compound">LISP</ref><sp/>*penv)</highlight></codeline>
<codeline lineno="1800"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>env,l,next;</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/>env<sp/>=<sp/>*penv;</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/>l<sp/>=<sp/>cdr(*pform);</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/>next<sp/>=<sp/>cdr(l);</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(NNULLP(next))<sp/>{leval(car(l),env);l=next;next=cdr(next);}</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/>*pform<sp/>=<sp/>car(l);<sp/></highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(sym_t);}</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"></highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>leval_or(<ref refid="structobj" kindref="compound">LISP</ref><sp/>*pform,<ref refid="structobj" kindref="compound">LISP</ref><sp/>*penv)</highlight></codeline>
<codeline lineno="1809"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>env,l,next,val;</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/>env<sp/>=<sp/>*penv;</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/>l<sp/>=<sp/>cdr(*pform);</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/>next<sp/>=<sp/>cdr(l);</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(NNULLP(next))</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/>{val<sp/>=<sp/>leval(car(l),env);</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NNULLP(val)<sp/>{*pform<sp/>=<sp/>val;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/>l=next;next=cdr(next);}</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/>*pform<sp/>=<sp/>car(l);<sp/></highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(sym_t);}</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"></highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>leval_and(<ref refid="structobj" kindref="compound">LISP</ref><sp/>*pform,<ref refid="structobj" kindref="compound">LISP</ref><sp/>*penv)</highlight></codeline>
<codeline lineno="1821"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>env,l,next;</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/>env<sp/>=<sp/>*penv;</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/>l<sp/>=<sp/>cdr(*pform);</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NULLP(l)<sp/>{*pform<sp/>=<sp/>sym_t;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/>next<sp/>=<sp/>cdr(l);</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(NNULLP(next))</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NULLP(leval(car(l),env))<sp/>{*pform<sp/>=<sp/>NIL;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/>l=next;next=cdr(next);}</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/>*pform<sp/>=<sp/>car(l);<sp/></highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(sym_t);}</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"></highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>leval_catch_1(<ref refid="structobj" kindref="compound">LISP</ref><sp/>forms,<ref refid="structobj" kindref="compound">LISP</ref><sp/>env)</highlight></codeline>
<codeline lineno="1833"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>l,val<sp/>=<sp/>NIL;</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(l=forms;<sp/>NNULLP(l);<sp/>l<sp/>=<sp/>cdr(l))</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/>val<sp/>=<sp/>leval(car(l),env);</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/>catch_framep<sp/>=<sp/>catch_framep-&gt;next;</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(val);}</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"></highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>leval_catch(<ref refid="structobj" kindref="compound">LISP</ref><sp/>args,<ref refid="structobj" kindref="compound">LISP</ref><sp/>env)</highlight></codeline>
<codeline lineno="1840"><highlight class="normal">{</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcatch__frame" kindref="compound">catch_frame</ref><sp/>frame;</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k;</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/>frame.tag<sp/>=<sp/>leval(car(args),env);</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/>frame.next<sp/>=<sp/>catch_framep;</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/>k<sp/>=<sp/>setjmp(frame.cframe);</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/>catch_framep<sp/>=<sp/>&amp;frame;</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/>{catch_framep<sp/>=<sp/>frame.next;</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(frame.retval);}</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(leval_catch_1(cdr(args),env));}</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"></highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lthrow(<ref refid="structobj" kindref="compound">LISP</ref><sp/>tag,<ref refid="structobj" kindref="compound">LISP</ref><sp/>value)</highlight></codeline>
<codeline lineno="1852"><highlight class="normal">{</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcatch__frame" kindref="compound">catch_frame</ref><sp/>*l;</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(l=catch_framep;<sp/>l;<sp/>l<sp/>=<sp/>(*l).next)</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(EQ((*l).tag,tag)<sp/>||</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EQ((*l).tag,sym_catchall))</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{(*l).retval<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>longjmp((*l).cframe,2);}</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/>err(</highlight><highlight class="stringliteral">&quot;no<sp/>*catch<sp/>found<sp/>with<sp/>this<sp/>tag&quot;</highlight><highlight class="normal">,tag);</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"></highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>leval_let(<ref refid="structobj" kindref="compound">LISP</ref><sp/>*pform,<ref refid="structobj" kindref="compound">LISP</ref><sp/>*penv)</highlight></codeline>
<codeline lineno="1862"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>env,l;</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/>l<sp/>=<sp/>cdr(*pform);</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/>env<sp/>=<sp/>*penv;</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/>*penv<sp/>=<sp/>extend_env(leval_args(car(cdr(l)),env),car(l),env);</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/>*pform<sp/>=<sp/>car(cdr(cdr(l)));</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(sym_t);}</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"></highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>letstar_macro(<ref refid="structobj" kindref="compound">LISP</ref><sp/>form)</highlight></codeline>
<codeline lineno="1870"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>bindings<sp/>=<sp/>cadr(form);</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NNULLP(bindings)<sp/>&amp;&amp;<sp/>NNULLP(cdr(bindings)))</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/>setcdr(form,cons(cons(car(bindings),NIL),</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cons(cons(cintern(</highlight><highlight class="stringliteral">&quot;let*&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cons(cdr(bindings),</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cddr(form))),</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NIL)));</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/>setcar(form,cintern(</highlight><highlight class="stringliteral">&quot;let&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(form);}</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"></highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>letrec_macro(<ref refid="structobj" kindref="compound">LISP</ref><sp/>form)</highlight></codeline>
<codeline lineno="1881"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>letb,setb,l;</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(letb=NIL,setb=cddr(form),l=cadr(form);NNULLP(l);l=cdr(l))</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/>{letb<sp/>=<sp/>cons(cons(caar(l),NIL),letb);</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/>setb<sp/>=<sp/>cons(listn(3,cintern(</highlight><highlight class="stringliteral">&quot;set!&quot;</highlight><highlight class="normal">),caar(l),cadar(l)),setb);}</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/>setcdr(form,cons(letb,setb));</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/>setcar(form,cintern(</highlight><highlight class="stringliteral">&quot;let&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(form);}</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"></highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>reverse(<ref refid="structobj" kindref="compound">LISP</ref><sp/>l)</highlight></codeline>
<codeline lineno="1890"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>n,p;</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/>n<sp/>=<sp/>NIL;</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(p=l;NNULLP(p);p=cdr(p))<sp/>n<sp/>=<sp/>cons(car(p),n);</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(n);}</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"></highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>let_macro(<ref refid="structobj" kindref="compound">LISP</ref><sp/>form)</highlight></codeline>
<codeline lineno="1896"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>p,fl,al,tmp;</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/>fl<sp/>=<sp/>NIL;</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/>al<sp/>=<sp/>NIL;</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(p=car(cdr(form));NNULLP(p);p=cdr(p))</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/>{tmp<sp/>=<sp/>car(p);</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>SYMBOLP(tmp)<sp/>{fl<sp/>=<sp/>cons(tmp,fl);<sp/>al<sp/>=<sp/>cons(NIL,al);}</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{fl<sp/>=<sp/>cons(car(tmp),fl);<sp/>al<sp/>=<sp/>cons(car(cdr(tmp)),al);}}</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/>p<sp/>=<sp/>cdr(cdr(form));</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NULLP(cdr(p))<sp/>p<sp/>=<sp/>car(p);<sp/>else<sp/>p<sp/>=<sp/>cons(sym_progn,p);</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/>setcdr(form,cons(reverse(fl),cons(reverse(al),cons(p,NIL))));</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/>setcar(form,cintern(&quot;let-internal&quot;));</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/>return(form);}</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>leval_quote(<ref refid="structobj" kindref="compound">LISP</ref><sp/>args,<ref refid="structobj" kindref="compound">LISP</ref><sp/>env)</highlight></codeline>
<codeline lineno="1910"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(car(args));}</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"></highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>leval_tenv(<ref refid="structobj" kindref="compound">LISP</ref><sp/>args,<ref refid="structobj" kindref="compound">LISP</ref><sp/>env)</highlight></codeline>
<codeline lineno="1913"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(env);}</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"></highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>leval_while(<ref refid="structobj" kindref="compound">LISP</ref><sp/>args,<ref refid="structobj" kindref="compound">LISP</ref><sp/>env)</highlight></codeline>
<codeline lineno="1916"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>l;</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>NNULLP(leval(car(args),env))</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/>for(l=cdr(args);NNULLP(l);l=cdr(l))</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>leval(car(l),env);</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/>return(NIL);}</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"></highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>symbolconc(<ref refid="structobj" kindref="compound">LISP</ref><sp/>args)</highlight></codeline>
<codeline lineno="1923"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>l,s;</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/>size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/>tkbuffer[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(l=args;NNULLP(l);l=cdr(l))</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/>{s<sp/>=<sp/>car(l);</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NSYMBOLP(s)<sp/>err(&quot;wta(non-symbol)<sp/>to<sp/>symbolconc&quot;,s);</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/>size<sp/>=<sp/>size<sp/>+<sp/>strlen(PNAME(s));</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(size<sp/>&gt;<sp/><sp/>TKBUFFERN)<sp/>err(&quot;symbolconc<sp/>buffer<sp/>overflow&quot;,NIL);</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/>strcat(tkbuffer,PNAME(s));}</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/>return(rintern(tkbuffer));}</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"></highlight></codeline>
<codeline lineno="1935"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_print_hooks(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>type,</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*fcn)(<ref refid="structobj" kindref="compound">LISP</ref>,struct<sp/><ref refid="structgen__printio" kindref="compound">gen_printio</ref><sp/>*))</highlight></codeline>
<codeline lineno="1936"><highlight class="normal">{</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structuser__type__hooks" kindref="compound">user_type_hooks</ref><sp/>*p;</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/>p<sp/>=<sp/>get_user_type_hooks(type);</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/>p-&gt;prin1<sp/>=<sp/>fcn;}</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"></highlight></codeline>
<codeline lineno="1940"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*subr_kind_str(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="1941"><highlight class="normal">{</highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(n)</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_0:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;subr_0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_1:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;subr_1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_2:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;subr_2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_2n:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;subr_2n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_3:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;subr_3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_4:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;subr_4&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_5:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;subr_5&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_lsubr:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;lsubr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_fsubr:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;fsubr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_msubr:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;msubr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;???&quot;</highlight><highlight class="normal">);}}</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"></highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lprin1g(<ref refid="structobj" kindref="compound">LISP</ref><sp/>exp,</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgen__printio" kindref="compound">gen_printio</ref><sp/>*f)</highlight></codeline>
<codeline lineno="1955"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>tmp;</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structuser__type__hooks" kindref="compound">user_type_hooks</ref><sp/>*p;</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/>STACK_CHECK(&amp;exp);</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/>INTERRUPT_CHECK();</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>TYPE(exp)</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_nil:</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gput_st(f,</highlight><highlight class="stringliteral">&quot;()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_cons:</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gput_st(f,</highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lprin1g(car(exp),f);</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(tmp=cdr(exp);CONSP(tmp);tmp=cdr(tmp))</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/>{gput_st(f,</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);lprin1g(car(tmp),f);}</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NNULLP(tmp)<sp/>{gput_st(f,</highlight><highlight class="stringliteral">&quot;<sp/>.<sp/>&quot;</highlight><highlight class="normal">);lprin1g(tmp,f);}</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gput_st(f,</highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_flonum:</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>(long)<sp/>FLONM(exp);</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>n)<sp/>==<sp/>FLONM(exp))</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(tkbuffer,</highlight><highlight class="stringliteral">&quot;%ld&quot;</highlight><highlight class="normal">,n);</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(tkbuffer,</highlight><highlight class="stringliteral">&quot;%g&quot;</highlight><highlight class="normal">,FLONM(exp));</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gput_st(f,tkbuffer);</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_symbol:</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gput_st(f,PNAME(exp));</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_0:</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_1:</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_2:</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_2n:</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_3:</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_4:</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_5:</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_lsubr:</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_fsubr:</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_msubr:</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(tkbuffer,</highlight><highlight class="stringliteral">&quot;#&lt;%s<sp/>&quot;</highlight><highlight class="normal">,subr_kind_str(TYPE(exp)));</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gput_st(f,tkbuffer);</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gput_st(f,(*exp).storage_as.subr.name);</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gput_st(f,</highlight><highlight class="stringliteral">&quot;&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_closure:</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gput_st(f,</highlight><highlight class="stringliteral">&quot;#&lt;CLOSURE<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>CONSP((*exp).storage_as.closure.code)</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/>{lprin1g(car((*exp).storage_as.closure.code),f);</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>gput_st(f,</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>lprin1g(cdr((*exp).storage_as.closure.code),f);}</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/><sp/><sp/>lprin1g((*exp).storage_as.closure.code,f);</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gput_st(f,</highlight><highlight class="stringliteral">&quot;&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>get_user_type_hooks(TYPE(exp));</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p-&gt;prin1)</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/><sp/><sp/>(*p-&gt;prin1)(exp,f);</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/><sp/><sp/>{sprintf(tkbuffer,</highlight><highlight class="stringliteral">&quot;#&lt;UNKNOWN<sp/>%d<sp/>%p&gt;&quot;</highlight><highlight class="normal">,TYPE(exp),exp);</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>gput_st(f,tkbuffer);}}</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"></highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lprint(<ref refid="structobj" kindref="compound">LISP</ref><sp/>exp,<ref refid="structobj" kindref="compound">LISP</ref><sp/>lf)</highlight></codeline>
<codeline lineno="2018"><highlight class="normal">{FILE<sp/>*f<sp/>=<sp/>get_c_file(lf,stdout);</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/>lprin1f(exp,f);</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/>fput_st(f,</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"></highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lprin1(<ref refid="structobj" kindref="compound">LISP</ref><sp/>exp,<ref refid="structobj" kindref="compound">LISP</ref><sp/>lf)</highlight></codeline>
<codeline lineno="2024"><highlight class="normal">{FILE<sp/>*f<sp/>=<sp/>get_c_file(lf,stdout);</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/>lprin1f(exp,f);</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"></highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lprin1f(<ref refid="structobj" kindref="compound">LISP</ref><sp/>exp,FILE<sp/>*f)</highlight></codeline>
<codeline lineno="2029"><highlight class="normal">{</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgen__printio" kindref="compound">gen_printio</ref><sp/>s;</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/>s.putc_fcn<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/>s.puts_fcn<sp/>=<sp/>fputs_fcn;</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/>s.cb_argument<sp/>=<sp/>f;</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/>lprin1g(exp,&amp;s);</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"></highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lread(<ref refid="structobj" kindref="compound">LISP</ref><sp/>f)</highlight></codeline>
<codeline lineno="2037"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(lreadf(get_c_file(f,stdin)));}</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"></highlight></codeline>
<codeline lineno="2039"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>f_getc(FILE<sp/>*f)</highlight></codeline>
<codeline lineno="2040"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>iflag,dflag;</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/>iflag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/>dflag<sp/>=<sp/>interrupt_differed;</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/>c<sp/>=<sp/>getc(f);</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VMS</highlight></codeline>
<codeline lineno="2046"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((dflag<sp/>==<sp/>0)<sp/>&amp;<sp/>interrupt_differed<sp/>&amp;<sp/>(f<sp/>==<sp/>stdin))</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">((c<sp/>!=<sp/>0)<sp/>&amp;<sp/>(c<sp/>!=<sp/>EOF))<sp/>c<sp/>=<sp/>getc(f);</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2049"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>no_interrupt(iflag);</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(c);}</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"></highlight></codeline>
<codeline lineno="2052"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>f_ungetc(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c,<sp/>FILE<sp/>*f)</highlight></codeline>
<codeline lineno="2053"><highlight class="normal">{ungetc(c,f);}</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"></highlight></codeline>
<codeline lineno="2055"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flush_ws(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgen__readio" kindref="compound">gen_readio</ref><sp/>*f,</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*eoferr)</highlight></codeline>
<codeline lineno="2056"><highlight class="normal">{</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c,commentp;</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/>commentp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(1)</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/><sp/>{c<sp/>=<sp/>GETC_FCN(f);</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>EOF)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eoferr)<sp/>err(eoferr,NIL);<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(c);</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(commentp)<sp/>{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)<sp/>commentp<sp/>=<sp/>0;}</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;;&apos;</highlight><highlight class="normal">)<sp/>commentp<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isspace(c))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(c);}}</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"></highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lreadf(FILE<sp/>*f)</highlight></codeline>
<codeline lineno="2066"><highlight class="normal">{</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgen__readio" kindref="compound">gen_readio</ref><sp/>s;</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/>s.getc_fcn<sp/>=<sp/>(int<sp/>(*)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))<sp/>f_getc;</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/>s.ungetc_fcn<sp/>=<sp/>(void<sp/>(*)(int,</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))<sp/>f_ungetc;</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/>s.cb_argument<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>f;</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(readtl(&amp;s));}</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"></highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>readtl(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgen__readio" kindref="compound">gen_readio</ref><sp/>*f)</highlight></codeline>
<codeline lineno="2073"><highlight class="normal">{</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/>c<sp/>=<sp/>flush_ws(f,(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)NULL);</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>EOF)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(eof_val);</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/>UNGETC_FCN(c,f);</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(lreadr(f));}</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"></highlight></codeline>
<codeline lineno="2079"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_read_hooks(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*all_set,</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*end_set,</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>(*fcn1)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgen__readio" kindref="compound">gen_readio</ref><sp/>*),</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>(*fcn2)(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*))</highlight></codeline>
<codeline lineno="2082"><highlight class="normal">{user_ch_readm<sp/>=<sp/>all_set;</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/>user_te_readm<sp/>=<sp/>end_set;</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/>user_readm<sp/>=<sp/>fcn1;</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/>user_readt<sp/>=<sp/>fcn2;}</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"></highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lreadr(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgen__readio" kindref="compound">gen_readio</ref><sp/>*f)</highlight></codeline>
<codeline lineno="2088"><highlight class="normal">{</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c,j;</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p,*buffer=tkbuffer;</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/>STACK_CHECK(&amp;f);</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/>p<sp/>=<sp/>buffer;</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/>c<sp/>=<sp/>flush_ws(f,</highlight><highlight class="stringliteral">&quot;end<sp/>of<sp/>file<sp/>inside<sp/>read&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(c)</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;(&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(lreadparen(f));</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;unexpected<sp/>close<sp/>paren&quot;</highlight><highlight class="normal">,NIL);</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\&apos;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(cons(sym_quote,cons(lreadr(f),NIL)));</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;`&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(cons(cintern(</highlight><highlight class="stringliteral">&quot;+internal-backquote&quot;</highlight><highlight class="normal">),lreadr(f)));</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>GETC_FCN(f);</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(c)</highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;@&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;+internal-comma-atsign&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;+internal-comma-dot&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;+internal-comma&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UNGETC_FCN(c,f);}</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(cons(cintern(p),lreadr(f)));</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(lreadstring(f));</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;#&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(lreadsharp(f));</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((user_readm<sp/>!=<sp/>NULL)<sp/>&amp;&amp;<sp/>strchr(user_ch_readm,c))</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">((*user_readm)(c,f));}</highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/>*p++<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j<sp/>=<sp/>1;<sp/>j&lt;TKBUFFERN;<sp/>++j)</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/><sp/>{c<sp/>=<sp/>GETC_FCN(f);</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>EOF)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(lreadtk(buffer,j));</highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isspace(c))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(lreadtk(buffer,j));</highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strchr(</highlight><highlight class="stringliteral">&quot;()&apos;`,;\&quot;&quot;</highlight><highlight class="normal">,c)<sp/>||<sp/>strchr(user_te_readm,c))</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{UNGETC_FCN(c,f);</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(lreadtk(buffer,j));}</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/><sp/><sp/>*p++<sp/>=<sp/>c;}</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(err(</highlight><highlight class="stringliteral">&quot;token<sp/>larger<sp/>than<sp/>TKBUFFERN&quot;</highlight><highlight class="normal">,NIL));}</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"></highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lreadparen(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgen__readio" kindref="compound">gen_readio</ref><sp/>*f)</highlight></codeline>
<codeline lineno="2133"><highlight class="normal">{</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>tmp;</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/>c<sp/>=<sp/>flush_ws(f,</highlight><highlight class="stringliteral">&quot;end<sp/>of<sp/>file<sp/>inside<sp/>list&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/>UNGETC_FCN(c,f);</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/>tmp<sp/>=<sp/>lreadr(f);</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>EQ(tmp,sym_dot)</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/><sp/>{tmp<sp/>=<sp/>lreadr(f);</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>flush_ws(f,</highlight><highlight class="stringliteral">&quot;end<sp/>of<sp/>file<sp/>inside<sp/>list&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal">)<sp/>err(</highlight><highlight class="stringliteral">&quot;missing<sp/>close<sp/>paren&quot;</highlight><highlight class="normal">,NIL);</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(tmp);}</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(cons(tmp,lreadparen(f)));}</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"></highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lreadtk(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buffer,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>j)</highlight></codeline>
<codeline lineno="2147"><highlight class="normal">{</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flag;</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>tmp;</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>adigit;</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p<sp/>=<sp/>buffer;</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/>p[j]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(user_readt<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/><sp/><sp/>{tmp<sp/>=<sp/>(*user_readt)(p,j,&amp;flag);</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flag)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(tmp);}</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*p<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">)<sp/>p+=1;</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/>adigit<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(isdigit(*p))<sp/>{p+=1;<sp/>adigit=1;}</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*p==</highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/>{p<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(isdigit(*p))<sp/>{p+=1;<sp/>adigit=1;}}</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!adigit)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>a_symbol;</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*p==</highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/><sp/>{p+=1;</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*p==</highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">||*p==</highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">)<sp/>p+=1;</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isdigit(*p))<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>a_symbol;<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>p+=1;</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(isdigit(*p))<sp/>p+=1;}</highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*p)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>a_symbol;</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(atof(buffer)));</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/>a_symbol:</highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(rintern(buffer));}</highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>copy_list(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x)</highlight></codeline>
<codeline lineno="2173"><highlight class="normal">{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NULLP(x)<sp/>return(NIL);</highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/>STACK_CHECK(&amp;x);</highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/>return(cons(car(x),copy_list(cdr(x))));}</highlight></codeline>
<codeline lineno="2176"><highlight class="normal"></highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>apropos(<ref refid="structobj" kindref="compound">LISP</ref><sp/>matchl)</highlight></codeline>
<codeline lineno="2178"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>result<sp/>=<sp/>NIL,l,ml;</highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pname;</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(l=oblistvar;CONSP(l);l=CDR(l))</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/><sp/>{pname<sp/>=<sp/>get_c_string(CAR(l));</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/><sp/><sp/>ml=matchl;</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(CONSP(ml)<sp/>&amp;&amp;<sp/>strstr(pname,get_c_string(CAR(ml))))</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ml=CDR(ml);</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NULLP(ml)</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>cons(CAR(l),result);}</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/>return(result);}</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"></highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>fopen_cg(FILE<sp/>*(*fcn)(const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*),</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*how)</highlight></codeline>
<codeline lineno="2190"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>sym;</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>flag;</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>errmsg[256];</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/>flag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"><sp/>sym<sp/>=<sp/>newcell(tc_c_file);</highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><sp/>sym-&gt;storage_as.c_file.f<sp/>=<sp/>(FILE<sp/>*)NULL;</highlight></codeline>
<codeline lineno="2196"><highlight class="normal"><sp/>sym-&gt;storage_as.c_file.name<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)NULL;</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(sym-&gt;storage_as.c_file.f<sp/>=<sp/>(*fcn)(name,how)))</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/><sp/>{SAFE_STRCPY(errmsg,</highlight><highlight class="stringliteral">&quot;could<sp/>not<sp/>open<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/><sp/><sp/>SAFE_STRCAT(errmsg,name);</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/><sp/><sp/>err(errmsg,llast_c_errmsg(-1));}</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/>sym-&gt;storage_as.c_file.name<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>must_malloc(strlen(name)+1);</highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/>strcpy(sym-&gt;storage_as.c_file.name,name);</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/>no_interrupt(flag);</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(sym);}</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"></highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>fopen_c(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*how)</highlight></codeline>
<codeline lineno="2207"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(fopen_cg(fopen,name,how));}</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"></highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>fopen_l(<ref refid="structobj" kindref="compound">LISP</ref><sp/>name,<ref refid="structobj" kindref="compound">LISP</ref><sp/>how)</highlight></codeline>
<codeline lineno="2210"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(fopen_c(get_c_string(name),NULLP(how)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>:<sp/>get_c_string(how)));}</highlight></codeline>
<codeline lineno="2211"><highlight class="normal"></highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>delq(<ref refid="structobj" kindref="compound">LISP</ref><sp/>elem,<ref refid="structobj" kindref="compound">LISP</ref><sp/>l)</highlight></codeline>
<codeline lineno="2213"><highlight class="normal">{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NULLP(l)<sp/>return(l);</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/>STACK_CHECK(&amp;elem);</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/>if<sp/>EQ(elem,car(l))<sp/>return(delq(elem,cdr(l)));</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/>setcdr(l,delq(elem,cdr(l)));</highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/>return(l);}</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"></highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>fclose_l(<ref refid="structobj" kindref="compound">LISP</ref><sp/>p)</highlight></codeline>
<codeline lineno="2220"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>flag;</highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/>flag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NTYPEP(p,tc_c_file)<sp/>err(&quot;not<sp/>a<sp/>file&quot;,p);</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/>file_gc_free(p);</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/>no_interrupt(flag);</highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/>return(NIL);}</highlight></codeline>
<codeline lineno="2226"><highlight class="normal"></highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>vload(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ofname,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>cflag,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>rflag)</highlight></codeline>
<codeline lineno="2228"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>form,result,tail,lf,reader<sp/>=<sp/>NIL;</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/>FILE<sp/>*f;</highlight></codeline>
<codeline lineno="2230"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>j,len;</highlight></codeline>
<codeline lineno="2232"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[512],*key<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;parser:&quot;</highlight><highlight class="normal">,*start,*end,*ftype=</highlight><highlight class="stringliteral">&quot;.scm&quot;</highlight><highlight class="normal">,*fname;</highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((start<sp/>=<sp/>strchr(ofname,VLOAD_OFFSET_HACK_CHAR)))</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/>{len<sp/>=<sp/>atol(ofname);</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/><sp/>fname<sp/>=<sp/>&amp;start[1];}</highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/><sp/>{len<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/><sp/>fname<sp/>=<sp/>ofname;}</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rflag)</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iflag;</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/><sp/><sp/>iflag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((f<sp/>=<sp/>fopen(fname,</highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">)))</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fclose(f);</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((fname[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((strlen(siod_lib)<sp/>+<sp/>strlen(fname)<sp/>+<sp/>1)</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buffer)))</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{strcpy(buffer,siod_lib);</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>unix</highlight></codeline>
<codeline lineno="2249"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcat(buffer,</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2251"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcat(buffer,fname);</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((f<sp/>=<sp/>fopen(buffer,</highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">)))</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{fname<sp/>=<sp/>buffer;</highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fclose(f);}}</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/><sp/><sp/>no_interrupt(iflag);}</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(siod_verbose_level<sp/>&gt;=<sp/>3)</highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/><sp/>{put_st(</highlight><highlight class="stringliteral">&quot;loading<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2258"><highlight class="normal"><sp/><sp/><sp/><sp/>put_st(fname);</highlight></codeline>
<codeline lineno="2259"><highlight class="normal"><sp/><sp/><sp/><sp/>put_st(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);}</highlight></codeline>
<codeline lineno="2260"><highlight class="normal"><sp/>lf<sp/>=<sp/>fopen_c(fname,(len)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/>f<sp/>=<sp/>lf-&gt;storage_as.c_file.f;</highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/>result<sp/>=<sp/>NIL;</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/>tail<sp/>=<sp/>NIL;</highlight></codeline>
<codeline lineno="2264"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;j&lt;len;++j)<sp/>getc(f);</highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/>buffer[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><sp/>c<sp/>=<sp/>getc(f);</highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">((c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;#&apos;</highlight><highlight class="normal">)<sp/>||<sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;;&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(((c<sp/>=<sp/>getc(f))<sp/>!=<sp/>EOF)<sp/>&amp;&amp;<sp/>(c<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((j+1)&lt;</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buffer))</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/><sp/><sp/>{buffer[j]<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>buffer[++j]<sp/>=<sp/>0;}</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>getc(f);}</highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>!=<sp/>EOF)</highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/><sp/>ungetc(c,f);</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((start<sp/>=<sp/>strstr(buffer,key)))</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(end<sp/>=<sp/>&amp;start[strlen(key)];</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/><sp/><sp/>*end<sp/>&amp;&amp;<sp/>isalnum(*end);</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/><sp/><sp/>++end);</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/><sp/><sp/>j<sp/>=<sp/>end<sp/>-<sp/>start;</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(buffer,start,j);</highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer[strlen(key)-1]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;_&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer[j]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/><sp/><sp/>strcat(buffer,ftype);</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/><sp/><sp/>require(strcons(-1,buffer));</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer[j]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/><sp/><sp/>reader<sp/>=<sp/>rintern(buffer);</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/><sp/><sp/>reader<sp/>=<sp/>funcall1(leval(reader,NIL),reader);</highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(siod_verbose_level<sp/>&gt;=<sp/>5)</highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{put_st(</highlight><highlight class="stringliteral">&quot;parser:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lprin1(reader,NIL);</highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>put_st(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);}}</highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(1)</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/>{form<sp/>=<sp/>NULLP(reader)<sp/>?<sp/>lread(lf)<sp/>:<sp/>funcall1(reader,lf);</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>EQ(form,eof_val)<sp/>break;</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(siod_verbose_level<sp/>&gt;=<sp/>5)</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lprint(form,NIL);</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(cflag)</highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{form<sp/>=<sp/>cons(form,NIL);</highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NULLP(result)</highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>tail<sp/>=<sp/>form;</highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>tail<sp/>=<sp/>setcdr(tail,form);}</highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>leval(form,NIL);}</highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/>fclose_l(lf);</highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/>if<sp/>(siod_verbose_level<sp/>&gt;=<sp/>3)</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/><sp/>put_st(&quot;done.\n&quot;);</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/>return(result);}</highlight></codeline>
<codeline lineno="2311"><highlight class="normal"></highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>load(<ref refid="structobj" kindref="compound">LISP</ref><sp/>fname,<ref refid="structobj" kindref="compound">LISP</ref><sp/>cflag,<ref refid="structobj" kindref="compound">LISP</ref><sp/>rflag)</highlight></codeline>
<codeline lineno="2313"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(vload(get_c_string(fname),NULLP(cflag)<sp/>?<sp/>0<sp/>:<sp/>1,NULLP(rflag)<sp/>?<sp/>0<sp/>:<sp/>1));}</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"></highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>require(<ref refid="structobj" kindref="compound">LISP</ref><sp/>fname)</highlight></codeline>
<codeline lineno="2316"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>sym;</highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/>sym<sp/>=<sp/>intern(string_append(cons(cintern(</highlight><highlight class="stringliteral">&quot;*&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cons(fname,</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cons(cintern(</highlight><highlight class="stringliteral">&quot;-loaded*&quot;</highlight><highlight class="normal">),NIL)))));</highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NULLP(symbol_boundp(sym,NIL))<sp/>||</highlight></codeline>
<codeline lineno="2321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>NULLP(symbol_value(sym,NIL)))</highlight></codeline>
<codeline lineno="2322"><highlight class="normal"><sp/><sp/><sp/>{load(fname,NIL,sym_t);</highlight></codeline>
<codeline lineno="2323"><highlight class="normal"><sp/><sp/><sp/><sp/>setvar(sym,sym_t,NIL);}</highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(sym);}</highlight></codeline>
<codeline lineno="2325"><highlight class="normal"></highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>save_forms(<ref refid="structobj" kindref="compound">LISP</ref><sp/>fname,<ref refid="structobj" kindref="compound">LISP</ref><sp/>forms,<ref refid="structobj" kindref="compound">LISP</ref><sp/>how)</highlight></codeline>
<codeline lineno="2327"><highlight class="normal">{</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cname,*chow<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>l,lf;</highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/>FILE<sp/>*f;</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/>cname<sp/>=<sp/>get_c_string(fname);</highlight></codeline>
<codeline lineno="2331"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>EQ(how,NIL)<sp/>chow<sp/>=<sp/>&quot;w&quot;;</highlight></codeline>
<codeline lineno="2332"><highlight class="normal"><sp/>else<sp/>if<sp/>EQ(how,cintern(&quot;a&quot;))<sp/>chow<sp/>=<sp/>&quot;a&quot;;</highlight></codeline>
<codeline lineno="2333"><highlight class="normal"><sp/>else<sp/>err(&quot;bad<sp/>argument<sp/>to<sp/>save-forms&quot;,how);</highlight></codeline>
<codeline lineno="2334"><highlight class="normal"><sp/>if<sp/>(siod_verbose_level<sp/>&gt;=<sp/>3)</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/><sp/>{put_st((*chow<sp/>==<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;appending&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;saving&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/><sp/><sp/>put_st(</highlight><highlight class="stringliteral">&quot;<sp/>forms<sp/>to<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"><sp/><sp/><sp/><sp/>put_st(cname);</highlight></codeline>
<codeline lineno="2338"><highlight class="normal"><sp/><sp/><sp/><sp/>put_st(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);}</highlight></codeline>
<codeline lineno="2339"><highlight class="normal"><sp/>lf<sp/>=<sp/>fopen_c(cname,chow);</highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/>f<sp/>=<sp/>lf-&gt;storage_as.c_file.f;</highlight></codeline>
<codeline lineno="2341"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(l=forms;NNULLP(l);l=cdr(l))</highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><sp/><sp/><sp/>{lprin1f(car(l),f);</highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/><sp/><sp/>putc(</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">,f);}</highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/>fclose_l(lf);</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(siod_verbose_level<sp/>&gt;=<sp/>3)</highlight></codeline>
<codeline lineno="2346"><highlight class="normal"><sp/><sp/><sp/>put_st(</highlight><highlight class="stringliteral">&quot;done.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(sym_t);}</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"></highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>quit(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2350"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(err(NULL,NIL));}</highlight></codeline>
<codeline lineno="2351"><highlight class="normal"></highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>nullp(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x)</highlight></codeline>
<codeline lineno="2353"><highlight class="normal">{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>EQ(x,NIL)<sp/>return(sym_t);<sp/>else<sp/>return(NIL);}</highlight></codeline>
<codeline lineno="2354"><highlight class="normal"></highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>arglchk(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x)</highlight></codeline>
<codeline lineno="2356"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2357"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(!ENVLOOKUP_TRICK)</highlight></codeline>
<codeline lineno="2358"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>l;</highlight></codeline>
<codeline lineno="2359"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>SYMBOLP(x)<sp/>return(x);</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/>for(l=x;CONSP(l);l=CDR(l));</highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/>if<sp/>NNULLP(l)<sp/>err(&quot;improper<sp/>formal<sp/>argument<sp/>list&quot;,x);</highlight></codeline>
<codeline lineno="2362"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2363"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(x);}</highlight></codeline>
<codeline lineno="2364"><highlight class="normal"></highlight></codeline>
<codeline lineno="2365"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>file_gc_free(<ref refid="structobj" kindref="compound">LISP</ref><sp/>ptr)</highlight></codeline>
<codeline lineno="2366"><highlight class="normal">{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr-&gt;storage_as.c_file.f)</highlight></codeline>
<codeline lineno="2367"><highlight class="normal"><sp/><sp/><sp/>{fclose(ptr-&gt;storage_as.c_file.f);</highlight></codeline>
<codeline lineno="2368"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr-&gt;storage_as.c_file.f<sp/>=<sp/>(FILE<sp/>*)<sp/>NULL;}</highlight></codeline>
<codeline lineno="2369"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr-&gt;storage_as.c_file.name)</highlight></codeline>
<codeline lineno="2370"><highlight class="normal"><sp/><sp/><sp/>{free(ptr-&gt;storage_as.c_file.name);</highlight></codeline>
<codeline lineno="2371"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr-&gt;storage_as.c_file.name<sp/>=<sp/>NULL;}}</highlight></codeline>
<codeline lineno="2372"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2373"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>file_prin1(<ref refid="structobj" kindref="compound">LISP</ref><sp/>ptr,</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgen__printio" kindref="compound">gen_printio</ref><sp/>*f)</highlight></codeline>
<codeline lineno="2374"><highlight class="normal">{</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name;</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/>name<sp/>=<sp/>ptr-&gt;storage_as.c_file.name;</highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/>gput_st(f,</highlight><highlight class="stringliteral">&quot;#&lt;FILE<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2377"><highlight class="normal"><sp/>sprintf(tkbuffer,</highlight><highlight class="stringliteral">&quot;<sp/>%p&quot;</highlight><highlight class="normal">,ptr-&gt;storage_as.c_file.f);</highlight></codeline>
<codeline lineno="2378"><highlight class="normal"><sp/>gput_st(f,tkbuffer);</highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name)</highlight></codeline>
<codeline lineno="2380"><highlight class="normal"><sp/><sp/><sp/>{gput_st(f,</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/><sp/><sp/>gput_st(f,name);}</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/>gput_st(f,</highlight><highlight class="stringliteral">&quot;&gt;&quot;</highlight><highlight class="normal">);}</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"></highlight></codeline>
<codeline lineno="2384"><highlight class="normal">FILE<sp/>*get_c_file(<ref refid="structobj" kindref="compound">LISP</ref><sp/>p,FILE<sp/>*deflt)</highlight></codeline>
<codeline lineno="2385"><highlight class="normal">{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NULLP(p)<sp/>&amp;&amp;<sp/>deflt)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(deflt);</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NTYPEP(p,tc_c_file)<sp/>err(&quot;not<sp/>a<sp/>file&quot;,p);</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/>if<sp/>(!p-&gt;storage_as.c_file.f)<sp/>err(&quot;file<sp/>is<sp/>closed&quot;,p);</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/>return(p-&gt;storage_as.c_file.f);}</highlight></codeline>
<codeline lineno="2389"><highlight class="normal"></highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lgetc(<ref refid="structobj" kindref="compound">LISP</ref><sp/>p)</highlight></codeline>
<codeline lineno="2391"><highlight class="normal">{</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/>i<sp/>=<sp/>f_getc(get_c_file(p,stdin));</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">((i<sp/>==<sp/>EOF)<sp/>?<sp/>NIL<sp/>:<sp/>flocons((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)i));}</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"></highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lungetc(<ref refid="structobj" kindref="compound">LISP</ref><sp/>ii,<ref refid="structobj" kindref="compound">LISP</ref><sp/>p)</highlight></codeline>
<codeline lineno="2396"><highlight class="normal">{</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NNULLP(ii)</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/><sp/>{i<sp/>=<sp/>get_c_long(ii);</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/><sp/><sp/>f_ungetc(i,get_c_file(p,stdin));}</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"></highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lputc(<ref refid="structobj" kindref="compound">LISP</ref><sp/>c,<ref refid="structobj" kindref="compound">LISP</ref><sp/>p)</highlight></codeline>
<codeline lineno="2403"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>flag;</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2405"><highlight class="normal"><sp/>FILE<sp/>*f;</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/>f<sp/>=<sp/>get_c_file(p,stdout);</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>FLONUMP(c)</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/><sp/>i<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)FLONM(c);</highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/>else</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/><sp/>i<sp/>=<sp/>*get_c_string(c);</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/>flag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/>putc(i,f);</highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/>no_interrupt(flag);</highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/>return(NIL);}</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lputs(<ref refid="structobj" kindref="compound">LISP</ref><sp/>str,<ref refid="structobj" kindref="compound">LISP</ref><sp/>p)</highlight></codeline>
<codeline lineno="2417"><highlight class="normal">{fput_st(get_c_file(p,stdout),get_c_string(str));</highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="2419"><highlight class="normal"></highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lftell(<ref refid="structobj" kindref="compound">LISP</ref><sp/>file)</highlight></codeline>
<codeline lineno="2421"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)ftell(get_c_file(file,NULL))));}</highlight></codeline>
<codeline lineno="2422"><highlight class="normal"></highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lfseek(<ref refid="structobj" kindref="compound">LISP</ref><sp/>file,<ref refid="structobj" kindref="compound">LISP</ref><sp/>offset,<ref refid="structobj" kindref="compound">LISP</ref><sp/>direction)</highlight></codeline>
<codeline lineno="2424"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">((fseek(get_c_file(file,NULL),get_c_long(offset),get_c_long(direction)))</highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/><sp/><sp/>?<sp/>NIL<sp/>:<sp/>sym_t);}</highlight></codeline>
<codeline lineno="2426"><highlight class="normal"></highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>parse_number(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x)</highlight></codeline>
<codeline lineno="2428"><highlight class="normal">{</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c;</highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/>c<sp/>=<sp/>get_c_string(x);</highlight></codeline>
<codeline lineno="2430"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(atof(c)));}</highlight></codeline>
<codeline lineno="2431"><highlight class="normal"></highlight></codeline>
<codeline lineno="2432"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__stdcall<sp/>init_subrs(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2433"><highlight class="normal">{init_subrs_1();</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/>init_subrs_a();}</highlight></codeline>
<codeline lineno="2435"><highlight class="normal"></highlight></codeline>
<codeline lineno="2436"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>closure_code(<ref refid="structobj" kindref="compound">LISP</ref><sp/>exp)</highlight></codeline>
<codeline lineno="2437"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(exp-&gt;storage_as.closure.code);}</highlight></codeline>
<codeline lineno="2438"><highlight class="normal"></highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>closure_env(<ref refid="structobj" kindref="compound">LISP</ref><sp/>exp)</highlight></codeline>
<codeline lineno="2440"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(exp-&gt;storage_as.closure.env);}</highlight></codeline>
<codeline lineno="2441"><highlight class="normal"></highlight></codeline>
<codeline lineno="2442"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lwhile(<ref refid="structobj" kindref="compound">LISP</ref><sp/>form,<ref refid="structobj" kindref="compound">LISP</ref><sp/>env)</highlight></codeline>
<codeline lineno="2443"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>l;</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(NNULLP(leval(car(form),env)))</highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(l=cdr(form);NNULLP(l);l=cdr(l))</highlight></codeline>
<codeline lineno="2446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>leval(car(l),env);</highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="2448"><highlight class="normal"></highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>nreverse(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x)</highlight></codeline>
<codeline lineno="2450"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>newp,oldp,nextp;</highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/>newp<sp/>=<sp/>NIL;</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(oldp=x;CONSP(oldp);oldp=nextp)</highlight></codeline>
<codeline lineno="2453"><highlight class="normal"><sp/><sp/>{nextp=CDR(oldp);</highlight></codeline>
<codeline lineno="2454"><highlight class="normal"><sp/><sp/><sp/>CDR(oldp)<sp/>=<sp/>newp;</highlight></codeline>
<codeline lineno="2455"><highlight class="normal"><sp/><sp/><sp/>newp<sp/>=<sp/>oldp;}</highlight></codeline>
<codeline lineno="2456"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(newp);}</highlight></codeline>
<codeline lineno="2457"><highlight class="normal"></highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>siod_verbose(<ref refid="structobj" kindref="compound">LISP</ref><sp/>arg)</highlight></codeline>
<codeline lineno="2459"><highlight class="normal">{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NNULLP(arg)</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/><sp/><sp/>siod_verbose_level<sp/>=<sp/>get_c_long(car(arg));</highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/>return(flocons(siod_verbose_level));}</highlight></codeline>
<codeline lineno="2462"><highlight class="normal"></highlight></codeline>
<codeline lineno="2463"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__stdcall<sp/>siod_verbose_check(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level)</highlight></codeline>
<codeline lineno="2464"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">((siod_verbose_level<sp/>&gt;=<sp/>level)<sp/>?<sp/>1<sp/>:<sp/>0);}</highlight></codeline>
<codeline lineno="2465"><highlight class="normal"></highlight></codeline>
<codeline lineno="2466"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lruntime(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2467"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(cons(flocons(myruntime()),</highlight></codeline>
<codeline lineno="2468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cons(flocons(gc_time_taken),NIL)));}</highlight></codeline>
<codeline lineno="2469"><highlight class="normal"></highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lrealtime(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2471"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(myrealtime()));}</highlight></codeline>
<codeline lineno="2472"><highlight class="normal"></highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>caar(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x)</highlight></codeline>
<codeline lineno="2474"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(car(car(x)));}</highlight></codeline>
<codeline lineno="2475"><highlight class="normal"></highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>cadr(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x)</highlight></codeline>
<codeline lineno="2477"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(car(cdr(x)));}</highlight></codeline>
<codeline lineno="2478"><highlight class="normal"></highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>cdar(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x)</highlight></codeline>
<codeline lineno="2480"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(cdr(car(x)));}</highlight></codeline>
<codeline lineno="2481"><highlight class="normal"></highlight></codeline>
<codeline lineno="2482"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>cddr(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x)</highlight></codeline>
<codeline lineno="2483"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(cdr(cdr(x)));}</highlight></codeline>
<codeline lineno="2484"><highlight class="normal"></highlight></codeline>
<codeline lineno="2485"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lrand(<ref refid="structobj" kindref="compound">LISP</ref><sp/>m)</highlight></codeline>
<codeline lineno="2486"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="2487"><highlight class="normal"><sp/>res<sp/>=<sp/>rand();</highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NULLP(m)</highlight></codeline>
<codeline lineno="2489"><highlight class="normal"><sp/><sp/><sp/>return(flocons(res));</highlight></codeline>
<codeline lineno="2490"><highlight class="normal"><sp/>else</highlight></codeline>
<codeline lineno="2491"><highlight class="normal"><sp/><sp/><sp/>return(flocons(res<sp/>%<sp/>get_c_long(m)));}</highlight></codeline>
<codeline lineno="2492"><highlight class="normal"></highlight></codeline>
<codeline lineno="2493"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lsrand(<ref refid="structobj" kindref="compound">LISP</ref><sp/>s)</highlight></codeline>
<codeline lineno="2494"><highlight class="normal">{srand(get_c_long(s));</highlight></codeline>
<codeline lineno="2495"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="2496"><highlight class="normal"></highlight></codeline>
<codeline lineno="2497"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>a_true_value(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2498"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(sym_t);}</highlight></codeline>
<codeline lineno="2499"><highlight class="normal"></highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>poparg(<ref refid="structobj" kindref="compound">LISP</ref><sp/>*ptr,<ref refid="structobj" kindref="compound">LISP</ref><sp/>defaultv)</highlight></codeline>
<codeline lineno="2501"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>value;</highlight></codeline>
<codeline lineno="2502"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NULLP(*ptr)</highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/><sp/>return(defaultv);</highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/>value<sp/>=<sp/>car(*ptr);</highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/>*ptr<sp/>=<sp/>cdr(*ptr);</highlight></codeline>
<codeline lineno="2506"><highlight class="normal"><sp/>return(value);}</highlight></codeline>
<codeline lineno="2507"><highlight class="normal"></highlight></codeline>
<codeline lineno="2508"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*last_c_errmsg(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num)</highlight></codeline>
<codeline lineno="2509"><highlight class="normal">{</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xerrno<sp/>=<sp/>(num<sp/>&lt;<sp/>0)<sp/>?<sp/>errno<sp/>:<sp/>num;</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>serrmsg[100];</highlight></codeline>
<codeline lineno="2511"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errmsg;</highlight></codeline>
<codeline lineno="2512"><highlight class="normal"><sp/>errmsg<sp/>=<sp/>strerror(xerrno);</highlight></codeline>
<codeline lineno="2513"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!errmsg)</highlight></codeline>
<codeline lineno="2514"><highlight class="normal"><sp/><sp/><sp/>{sprintf(serrmsg,</highlight><highlight class="stringliteral">&quot;errno<sp/>%d&quot;</highlight><highlight class="normal">,xerrno);</highlight></codeline>
<codeline lineno="2515"><highlight class="normal"><sp/><sp/><sp/><sp/>errmsg<sp/>=<sp/>serrmsg;}</highlight></codeline>
<codeline lineno="2516"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(errmsg);}</highlight></codeline>
<codeline lineno="2517"><highlight class="normal"></highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>llast_c_errmsg(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num)</highlight></codeline>
<codeline lineno="2519"><highlight class="normal">{</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xerrno<sp/>=<sp/>(num<sp/>&lt;<sp/>0)<sp/>?<sp/>errno<sp/>:<sp/>num;</highlight></codeline>
<codeline lineno="2520"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errmsg<sp/>=<sp/>strerror(xerrno);</highlight></codeline>
<codeline lineno="2521"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!errmsg)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(xerrno));</highlight></codeline>
<codeline lineno="2522"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(cintern(errmsg));}</highlight></codeline>
<codeline lineno="2523"><highlight class="normal"></highlight></codeline>
<codeline lineno="2524"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lllast_c_errmsg(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2525"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(llast_c_errmsg(-1));}</highlight></codeline>
<codeline lineno="2526"><highlight class="normal"></highlight></codeline>
<codeline lineno="2527"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>safe_strlen(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)</highlight></codeline>
<codeline lineno="2528"><highlight class="normal">{</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*end;</highlight></codeline>
<codeline lineno="2529"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((end<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)memchr(s,0,size)))</highlight></codeline>
<codeline lineno="2530"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(end<sp/>-<sp/>s);</highlight></codeline>
<codeline lineno="2531"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2532"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(size);}</highlight></codeline>
<codeline lineno="2533"><highlight class="normal"></highlight></codeline>
<codeline lineno="2534"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*safe_strcpy(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s1,</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size1,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s2)</highlight></codeline>
<codeline lineno="2535"><highlight class="normal">{</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len2;</highlight></codeline>
<codeline lineno="2536"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size1<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(s1);</highlight></codeline>
<codeline lineno="2537"><highlight class="normal"><sp/>len2<sp/>=<sp/>strlen(s2);</highlight></codeline>
<codeline lineno="2538"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len2<sp/>&lt;<sp/>size1)</highlight></codeline>
<codeline lineno="2539"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len2)<sp/>memcpy(s1,s2,len2);</highlight></codeline>
<codeline lineno="2540"><highlight class="normal"><sp/><sp/><sp/><sp/>s1[len2]<sp/>=<sp/>0;}</highlight></codeline>
<codeline lineno="2541"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2542"><highlight class="normal"><sp/><sp/><sp/>{memcpy(s1,s2,size1);</highlight></codeline>
<codeline lineno="2543"><highlight class="normal"><sp/><sp/><sp/><sp/>s1[size1-1]<sp/>=<sp/>0;}</highlight></codeline>
<codeline lineno="2544"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(s1);}</highlight></codeline>
<codeline lineno="2545"><highlight class="normal"></highlight></codeline>
<codeline lineno="2546"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*safe_strcat(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s1,</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size1,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s2)</highlight></codeline>
<codeline lineno="2547"><highlight class="normal">{</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len1;</highlight></codeline>
<codeline lineno="2548"><highlight class="normal"><sp/>len1<sp/>=<sp/>safe_strlen(s1,size1);</highlight></codeline>
<codeline lineno="2549"><highlight class="normal"><sp/>safe_strcpy(&amp;s1[len1],size1<sp/>-<sp/>len1,s2);</highlight></codeline>
<codeline lineno="2550"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(s1);}</highlight></codeline>
<codeline lineno="2551"><highlight class="normal"></highlight></codeline>
<codeline lineno="2552"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>parser_read(<ref refid="structobj" kindref="compound">LISP</ref><sp/>ignore)</highlight></codeline>
<codeline lineno="2553"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(leval(cintern(</highlight><highlight class="stringliteral">&quot;read&quot;</highlight><highlight class="normal">),NIL));}</highlight></codeline>
<codeline lineno="2554"><highlight class="normal"></highlight></codeline>
<codeline lineno="2555"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>os_classification(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2556"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2557"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>unix</highlight></codeline>
<codeline lineno="2558"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(cintern(</highlight><highlight class="stringliteral">&quot;unix&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2559"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2560"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32</highlight></codeline>
<codeline lineno="2561"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(cintern(</highlight><highlight class="stringliteral">&quot;win32&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2562"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2563"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>VMS</highlight></codeline>
<codeline lineno="2564"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(cintern(</highlight><highlight class="stringliteral">&quot;vms&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2565"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2566"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="2567"><highlight class="normal"></highlight></codeline>
<codeline lineno="2568"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init_subrs_1(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2569"><highlight class="normal">{init_subr_2(</highlight><highlight class="stringliteral">&quot;cons&quot;</highlight><highlight class="normal">,cons);</highlight></codeline>
<codeline lineno="2570"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;car&quot;</highlight><highlight class="normal">,car);</highlight></codeline>
<codeline lineno="2571"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;cdr&quot;</highlight><highlight class="normal">,cdr);</highlight></codeline>
<codeline lineno="2572"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;set-car!&quot;</highlight><highlight class="normal">,setcar);</highlight></codeline>
<codeline lineno="2573"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;set-cdr!&quot;</highlight><highlight class="normal">,setcdr);</highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/>init_subr_2n(</highlight><highlight class="stringliteral">&quot;+&quot;</highlight><highlight class="normal">,plus);</highlight></codeline>
<codeline lineno="2575"><highlight class="normal"><sp/>init_subr_2n(</highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">,difference);</highlight></codeline>
<codeline lineno="2576"><highlight class="normal"><sp/>init_subr_2n(</highlight><highlight class="stringliteral">&quot;*&quot;</highlight><highlight class="normal">,ltimes);</highlight></codeline>
<codeline lineno="2577"><highlight class="normal"><sp/>init_subr_2n(</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">,Quotient);</highlight></codeline>
<codeline lineno="2578"><highlight class="normal"><sp/>init_subr_2n(</highlight><highlight class="stringliteral">&quot;min&quot;</highlight><highlight class="normal">,lmin);</highlight></codeline>
<codeline lineno="2579"><highlight class="normal"><sp/>init_subr_2n(</highlight><highlight class="stringliteral">&quot;max&quot;</highlight><highlight class="normal">,lmax);</highlight></codeline>
<codeline lineno="2580"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;abs&quot;</highlight><highlight class="normal">,lllabs);</highlight></codeline>
<codeline lineno="2581"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;sqrt&quot;</highlight><highlight class="normal">,lsqrt);</highlight></codeline>
<codeline lineno="2582"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;&gt;&quot;</highlight><highlight class="normal">,greaterp);</highlight></codeline>
<codeline lineno="2583"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;&lt;&quot;</highlight><highlight class="normal">,lessp);</highlight></codeline>
<codeline lineno="2584"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;&gt;=&quot;</highlight><highlight class="normal">,greaterEp);</highlight></codeline>
<codeline lineno="2585"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;&lt;=&quot;</highlight><highlight class="normal">,lessEp);</highlight></codeline>
<codeline lineno="2586"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;eq?&quot;</highlight><highlight class="normal">,eq);</highlight></codeline>
<codeline lineno="2587"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;eqv?&quot;</highlight><highlight class="normal">,eql);</highlight></codeline>
<codeline lineno="2588"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;=&quot;</highlight><highlight class="normal">,eql);</highlight></codeline>
<codeline lineno="2589"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;assq&quot;</highlight><highlight class="normal">,assq);</highlight></codeline>
<codeline lineno="2590"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;delq&quot;</highlight><highlight class="normal">,delq);</highlight></codeline>
<codeline lineno="2591"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;read&quot;</highlight><highlight class="normal">,lread);</highlight></codeline>
<codeline lineno="2592"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;parser_read&quot;</highlight><highlight class="normal">,parser_read);</highlight></codeline>
<codeline lineno="2593"><highlight class="normal"><sp/>setvar(cintern(</highlight><highlight class="stringliteral">&quot;*parser_read.scm-loaded*&quot;</highlight><highlight class="normal">),sym_t,NIL);</highlight></codeline>
<codeline lineno="2594"><highlight class="normal"><sp/>init_subr_0(</highlight><highlight class="stringliteral">&quot;eof-val&quot;</highlight><highlight class="normal">,get_eof_val);</highlight></codeline>
<codeline lineno="2595"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;print&quot;</highlight><highlight class="normal">,lprint);</highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;prin1&quot;</highlight><highlight class="normal">,lprin1);</highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;eval&quot;</highlight><highlight class="normal">,leval);</highlight></codeline>
<codeline lineno="2598"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;apply&quot;</highlight><highlight class="normal">,lapply);</highlight></codeline>
<codeline lineno="2599"><highlight class="normal"><sp/>init_fsubr(</highlight><highlight class="stringliteral">&quot;define&quot;</highlight><highlight class="normal">,leval_define);</highlight></codeline>
<codeline lineno="2600"><highlight class="normal"><sp/>init_fsubr(</highlight><highlight class="stringliteral">&quot;lambda&quot;</highlight><highlight class="normal">,leval_lambda);</highlight></codeline>
<codeline lineno="2601"><highlight class="normal"><sp/>init_msubr(</highlight><highlight class="stringliteral">&quot;if&quot;</highlight><highlight class="normal">,leval_if);</highlight></codeline>
<codeline lineno="2602"><highlight class="normal"><sp/>init_fsubr(</highlight><highlight class="stringliteral">&quot;while&quot;</highlight><highlight class="normal">,leval_while);</highlight></codeline>
<codeline lineno="2603"><highlight class="normal"><sp/>init_msubr(</highlight><highlight class="stringliteral">&quot;begin&quot;</highlight><highlight class="normal">,leval_progn);</highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/>init_fsubr(</highlight><highlight class="stringliteral">&quot;set!&quot;</highlight><highlight class="normal">,leval_setq);</highlight></codeline>
<codeline lineno="2605"><highlight class="normal"><sp/>init_msubr(</highlight><highlight class="stringliteral">&quot;or&quot;</highlight><highlight class="normal">,leval_or);</highlight></codeline>
<codeline lineno="2606"><highlight class="normal"><sp/>init_msubr(</highlight><highlight class="stringliteral">&quot;and&quot;</highlight><highlight class="normal">,leval_and);</highlight></codeline>
<codeline lineno="2607"><highlight class="normal"><sp/>init_fsubr(</highlight><highlight class="stringliteral">&quot;*catch&quot;</highlight><highlight class="normal">,leval_catch);</highlight></codeline>
<codeline lineno="2608"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;*throw&quot;</highlight><highlight class="normal">,lthrow);</highlight></codeline>
<codeline lineno="2609"><highlight class="normal"><sp/>init_fsubr(</highlight><highlight class="stringliteral">&quot;quote&quot;</highlight><highlight class="normal">,leval_quote);</highlight></codeline>
<codeline lineno="2610"><highlight class="normal"><sp/>init_lsubr(</highlight><highlight class="stringliteral">&quot;apropos&quot;</highlight><highlight class="normal">,apropos);</highlight></codeline>
<codeline lineno="2611"><highlight class="normal"><sp/>init_lsubr(</highlight><highlight class="stringliteral">&quot;verbose&quot;</highlight><highlight class="normal">,siod_verbose);</highlight></codeline>
<codeline lineno="2612"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;copy-list&quot;</highlight><highlight class="normal">,copy_list);</highlight></codeline>
<codeline lineno="2613"><highlight class="normal"><sp/>init_lsubr(</highlight><highlight class="stringliteral">&quot;gc-status&quot;</highlight><highlight class="normal">,gc_status);</highlight></codeline>
<codeline lineno="2614"><highlight class="normal"><sp/>init_lsubr(</highlight><highlight class="stringliteral">&quot;gc&quot;</highlight><highlight class="normal">,user_gc);</highlight></codeline>
<codeline lineno="2615"><highlight class="normal"><sp/>init_subr_3(</highlight><highlight class="stringliteral">&quot;load&quot;</highlight><highlight class="normal">,load);</highlight></codeline>
<codeline lineno="2616"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;require&quot;</highlight><highlight class="normal">,require);</highlight></codeline>
<codeline lineno="2617"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;pair?&quot;</highlight><highlight class="normal">,consp);</highlight></codeline>
<codeline lineno="2618"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;symbol?&quot;</highlight><highlight class="normal">,symbolp);</highlight></codeline>
<codeline lineno="2619"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;number?&quot;</highlight><highlight class="normal">,numberp);</highlight></codeline>
<codeline lineno="2620"><highlight class="normal"><sp/>init_msubr(</highlight><highlight class="stringliteral">&quot;let-internal&quot;</highlight><highlight class="normal">,leval_let);</highlight></codeline>
<codeline lineno="2621"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;let-internal-macro&quot;</highlight><highlight class="normal">,let_macro);</highlight></codeline>
<codeline lineno="2622"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;let*-macro&quot;</highlight><highlight class="normal">,letstar_macro);</highlight></codeline>
<codeline lineno="2623"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;letrec-macro&quot;</highlight><highlight class="normal">,letrec_macro);</highlight></codeline>
<codeline lineno="2624"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;symbol-bound?&quot;</highlight><highlight class="normal">,symbol_boundp);</highlight></codeline>
<codeline lineno="2625"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;symbol-value&quot;</highlight><highlight class="normal">,symbol_value);</highlight></codeline>
<codeline lineno="2626"><highlight class="normal"><sp/>init_subr_3(</highlight><highlight class="stringliteral">&quot;set-symbol-value!&quot;</highlight><highlight class="normal">,setvar);</highlight></codeline>
<codeline lineno="2627"><highlight class="normal"><sp/>init_fsubr(</highlight><highlight class="stringliteral">&quot;the-environment&quot;</highlight><highlight class="normal">,leval_tenv);</highlight></codeline>
<codeline lineno="2628"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;error&quot;</highlight><highlight class="normal">,lerr);</highlight></codeline>
<codeline lineno="2629"><highlight class="normal"><sp/>init_subr_0(</highlight><highlight class="stringliteral">&quot;quit&quot;</highlight><highlight class="normal">,quit);</highlight></codeline>
<codeline lineno="2630"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;not&quot;</highlight><highlight class="normal">,nullp);</highlight></codeline>
<codeline lineno="2631"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;null?&quot;</highlight><highlight class="normal">,nullp);</highlight></codeline>
<codeline lineno="2632"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;env-lookup&quot;</highlight><highlight class="normal">,envlookup);</highlight></codeline>
<codeline lineno="2633"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;reverse&quot;</highlight><highlight class="normal">,reverse);</highlight></codeline>
<codeline lineno="2634"><highlight class="normal"><sp/>init_lsubr(</highlight><highlight class="stringliteral">&quot;symbolconc&quot;</highlight><highlight class="normal">,symbolconc);</highlight></codeline>
<codeline lineno="2635"><highlight class="normal"><sp/>init_subr_3(</highlight><highlight class="stringliteral">&quot;save-forms&quot;</highlight><highlight class="normal">,save_forms);</highlight></codeline>
<codeline lineno="2636"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;fopen&quot;</highlight><highlight class="normal">,fopen_l);</highlight></codeline>
<codeline lineno="2637"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;fclose&quot;</highlight><highlight class="normal">,fclose_l);</highlight></codeline>
<codeline lineno="2638"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;getc&quot;</highlight><highlight class="normal">,lgetc);</highlight></codeline>
<codeline lineno="2639"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;ungetc&quot;</highlight><highlight class="normal">,lungetc);</highlight></codeline>
<codeline lineno="2640"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;putc&quot;</highlight><highlight class="normal">,lputc);</highlight></codeline>
<codeline lineno="2641"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;puts&quot;</highlight><highlight class="normal">,lputs);</highlight></codeline>
<codeline lineno="2642"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;ftell&quot;</highlight><highlight class="normal">,lftell);</highlight></codeline>
<codeline lineno="2643"><highlight class="normal"><sp/>init_subr_3(</highlight><highlight class="stringliteral">&quot;fseek&quot;</highlight><highlight class="normal">,lfseek);</highlight></codeline>
<codeline lineno="2644"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;parse-number&quot;</highlight><highlight class="normal">,parse_number);</highlight></codeline>
<codeline lineno="2645"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;%%stack-limit&quot;</highlight><highlight class="normal">,stack_limit);</highlight></codeline>
<codeline lineno="2646"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;intern&quot;</highlight><highlight class="normal">,intern);</highlight></codeline>
<codeline lineno="2647"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;%%closure&quot;</highlight><highlight class="normal">,closure);</highlight></codeline>
<codeline lineno="2648"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;%%closure-code&quot;</highlight><highlight class="normal">,closure_code);</highlight></codeline>
<codeline lineno="2649"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;%%closure-env&quot;</highlight><highlight class="normal">,closure_env);</highlight></codeline>
<codeline lineno="2650"><highlight class="normal"><sp/>init_fsubr(</highlight><highlight class="stringliteral">&quot;while&quot;</highlight><highlight class="normal">,lwhile);</highlight></codeline>
<codeline lineno="2651"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;nreverse&quot;</highlight><highlight class="normal">,nreverse);</highlight></codeline>
<codeline lineno="2652"><highlight class="normal"><sp/>init_subr_0(</highlight><highlight class="stringliteral">&quot;allocate-heap&quot;</highlight><highlight class="normal">,allocate_aheap);</highlight></codeline>
<codeline lineno="2653"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;gc-info&quot;</highlight><highlight class="normal">,gc_info);</highlight></codeline>
<codeline lineno="2654"><highlight class="normal"><sp/>init_subr_0(</highlight><highlight class="stringliteral">&quot;runtime&quot;</highlight><highlight class="normal">,lruntime);</highlight></codeline>
<codeline lineno="2655"><highlight class="normal"><sp/>init_subr_0(</highlight><highlight class="stringliteral">&quot;realtime&quot;</highlight><highlight class="normal">,lrealtime);</highlight></codeline>
<codeline lineno="2656"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;caar&quot;</highlight><highlight class="normal">,caar);</highlight></codeline>
<codeline lineno="2657"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;cadr&quot;</highlight><highlight class="normal">,cadr);</highlight></codeline>
<codeline lineno="2658"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;cdar&quot;</highlight><highlight class="normal">,cdar);</highlight></codeline>
<codeline lineno="2659"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;cddr&quot;</highlight><highlight class="normal">,cddr);</highlight></codeline>
<codeline lineno="2660"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;rand&quot;</highlight><highlight class="normal">,lrand);</highlight></codeline>
<codeline lineno="2661"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;srand&quot;</highlight><highlight class="normal">,lsrand);</highlight></codeline>
<codeline lineno="2662"><highlight class="normal"><sp/>init_subr_0(</highlight><highlight class="stringliteral">&quot;last-c-error&quot;</highlight><highlight class="normal">,lllast_c_errmsg);</highlight></codeline>
<codeline lineno="2663"><highlight class="normal"><sp/>init_subr_0(</highlight><highlight class="stringliteral">&quot;os-classification&quot;</highlight><highlight class="normal">,os_classification);</highlight></codeline>
<codeline lineno="2664"><highlight class="normal"><sp/>init_slib_version();}</highlight></codeline>
<codeline lineno="2665"><highlight class="normal"></highlight></codeline>
<codeline lineno="2666"><highlight class="normal"></highlight></codeline>
<codeline lineno="2667"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>err0,pr,prp<sp/>are<sp/>convenient<sp/>to<sp/>call<sp/>from<sp/>the<sp/>C-language<sp/>debugger<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2668"><highlight class="normal"></highlight></codeline>
<codeline lineno="2669"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>err0(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2670"><highlight class="normal">{err(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,NIL);}</highlight></codeline>
<codeline lineno="2671"><highlight class="normal"></highlight></codeline>
<codeline lineno="2672"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pr(<ref refid="structobj" kindref="compound">LISP</ref><sp/>p)</highlight></codeline>
<codeline lineno="2673"><highlight class="normal">{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(looks_pointerp(p))</highlight></codeline>
<codeline lineno="2674"><highlight class="normal"><sp/><sp/><sp/>lprint(p,NIL);</highlight></codeline>
<codeline lineno="2675"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2676"><highlight class="normal"><sp/><sp/><sp/>put_st(</highlight><highlight class="stringliteral">&quot;invalid\n&quot;</highlight><highlight class="normal">);}</highlight></codeline>
<codeline lineno="2677"><highlight class="normal"></highlight></codeline>
<codeline lineno="2678"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>prp(<ref refid="structobj" kindref="compound">LISP</ref><sp/>*p)</highlight></codeline>
<codeline lineno="2679"><highlight class="normal">{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!p)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2680"><highlight class="normal"><sp/>pr(*p);}</highlight></codeline>
<codeline lineno="2681"><highlight class="normal"></highlight></codeline>
<codeline lineno="2682"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slib.c"/>
  </compounddef>
</doxygen>

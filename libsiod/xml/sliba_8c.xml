<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.3.1">
  <compounddef id="sliba_8c" kind="file">
    <compoundname>sliba.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">setjmp.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">stdarg.h</includes>
    <includes local="no">ctype.h</includes>
    <includes local="no">math.h</includes>
    <includes refid="siod_8h" local="yes">siod.h</includes>
    <includes refid="siodp_8h" local="yes">siodp.h</includes>
    <incdepgraph>
      <node id="27">
        <label>stdarg.h</label>
      </node>
      <node id="31">
        <label>siodp.h</label>
        <link refid="siodp_8h_source"/>
      </node>
      <node id="26">
        <label>stdlib.h</label>
      </node>
      <node id="25">
        <label>setjmp.h</label>
      </node>
      <node id="24">
        <label>string.h</label>
      </node>
      <node id="30">
        <label>siod.h</label>
        <link refid="siod_8h_source"/>
      </node>
      <node id="29">
        <label>math.h</label>
      </node>
      <node id="28">
        <label>ctype.h</label>
      </node>
      <node id="22">
        <label>sliba.c</label>
        <link refid="sliba.c"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="sliba_8c_1adfc7a88c43ac6708f5419deb40e60a8b" prot="public" static="no">
        <name>IS_TRIM_SPACE</name>
        <param><defname>_x</defname></param>
        <initializer>(strchr(&quot; \t\r\n&quot;,(_x)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="464" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="464" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sliba_8c_1ab52cd3401e7ccf4a4e12fb359e9075d7" prot="public" static="no">
        <name>HASH_COMBINE</name>
        <param><defname>_h1</defname></param>
        <param><defname>_h2</defname></param>
        <param><defname>_mod</defname></param>
        <initializer>((((_h1) * 17 + 1) ^ (_h2)) % (_mod))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="580" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="580" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sliba_8c_1a319b7dff068f00079e7f25d15644ed42" prot="public" static="no">
        <name>BITMSK</name>
        <param><defname>N</defname></param>
        <initializer>((1 &lt;&lt; (N)) - 1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1269" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1269" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sliba_8c_1a46075ac5ae00d8d47bb46827e2f050c0" prot="public" static="no">
        <name>ITEM1</name>
        <param><defname>X</defname></param>
        <initializer>(X &gt;&gt; 2) &amp; BITMSK(6)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1271" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1271" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sliba_8c_1a90f1e5ce1712febb1d3b66afbf503c4d" prot="public" static="no">
        <name>ITEM2</name>
        <param><defname>X</defname></param>
        <param><defname>Y</defname></param>
        <initializer>((X &amp; BITMSK(2)) &lt;&lt; 4) | ((Y &gt;&gt; 4) &amp; BITMSK(4))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1272" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1272" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sliba_8c_1aff6d68e26bca9d3b485384787e8c0408" prot="public" static="no">
        <name>ITEM3</name>
        <param><defname>X</defname></param>
        <param><defname>Y</defname></param>
        <initializer>((X &amp; BITMSK(4)) &lt;&lt; 2) | ((Y &gt;&gt; 6) &amp; BITMSK(2))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1273" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1273" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sliba_8c_1ad4b22270cace9de278456a529047d28b" prot="public" static="no">
        <name>ITEM4</name>
        <param><defname>X</defname></param>
        <initializer>X &amp; BITMSK(6)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1274" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1274" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="sliba_8c_1a883a646b532455fec7872e68809d8490" prot="public" static="yes" mutable="no">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP sym_plists</definition>
        <argsstring></argsstring>
        <name>sym_plists</name>
        <initializer>= NIL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="30" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="sliba_8c_1a40622580f9edac79cff8c767c2514e62" prot="public" static="yes" mutable="no">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP bashnum</definition>
        <argsstring></argsstring>
        <name>bashnum</name>
        <initializer>= NIL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="31" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="sliba_8c_1a3d70347fb6b5089287423552a595b732" prot="public" static="yes" mutable="no">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP sym_e</definition>
        <argsstring></argsstring>
        <name>sym_e</name>
        <initializer>= NIL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="32" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="sliba_8c_1a21737d465224dfd2a4edd8ca744f4007" prot="public" static="yes" mutable="no">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP sym_f</definition>
        <argsstring></argsstring>
        <name>sym_f</name>
        <initializer>= NIL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="33" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="sliba_8c_1a1be7998aff4e27b48a01d9f77838accd" prot="public" static="yes" mutable="no">
        <type>char *</type>
        <definition>char* base64_encode_table</definition>
        <argsstring></argsstring>
        <name>base64_encode_table</name>
        <initializer>= &quot;\
ABCDEFGHIJKLMNOPQRSTUVWXYZ\
abcdefghijklmnopqrstuvwxyz\
0123456789+/=&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1258" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1255" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="sliba_8c_1ac8d5d4966b8b0699c1efc4ba06ab10b7" prot="public" static="yes" mutable="no">
        <type>char *</type>
        <definition>char* base64_decode_table</definition>
        <argsstring></argsstring>
        <name>base64_decode_table</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1260" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1260" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="sliba_8c_1ab74b0b82c981dbdd995d18f5a1299ab9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void init_sliba_version</definition>
        <argsstring>(void)</argsstring>
        <name>init_sliba_version</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="24" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="23" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a0a26204f5985c2635a14725178d31640" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_storage_a1</definition>
        <argsstring>(long type)</argsstring>
        <name>init_storage_a1</name>
        <param>
          <type>long</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="36" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="35" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a8a1fe5dd0f05f4e9b1d9894d4b11292f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_storage_a</definition>
        <argsstring>(void)</argsstring>
        <name>init_storage_a</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="54" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="53" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a10b0f44e201408a9129c58ef39815326" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP array_gc_relocate</definition>
        <argsstring>(LISP ptr)</argsstring>
        <name>array_gc_relocate</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="65" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="64" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1afb5c18fa26f62b9d73e80babbfb47e3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void array_gc_scan</definition>
        <argsstring>(LISP ptr)</argsstring>
        <name>array_gc_scan</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="74" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="73" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a54f48542c83f48bf6a2f92dbc6c2d26f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP array_gc_mark</definition>
        <argsstring>(LISP ptr)</argsstring>
        <name>array_gc_mark</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="82" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="81" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a301c5a2dd1476be95028fe739f26abf3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void array_gc_free</definition>
        <argsstring>(LISP ptr)</argsstring>
        <name>array_gc_free</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="91" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="90" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1aa9c03879b10b50ec135bec1659386820" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void array_prin1</definition>
        <argsstring>(LISP ptr, struct gen_printio *f)</argsstring>
        <name>array_prin1</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>struct <ref refid="structgen__printio" kindref="compound">gen_printio</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="118" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="117" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a1af8737e67a311e1f6c602b10a91fecf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP strcons</definition>
        <argsstring>(long length, const char *data)</argsstring>
        <name>strcons</name>
        <param>
          <type>long</type>
          <declname>length</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="189" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="188" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1aa8a331a57ad6cdc0eb9d110cc12d6d52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rfs_getc</definition>
        <argsstring>(unsigned char **p)</argsstring>
        <name>rfs_getc</name>
        <param>
          <type>unsigned char **</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="206" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="205" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1aefe2e68e6b427727bbb67887ccb747b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rfs_ungetc</definition>
        <argsstring>(unsigned char c, unsigned char **p)</argsstring>
        <name>rfs_ungetc</name>
        <param>
          <type>unsigned char</type>
          <declname>c</declname>
        </param>
        <param>
          <type>unsigned char **</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="216" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="215" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1ad179bb8a09f14c3678d63dadd1bf4945" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP read_from_string</definition>
        <argsstring>(LISP x)</argsstring>
        <name>read_from_string</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="221" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="220" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1aa3cda280129bf9aff587855d074561b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pts_puts</definition>
        <argsstring>(char *from, void *cb)</argsstring>
        <name>pts_puts</name>
        <param>
          <type>char *</type>
          <declname>from</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="232" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="231" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a5a77db313bbac3fa9a0f0812a8110a5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP err_wta_str</definition>
        <argsstring>(LISP exp)</argsstring>
        <name>err_wta_str</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>exp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="246" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="245" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1ab643718bc7c8aa6507d34f0ae1c02e4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP print_to_string</definition>
        <argsstring>(LISP exp, LISP str, LISP nostart)</argsstring>
        <name>print_to_string</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>exp</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>str</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>nostart</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="249" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="248" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a48e761dfb547bd232ff3f6a92791ff41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP aref1</definition>
        <argsstring>(LISP a, LISP i)</argsstring>
        <name>aref1</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="260" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="259" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a4499c21c7929c1d50b0e5582784c123c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void err1_aset1</definition>
        <argsstring>(LISP i)</argsstring>
        <name>err1_aset1</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="284" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="283" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1aea8bf52575c47d976bb3ebb769e51c94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void err2_aset1</definition>
        <argsstring>(LISP v)</argsstring>
        <name>err2_aset1</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="287" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="286" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1ac32ed1bf2208a5da89946e26e70f65a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP aset1</definition>
        <argsstring>(LISP a, LISP i, LISP v)</argsstring>
        <name>aset1</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="290" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="289" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a857262b18c7e37be2800cea4400a91ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP arcons</definition>
        <argsstring>(long typecode, long n, long initp)</argsstring>
        <name>arcons</name>
        <param>
          <type>long</type>
          <declname>typecode</declname>
        </param>
        <param>
          <type>long</type>
          <declname>n</declname>
        </param>
        <param>
          <type>long</type>
          <declname>initp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="319" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="318" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1af756e1154e0f1ab311220d316067aeab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP mallocl</definition>
        <argsstring>(void *place, long size)</argsstring>
        <name>mallocl</name>
        <param>
          <type>void *</type>
          <declname>place</declname>
        </param>
        <param>
          <type>long</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="361" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="360" bodyend="368"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a31220ee57ea4aaa77e212083855da4d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP cons_array</definition>
        <argsstring>(LISP dim, LISP kind)</argsstring>
        <name>cons_array</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>dim</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>kind</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="371" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="370" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1afaee52eac87263a30c8f7fc6217d3fc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP string_append</definition>
        <argsstring>(LISP args)</argsstring>
        <name>string_append</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="412" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="411" bodyend="423"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a4b802c238fdd3e4fac8276cdda6a2ef8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP bytes_append</definition>
        <argsstring>(LISP args)</argsstring>
        <name>bytes_append</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="426" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="425" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1aa1b07f036dbc47488d99a6ab5f2df4d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP substring</definition>
        <argsstring>(LISP str, LISP start, LISP end)</argsstring>
        <name>substring</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>str</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>start</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="442" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="441" bodyend="452"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a5f17848b901bef5e55be2663dd5a0c10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP string_search</definition>
        <argsstring>(LISP token, LISP str)</argsstring>
        <name>string_search</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>token</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="455" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="454" bodyend="462"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a58182733d3003481fe260198a5a46c9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP string_trim</definition>
        <argsstring>(LISP str)</argsstring>
        <name>string_trim</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="467" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="466" bodyend="472"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1adec2523a326c9625387b817186c3f1b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP string_trim_left</definition>
        <argsstring>(LISP str)</argsstring>
        <name>string_trim_left</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="475" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="474" bodyend="479"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a5b72b6c9bc2883a6e4c544c261895c22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP string_trim_right</definition>
        <argsstring>(LISP str)</argsstring>
        <name>string_trim_right</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="482" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="481" bodyend="486"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a66f6e9b19310bec55744b84f182d9296" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP string_upcase</definition>
        <argsstring>(LISP str)</argsstring>
        <name>string_upcase</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="489" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="488" bodyend="497"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a54e18d4e69ae3a850a31d085fb785191" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP string_downcase</definition>
        <argsstring>(LISP str)</argsstring>
        <name>string_downcase</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="500" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="499" bodyend="508"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1ad4b090412f2f1d3b238c71066c767acc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lreadstring</definition>
        <argsstring>(struct gen_readio *f)</argsstring>
        <name>lreadstring</name>
        <param>
          <type>struct <ref refid="structgen__readio" kindref="compound">gen_readio</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="511" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="510" bodyend="553"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a5c05252399bd19c90c46ff954b6a8c18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lreadsharp</definition>
        <argsstring>(struct gen_readio *f)</argsstring>
        <name>lreadsharp</name>
        <param>
          <type>struct <ref refid="structgen__readio" kindref="compound">gen_readio</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="557" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="556" bodyend="578"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a356cadd684e36fa838ab3d51bd6559df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long c_sxhash</definition>
        <argsstring>(LISP obj, long n)</argsstring>
        <name>c_sxhash</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>obj</declname>
        </param>
        <param>
          <type>long</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="583" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="582" bodyend="621"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1afb7d03c5d9b233e2628065092041b3e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP sxhash</definition>
        <argsstring>(LISP obj, LISP n)</argsstring>
        <name>sxhash</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="624" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="623" bodyend="624"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a8ed7b8139dc710c9fc0aea1361368181" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP equal</definition>
        <argsstring>(LISP a, LISP b)</argsstring>
        <name>equal</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="627" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="626" bodyend="650"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a398c06c41a3885c42c20d860effeb120" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP array_equal</definition>
        <argsstring>(LISP a, LISP b)</argsstring>
        <name>array_equal</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="653" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="652" bodyend="689"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a726db4b008a4518409c1506ead255f8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long array_sxhash</definition>
        <argsstring>(LISP a, long n)</argsstring>
        <name>array_sxhash</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type>long</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="692" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="691" bodyend="728"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a21b0d01342aaa44a2108bcb8effe8cd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long href_index</definition>
        <argsstring>(LISP table, LISP key)</argsstring>
        <name>href_index</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>table</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="731" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="730" bodyend="738"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1ac061e2e86e39897cd2eec33a941cacf4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP href</definition>
        <argsstring>(LISP table, LISP key)</argsstring>
        <name>href</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>table</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="741" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="740" bodyend="742"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1aa4386dbcca62016d0dabda8baf49c235" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP hset</definition>
        <argsstring>(LISP table, LISP key, LISP value)</argsstring>
        <name>hset</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>table</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="745" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="744" bodyend="753"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1afdd3cb5c874e42664f13c18a3fa1cf91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP assoc</definition>
        <argsstring>(LISP x, LISP alist)</argsstring>
        <name>assoc</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>alist</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="756" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="755" bodyend="762"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1aa5445ba5b475bf96b265f593afe583b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP assv</definition>
        <argsstring>(LISP x, LISP alist)</argsstring>
        <name>assv</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>alist</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="765" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="764" bodyend="771"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a09fdbdbbe75729854bb23b82fca514ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void put_long</definition>
        <argsstring>(long i, FILE *f)</argsstring>
        <name>put_long</name>
        <param>
          <type>long</type>
          <declname>i</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="774" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="773" bodyend="774"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a496fd2e7550ae238cb6950ae8b7c073e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long get_long</definition>
        <argsstring>(FILE *f)</argsstring>
        <name>get_long</name>
        <param>
          <type>FILE *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="777" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="776" bodyend="779"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1ac2b8159ec78b19b16813a3944c2f55c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long fast_print_table</definition>
        <argsstring>(LISP obj, LISP table)</argsstring>
        <name>fast_print_table</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>table</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="782" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="781" bodyend="799"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a7c4bfd47a54603bce3e2f2e75fe9e307" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP fast_print</definition>
        <argsstring>(LISP obj, LISP table)</argsstring>
        <name>fast_print</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>table</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="802" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="801" bodyend="853"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a3ccd0c3aec95302ab20d451d68acd3a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP fast_read</definition>
        <argsstring>(LISP table)</argsstring>
        <name>fast_read</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>table</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="856" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="855" bodyend="919"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a78e9fe18200ba4c3460193b93728d206" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP array_fast_print</definition>
        <argsstring>(LISP ptr, LISP table)</argsstring>
        <name>array_fast_print</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>table</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="922" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="921" bodyend="953"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1aed83ff286e3e82a98fe10669d2203af9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP array_fast_read</definition>
        <argsstring>(int code, LISP table)</argsstring>
        <name>array_fast_read</name>
        <param>
          <type>int</type>
          <declname>code</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>table</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="956" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="955" bodyend="1005"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1af76115bdf804625f52c25b29169a5d83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long get_c_long</definition>
        <argsstring>(LISP x)</argsstring>
        <name>get_c_long</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1008" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1007" bodyend="1009"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a9eb15b2e6d6870c84963b62756298663" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double get_c_double</definition>
        <argsstring>(LISP x)</argsstring>
        <name>get_c_double</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1012" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1011" bodyend="1013"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a60e351415c75ab2643093103dae4a658" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP make_list</definition>
        <argsstring>(LISP x, LISP v)</argsstring>
        <name>make_list</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1016" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1015" bodyend="1022"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a71f531ef4a63695778b1194f0628f396" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lfread</definition>
        <argsstring>(LISP size, LISP file)</argsstring>
        <name>lfread</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1025" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1024" bodyend="1063"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a43dd5bc72de2c5c5cbd1c3d31ae34be5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lfwrite</definition>
        <argsstring>(LISP string, LISP file)</argsstring>
        <name>lfwrite</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1066" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1065" bodyend="1078"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a03dbd4f825ead6f86083a380725c959c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lfflush</definition>
        <argsstring>(LISP file)</argsstring>
        <name>lfflush</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1081" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1080" bodyend="1087"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a4e4e8479b46faa4d5444bd444cce0321" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP string_length</definition>
        <argsstring>(LISP string)</argsstring>
        <name>string_length</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1090" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1089" bodyend="1091"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a4e36f40aa44578da082c5d45847a36ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP string_dim</definition>
        <argsstring>(LISP string)</argsstring>
        <name>string_dim</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1094" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1093" bodyend="1095"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a52e1b274b28583b01b0e1fa2d6055e6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long nlength</definition>
        <argsstring>(LISP obj)</argsstring>
        <name>nlength</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1098" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1097" bodyend="1119"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1aef9d9267ab9e4fd94da0e801fb9f623d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP llength</definition>
        <argsstring>(LISP obj)</argsstring>
        <name>llength</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1122" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1121" bodyend="1122"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a8ec381d51dbce3527c8192ef4fe373cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP number2string</definition>
        <argsstring>(LISP x, LISP b, LISP w, LISP p)</argsstring>
        <name>number2string</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>w</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1125" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1124" bodyend="1167"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1aae873e613895d442464169d5fca56f82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP string2number</definition>
        <argsstring>(LISP x, LISP b)</argsstring>
        <name>string2number</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1170" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1169" bodyend="1193"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1ab02ddaa2ea09a32680b8e394facd7d05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lstrcmp</definition>
        <argsstring>(LISP s1, LISP s2)</argsstring>
        <name>lstrcmp</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>s1</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>s2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1196" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1195" bodyend="1196"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1ada93a103e8f7d281696b60c25daacb42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void chk_string</definition>
        <argsstring>(LISP s, char **data, long *dim)</argsstring>
        <name>chk_string</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>s</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>data</declname>
        </param>
        <param>
          <type>long *</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1199" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1198" bodyend="1203"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1ad65f4e0bfa488ee23bbda559c7e9d6ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lstrcpy</definition>
        <argsstring>(LISP dest, LISP src)</argsstring>
        <name>lstrcpy</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1206" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1205" bodyend="1215"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a921f36cae4add1498b07a856997da36c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lstrcat</definition>
        <argsstring>(LISP dest, LISP src)</argsstring>
        <name>lstrcat</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1218" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1217" bodyend="1228"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1af7a96adfa97c2baa1fd25a546d0361ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lstrbreakup</definition>
        <argsstring>(LISP str, LISP lmarker)</argsstring>
        <name>lstrbreakup</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>str</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>lmarker</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1231" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1230" bodyend="1241"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a3efb087af31afc14d27cd918e07524ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lstrunbreakup</definition>
        <argsstring>(LISP elems, LISP lmarker)</argsstring>
        <name>lstrunbreakup</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>elems</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>lmarker</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1244" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1243" bodyend="1250"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a3919baff6cbe50b3741a854cd1e402a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP stringp</definition>
        <argsstring>(LISP x)</argsstring>
        <name>stringp</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1253" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1252" bodyend="1253"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1af8b6074f3fb6b4f158b16f3960154729" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void init_base64_table</definition>
        <argsstring>(void)</argsstring>
        <name>init_base64_table</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1263" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1262" bodyend="1267"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a79cd69f218b6bf160e5001ebbf142c52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP base64encode</definition>
        <argsstring>(LISP in)</argsstring>
        <name>base64encode</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1277" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1276" bodyend="1309"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a465b73d079f3ef0ce7c67496fef9db9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP base64decode</definition>
        <argsstring>(LISP in)</argsstring>
        <name>base64decode</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1312" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1311" bodyend="1357"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a85bb21ce608b2532b6cfd1f0e01fd4df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP memq</definition>
        <argsstring>(LISP x, LISP il)</argsstring>
        <name>memq</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>il</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1360" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1359" bodyend="1366"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a6dbcf5dfe57323513656d4c2cd15dd4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP member</definition>
        <argsstring>(LISP x, LISP il)</argsstring>
        <name>member</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>il</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1369" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1368" bodyend="1375"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a42b25b790d6506c40c65427309dad68e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP memv</definition>
        <argsstring>(LISP x, LISP il)</argsstring>
        <name>memv</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>il</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1378" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1377" bodyend="1384"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a7910e355f0aa3562ee78ae7c24f1b74f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP nth</definition>
        <argsstring>(LISP x, LISP li)</argsstring>
        <name>nth</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>li</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1388" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1387" bodyend="1394"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1ae49957014efe091699ce2dbcf78dc8db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lref_default</definition>
        <argsstring>(LISP li, LISP x, LISP fcn)</argsstring>
        <name>lref_default</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>li</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>fcn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1400" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1399" bodyend="1408"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1acc3a47be5a960ff2cdc54f9a12da6f57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP larg_default</definition>
        <argsstring>(LISP li, LISP x, LISP dval)</argsstring>
        <name>larg_default</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>li</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>dval</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1411" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1410" bodyend="1422"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1adfe8b99ec877dfd562e04bfbec8285c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lkey_default</definition>
        <argsstring>(LISP li, LISP key, LISP dval)</argsstring>
        <name>lkey_default</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>li</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>dval</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1425" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1424" bodyend="1436"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1adaf80d04f79a625513db03bb2dc23e90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP llist</definition>
        <argsstring>(LISP l)</argsstring>
        <name>llist</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1440" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1439" bodyend="1440"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a233d4290f13eaa1c764d7d691a848416" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP writes1</definition>
        <argsstring>(FILE *f, LISP l)</argsstring>
        <name>writes1</name>
        <param>
          <type>FILE *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1443" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1442" bodyend="1458"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a204101880d407b4df4a6dc1912c8cb16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP writes</definition>
        <argsstring>(LISP args)</argsstring>
        <name>writes</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1461" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1460" bodyend="1461"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a081d7012a7916128c622057f3a05746a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP last</definition>
        <argsstring>(LISP l)</argsstring>
        <name>last</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1464" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1463" bodyend="1471"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a3c7c8cfc1a8d2178e577d3d75942d7b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP butlast</definition>
        <argsstring>(LISP l)</argsstring>
        <name>butlast</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1474" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1473" bodyend="1482"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1ae488148104880aa4dbd8a90171cb4d21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP nconc</definition>
        <argsstring>(LISP a, LISP b)</argsstring>
        <name>nconc</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1485" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1484" bodyend="1488"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1acfced6985d89fe26d5a07076726ca4b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP funcall1</definition>
        <argsstring>(LISP fcn, LISP a1)</argsstring>
        <name>funcall1</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>fcn</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>a1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1491" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1490" bodyend="1503"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a3b8368faa4f867a2cdf633ae323478e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP funcall2</definition>
        <argsstring>(LISP fcn, LISP a1, LISP a2)</argsstring>
        <name>funcall2</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>fcn</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>a1</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>a2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1506" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1505" bodyend="1513"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1ab18314b5778700e14926e7a82bd356b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lqsort</definition>
        <argsstring>(LISP l, LISP f, LISP g)</argsstring>
        <name>lqsort</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>l</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1517" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1515" bodyend="1536"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a23f4a16321396f649535ec12e1738517" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP string_lessp</definition>
        <argsstring>(LISP s1, LISP s2)</argsstring>
        <name>string_lessp</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>s1</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>s2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1539" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1538" bodyend="1542"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a27cca4b8f108375218ef99ccccdb3c6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP benchmark_funcall1</definition>
        <argsstring>(LISP ln, LISP f, LISP a1)</argsstring>
        <name>benchmark_funcall1</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>ln</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>a1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1545" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1544" bodyend="1550"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a48c2348f6bd214e206f43fb0fe878fae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP benchmark_funcall2</definition>
        <argsstring>(LISP l)</argsstring>
        <name>benchmark_funcall2</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1553" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1552" bodyend="1560"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a3cbe3163c748095c0721d019e0c825d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP benchmark_eval</definition>
        <argsstring>(LISP ln, LISP exp, LISP env)</argsstring>
        <name>benchmark_eval</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>ln</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>exp</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>env</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1563" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1562" bodyend="1568"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a8a2cc889a1d033f8b50f322bb9b1d123" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP mapcar1</definition>
        <argsstring>(LISP fcn, LISP in)</argsstring>
        <name>mapcar1</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>fcn</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1571" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1570" bodyend="1576"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1ae781547aeb9af42745ad8b004e455e72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP mapcar2</definition>
        <argsstring>(LISP fcn, LISP in1, LISP in2)</argsstring>
        <name>mapcar2</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>fcn</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>in1</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>in2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1579" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1578" bodyend="1584"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1af2219773f0833c008043ad8fe85c0b5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP mapcar</definition>
        <argsstring>(LISP l)</argsstring>
        <name>mapcar</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1587" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1586" bodyend="1594"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a9f8042ea4116717fbe064167f5d44273" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lfmod</definition>
        <argsstring>(LISP x, LISP y)</argsstring>
        <name>lfmod</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1597" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1596" bodyend="1599"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a90bf35b09864b74c892a69516f20daa8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lsubset</definition>
        <argsstring>(LISP fcn, LISP l)</argsstring>
        <name>lsubset</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>fcn</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1602" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1601" bodyend="1606"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a151798299f6459c74f740032ac10ffe0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP ass</definition>
        <argsstring>(LISP x, LISP alist, LISP fcn)</argsstring>
        <name>ass</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>alist</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>fcn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1609" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1608" bodyend="1615"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1affd237898fb1a8b980d8a1f6c12b9247" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP append2</definition>
        <argsstring>(LISP l1, LISP l2)</argsstring>
        <name>append2</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>l1</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>l2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1618" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1617" bodyend="1624"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a7f0768ac05af9852ff82e80e6cff1b84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP append</definition>
        <argsstring>(LISP l)</argsstring>
        <name>append</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1627" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1626" bodyend="1636"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1ad3e18e4829b4ec3b05e7ff432a67be2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP listn</definition>
        <argsstring>(long n,...)</argsstring>
        <name>listn</name>
        <param>
          <type>long</type>
          <declname>n</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1639" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1638" bodyend="1647"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1aa704e1e9caa5f15e66474a162c61419c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP fast_load</definition>
        <argsstring>(LISP lfname, LISP noeval)</argsstring>
        <name>fast_load</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>lfname</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>noeval</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1651" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1650" bodyend="1673"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a4ab0dfb2f51f912a5b9de2fbcade7f68" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void shexstr</definition>
        <argsstring>(char *outstr, void *buff, size_t len)</argsstring>
        <name>shexstr</name>
        <param>
          <type>char *</type>
          <declname>outstr</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buff</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1676" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1675" bodyend="1679"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1aea5d4c3df332bcac1bdc3db7c60c0c1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP fast_save</definition>
        <argsstring>(LISP fname, LISP forms, LISP nohash, LISP comment, LISP fmode)</argsstring>
        <name>fast_save</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>fname</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>forms</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>nohash</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>comment</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>fmode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1682" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1681" bodyend="1715"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1ac59cb2c3b829a4c07ef5b6fc16717f23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void swrite1</definition>
        <argsstring>(LISP stream, LISP data)</argsstring>
        <name>swrite1</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>stream</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1718" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1717" bodyend="1726"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a394c59a715227ee4dec6b33f2f65e5bd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>static LISP swrite2</definition>
        <argsstring>(LISP name, LISP table)</argsstring>
        <name>swrite2</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>table</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1729" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1728" bodyend="1742"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a9c18b315b2cf921322c46d8b0e5cb8d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP swrite</definition>
        <argsstring>(LISP stream, LISP table, LISP data)</argsstring>
        <name>swrite</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>stream</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>table</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1745" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1744" bodyend="1765"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1af87abdf80a04520016bcddb6a8397293" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lpow</definition>
        <argsstring>(LISP x, LISP y)</argsstring>
        <name>lpow</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1768" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1767" bodyend="1770"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1afeb0085cd017aa08e4630016ae9d950a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lexp</definition>
        <argsstring>(LISP x)</argsstring>
        <name>lexp</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1773" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1772" bodyend="1773"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1abe3b14d0ab2fa446f92d3310d6472237" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP llog</definition>
        <argsstring>(LISP x)</argsstring>
        <name>llog</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1776" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1775" bodyend="1776"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1aeee442bc59afcb200b995b4a84b6b952" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lsin</definition>
        <argsstring>(LISP x)</argsstring>
        <name>lsin</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1779" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1778" bodyend="1779"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a44868ae25bb600e3de679b812b89776c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lcos</definition>
        <argsstring>(LISP x)</argsstring>
        <name>lcos</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1782" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1781" bodyend="1782"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1ae13be60a286fc578c8d7895845ab1b2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP ltan</definition>
        <argsstring>(LISP x)</argsstring>
        <name>ltan</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1785" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1784" bodyend="1785"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1ad5f9a8ad110b647dd57451ba516620b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lasin</definition>
        <argsstring>(LISP x)</argsstring>
        <name>lasin</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1788" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1787" bodyend="1788"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1aa94cd4cf1af4b8daa6505452e71fdf39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lacos</definition>
        <argsstring>(LISP x)</argsstring>
        <name>lacos</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1791" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1790" bodyend="1791"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a70e4af43838b510ae3664c1ffd11f5e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP latan</definition>
        <argsstring>(LISP x)</argsstring>
        <name>latan</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1794" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1793" bodyend="1794"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1ae2280e58e7afee8debda808e65bda655" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP latan2</definition>
        <argsstring>(LISP x, LISP y)</argsstring>
        <name>latan2</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1797" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1796" bodyend="1797"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a870053817ae6b7c8b20c0600bafbfcac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP hexstr</definition>
        <argsstring>(LISP a)</argsstring>
        <name>hexstr</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1800" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1799" bodyend="1808"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a49152244734e5b37a0ee1f91d1bb3d65" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int xdigitvalue</definition>
        <argsstring>(int c)</argsstring>
        <name>xdigitvalue</name>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1811" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1810" bodyend="1815"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1adf85b7bbd8e4fffd0893fc6af2ad7b47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP hexstr2bytes</definition>
        <argsstring>(LISP a)</argsstring>
        <name>hexstr2bytes</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1818" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1817" bodyend="1828"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a6a12f9789c94113781f33587c6781d4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP getprop</definition>
        <argsstring>(LISP plist, LISP key)</argsstring>
        <name>getprop</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>plist</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1831" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1830" bodyend="1837"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1ab0ea6aaf43ceaa047545f97614d3b797" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP setprop</definition>
        <argsstring>(LISP plist, LISP key, LISP value)</argsstring>
        <name>setprop</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>plist</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1840" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1839" bodyend="1841"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a15cf9c75ecdb2c97ee7fc35f34d35b73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP putprop</definition>
        <argsstring>(LISP plist, LISP value, LISP key)</argsstring>
        <name>putprop</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>plist</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1844" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1843" bodyend="1844"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a40b75fffc9d0f0d24879b551d63f00b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP ltypeof</definition>
        <argsstring>(LISP obj)</argsstring>
        <name>ltypeof</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1847" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1846" bodyend="1872"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1aae7f1f2ff69f5a1fb2a144777498d456" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP caaar</definition>
        <argsstring>(LISP x)</argsstring>
        <name>caaar</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1875" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1874" bodyend="1875"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a44ca105c3041e9263dcab26e499cd2ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP caadr</definition>
        <argsstring>(LISP x)</argsstring>
        <name>caadr</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1878" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1877" bodyend="1878"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a58de03deedd9c3908850b9ba89f13376" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP cadar</definition>
        <argsstring>(LISP x)</argsstring>
        <name>cadar</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1881" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1880" bodyend="1881"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a80088caaed8decf8006f7a5b7cf656ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP caddr</definition>
        <argsstring>(LISP x)</argsstring>
        <name>caddr</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1884" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1883" bodyend="1884"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a05c5c5c4da00b7c2735d3fc149927f8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP cdaar</definition>
        <argsstring>(LISP x)</argsstring>
        <name>cdaar</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1887" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1886" bodyend="1887"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a8af90aac72c15018ff47a2e8aa98da1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP cdadr</definition>
        <argsstring>(LISP x)</argsstring>
        <name>cdadr</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1890" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1889" bodyend="1890"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1aca29a49f02a1304d24bb8f23a1342bd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP cddar</definition>
        <argsstring>(LISP x)</argsstring>
        <name>cddar</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1893" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1892" bodyend="1893"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a825ae18cb3c418d56432439ac7d65966" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP cdddr</definition>
        <argsstring>(LISP x)</argsstring>
        <name>cdddr</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1896" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1895" bodyend="1896"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a3ea735cec8244debcd1ba88686ae989f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP ash</definition>
        <argsstring>(LISP value, LISP n)</argsstring>
        <name>ash</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1899" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1898" bodyend="1906"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1aacb9bc798ad268f223a30942e60822c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP bitand</definition>
        <argsstring>(LISP a, LISP b)</argsstring>
        <name>bitand</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1909" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1908" bodyend="1909"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a0e93651dd9380c205f403eeb048b1171" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP bitor</definition>
        <argsstring>(LISP a, LISP b)</argsstring>
        <name>bitor</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1912" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1911" bodyend="1912"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1aa5a3bc329581b0ae39422efcb9fa2d76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP bitxor</definition>
        <argsstring>(LISP a, LISP b)</argsstring>
        <name>bitxor</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1915" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1914" bodyend="1915"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a68411cc2a3024097b11a7bf534108575" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP bitnot</definition>
        <argsstring>(LISP a)</argsstring>
        <name>bitnot</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1918" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1917" bodyend="1918"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1aefb43a41a75c371b06964509a5db750a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP leval_prog1</definition>
        <argsstring>(LISP args, LISP env)</argsstring>
        <name>leval_prog1</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>args</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>env</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1921" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1920" bodyend="1925"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a49cdd859244d9600bc4eee6d3fe0be38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP leval_cond</definition>
        <argsstring>(LISP *pform, LISP *penv)</argsstring>
        <name>leval_cond</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref> *</type>
          <declname>pform</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref> *</type>
          <declname>penv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1928" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1927" bodyend="1969"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a6f0759670ac32dce64987b9425986c34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lstrspn</definition>
        <argsstring>(LISP str1, LISP str2)</argsstring>
        <name>lstrspn</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>str1</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>str2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1972" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1971" bodyend="1972"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1afd5cbf41a993ed90147cd541533b5898" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lstrcspn</definition>
        <argsstring>(LISP str1, LISP str2)</argsstring>
        <name>lstrcspn</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>str1</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>str2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1975" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1974" bodyend="1975"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a3d8c76081c21417594b8f540cac2f082" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP substring_equal</definition>
        <argsstring>(LISP str1, LISP str2, LISP start, LISP end)</argsstring>
        <name>substring_equal</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>str1</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>str2</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>start</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1978" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1977" bodyend="1986"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1adcfe560c4092beb633fef0e75492fc28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int strncasecmp</definition>
        <argsstring>(const char *s1, const char *s2, int n)</argsstring>
        <name>strncasecmp</name>
        <param>
          <type>const char *</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="1990" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="1989" bodyend="1999"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1afdb8566d930b88ae47381ecbe1354e5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP substring_equalcase</definition>
        <argsstring>(LISP str1, LISP str2, LISP start, LISP end)</argsstring>
        <name>substring_equalcase</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>str1</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>str2</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>start</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="2003" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="2002" bodyend="2011"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a4370876647b1b9687d03d1c361d2e829" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP set_eval_history</definition>
        <argsstring>(LISP len, LISP circ)</argsstring>
        <name>set_eval_history</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>len</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>circ</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="2014" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="2013" bodyend="2020"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a6c450d712857363516b4958f7a1fd740" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>static LISP parser_fasl</definition>
        <argsstring>(LISP ignore)</argsstring>
        <name>parser_fasl</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>ignore</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="2023" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="2022" bodyend="2027"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1ab334d8417ae2296dc8fbc991ee4a25b3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>static LISP parser_fasl_hook</definition>
        <argsstring>(LISP env, LISP f)</argsstring>
        <name>parser_fasl_hook</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>env</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="2030" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="2029" bodyend="2036"/>
      </memberdef>
      <memberdef kind="function" id="sliba_8c_1a8aca0a64d43d28620c4a7633d62e8e5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_subrs_a</definition>
        <argsstring>(void)</argsstring>
        <name>init_subrs_a</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" line="2039" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c" bodystart="2038" bodyend="2152"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/><sp/></highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>COPYRIGHT<sp/>(c)<sp/>1988-1996<sp/>BY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PARADIGM<sp/>ASSOCIATES<sp/>INCORPORATED,<sp/>CAMBRIDGE,<sp/>MASSACHUSETTS.<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>See<sp/>the<sp/>source<sp/>file<sp/>SLIB.C<sp/>for<sp/>more<sp/>information.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"></highlight></codeline>
<codeline lineno="6"><highlight class="comment">Array-hacking<sp/>code<sp/>moved<sp/>to<sp/>another<sp/>source<sp/>file.</highlight></codeline>
<codeline lineno="7"><highlight class="comment"></highlight></codeline>
<codeline lineno="8"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32</highlight></codeline>
<codeline lineno="10"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#pragma<sp/>warning(<sp/>disable<sp/>:<sp/>4996<sp/>)</highlight></codeline>
<codeline lineno="11"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight></codeline>
<codeline lineno="12"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;setjmp.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdarg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ctype.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;siod.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;siodp.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init_sliba_version(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="24"><highlight class="normal">{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>setvar(cintern(</highlight><highlight class="stringliteral">&quot;*sliba-version*&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>cintern(</highlight><highlight class="stringliteral">&quot;$Id:<sp/>sliba.c,v<sp/>1.1<sp/>2001/02/03<sp/>15:38:49<sp/>gjcarret<sp/>Exp<sp/>gjcarret<sp/>$&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>NIL);</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>sym_plists<sp/>=<sp/>NIL;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>bashnum<sp/>=<sp/>NIL;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>sym_e<sp/>=<sp/>NIL;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>sym_f<sp/>=<sp/>NIL;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init_storage_a1(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>type)</highlight></codeline>
<codeline lineno="36"><highlight class="normal">{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structuser__type__hooks" kindref="compound">user_type_hooks</ref><sp/>*p;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>set_gc_hooks(type,</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>array_gc_relocate,</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>array_gc_mark,</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>array_gc_scan,</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>array_gc_free,</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>&amp;j);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>set_print_hooks(type,array_prin1);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>get_user_type_hooks(type);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;fast_print<sp/>=<sp/>array_fast_print;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;fast_read<sp/>=<sp/>array_fast_read;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;equal<sp/>=<sp/>array_equal;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;c_sxhash<sp/>=<sp/>array_sxhash;</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init_storage_a(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="54"><highlight class="normal">{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>gc_protect(&amp;bashnum);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>bashnum<sp/>=<sp/>newcell(tc_flonum);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>init_storage_a1(tc_string);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>init_storage_a1(tc_double_array);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>init_storage_a1(tc_long_array);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>init_storage_a1(tc_lisp_array);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>init_storage_a1(tc_byte_array);</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>array_gc_relocate(<ref refid="structobj" kindref="compound">LISP</ref><sp/>ptr)</highlight></codeline>
<codeline lineno="65"><highlight class="normal">{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>nw;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((nw<sp/>=<sp/>heap)<sp/>&gt;=<sp/>heap_end)<sp/>gc_fatal_error();</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>heap<sp/>=<sp/>nw+1;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(nw,ptr,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">obj</ref>));</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(nw);</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>array_gc_scan(<ref refid="structobj" kindref="compound">LISP</ref><sp/>ptr)</highlight></codeline>
<codeline lineno="74"><highlight class="normal">{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>TYPEP(ptr,tc_lisp_array)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>for(j=0;j<sp/>&lt;<sp/>ptr-&gt;storage_as.lisp_array.dim;<sp/>++j)</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr-&gt;storage_as.lisp_array.data[j]<sp/>=<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gc_relocate(ptr-&gt;storage_as.lisp_array.data[j]);}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>array_gc_mark(<ref refid="structobj" kindref="compound">LISP</ref><sp/>ptr)</highlight></codeline>
<codeline lineno="82"><highlight class="normal">{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>TYPEP(ptr,tc_lisp_array)</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>for(j=0;j<sp/>&lt;<sp/>ptr-&gt;storage_as.lisp_array.dim;<sp/>++j)</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gc_mark(ptr-&gt;storage_as.lisp_array.data[j]);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>return(NIL);</highlight></codeline>
<codeline lineno="88"><highlight class="normal">}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>array_gc_free(<ref refid="structobj" kindref="compound">LISP</ref><sp/>ptr)</highlight></codeline>
<codeline lineno="91"><highlight class="normal">{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(ptr-&gt;type)</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_string:</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_byte_array:</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>1</highlight></codeline>
<codeline lineno="97"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(ptr-&gt;storage_as.string.data,</highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal">,ptr-&gt;storage_as.string.dim);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="99"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(ptr-&gt;storage_as.string.data);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_double_array:</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(ptr-&gt;storage_as.double_array.data);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_long_array:</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(ptr-&gt;storage_as.long_array.data);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_lisp_array:</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(ptr-&gt;storage_as.lisp_array.data);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>1</highlight></codeline>
<codeline lineno="112"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>ptr-&gt;storage_as.lisp_array.data<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="114"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>array_prin1(<ref refid="structobj" kindref="compound">LISP</ref><sp/>ptr,</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgen__printio" kindref="compound">gen_printio</ref><sp/>*f)</highlight></codeline>
<codeline lineno="118"><highlight class="normal">{</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(ptr-&gt;type)</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_string:</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gput_st(f,</highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcspn(ptr-&gt;storage_as.string.data,</highlight><highlight class="stringliteral">&quot;\&quot;\\\n\r\t&quot;</highlight><highlight class="normal">)<sp/>==</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>strlen(ptr-&gt;storage_as.string.data))</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>gput_st(f,ptr-&gt;storage_as.string.data);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,c;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>cbuff[3];</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>strlen(ptr-&gt;storage_as.string.data);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;j&lt;n;++j)</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(c<sp/>=<sp/>ptr-&gt;storage_as.string.data[j])</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cbuff[0]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cbuff[1]<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cbuff[2]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gput_st(f,cbuff);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gput_st(f,</highlight><highlight class="stringliteral">&quot;\\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gput_st(f,</highlight><highlight class="stringliteral">&quot;\\r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gput_st(f,</highlight><highlight class="stringliteral">&quot;\\t&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cbuff[0]<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cbuff[1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gput_st(f,cbuff);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;}}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gput_st(f,</highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_double_array:</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gput_st(f,</highlight><highlight class="stringliteral">&quot;#(&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;<sp/>j<sp/>&lt;<sp/>ptr-&gt;storage_as.double_array.dim;<sp/>++j)</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>{sprintf(tkbuffer,</highlight><highlight class="stringliteral">&quot;%g&quot;</highlight><highlight class="normal">,ptr-&gt;storage_as.double_array.data[j]);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>gput_st(f,tkbuffer);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((j<sp/>+<sp/>1)<sp/>&lt;<sp/>ptr-&gt;storage_as.double_array.dim)</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gput_st(f,</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gput_st(f,</highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_long_array:</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gput_st(f,</highlight><highlight class="stringliteral">&quot;#(&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;<sp/>j<sp/>&lt;<sp/>ptr-&gt;storage_as.long_array.dim;<sp/>++j)</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>{sprintf(tkbuffer,</highlight><highlight class="stringliteral">&quot;%ld&quot;</highlight><highlight class="normal">,ptr-&gt;storage_as.long_array.data[j]);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>gput_st(f,tkbuffer);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((j<sp/>+<sp/>1)<sp/>&lt;<sp/>ptr-&gt;storage_as.long_array.dim)</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gput_st(f,</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gput_st(f,</highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_byte_array:</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(tkbuffer,</highlight><highlight class="stringliteral">&quot;#%ld\&quot;&quot;</highlight><highlight class="normal">,ptr-&gt;storage_as.string.dim);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gput_st(f,tkbuffer);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;<sp/>j<sp/>&lt;<sp/>ptr-&gt;storage_as.string.dim;<sp/>++j)</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>{sprintf(tkbuffer,</highlight><highlight class="stringliteral">&quot;%02x&quot;</highlight><highlight class="normal">,ptr-&gt;storage_as.string.data[j]<sp/>&amp;<sp/>0xFF);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>gput_st(f,tkbuffer);}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gput_st(f,</highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_lisp_array:</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gput_st(f,</highlight><highlight class="stringliteral">&quot;#(&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;<sp/>j<sp/>&lt;<sp/>ptr-&gt;storage_as.lisp_array.dim;<sp/>++j)</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>{lprin1g(ptr-&gt;storage_as.lisp_array.data[j],f);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((j<sp/>+<sp/>1)<sp/>&lt;<sp/>ptr-&gt;storage_as.lisp_array.dim)</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gput_st(f,</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gput_st(f,</highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;}}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>strcons(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>length,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data)</highlight></codeline>
<codeline lineno="189"><highlight class="normal">{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>flag;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>s;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>flag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>=<sp/>cons(NIL,NIL);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;type<sp/>=<sp/>tc_string;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length<sp/>==<sp/>-1)<sp/>length<sp/>=<sp/>strlen(data);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;storage_as.string.data<sp/>=<sp/>must_malloc(length+1);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;storage_as.string.dim<sp/>=<sp/>length;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data)</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(s-&gt;storage_as.string.data,data,length);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;storage_as.string.data[length]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>no_interrupt(flag);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(s);</highlight></codeline>
<codeline lineno="203"><highlight class="normal">}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rfs_getc(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**p)</highlight></codeline>
<codeline lineno="206"><highlight class="normal">{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>**p;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!i)<sp/></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(EOF);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>*p<sp/>=<sp/>*p<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(i);</highlight></codeline>
<codeline lineno="213"><highlight class="normal">}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>rfs_ungetc(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c,</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**p)</highlight></codeline>
<codeline lineno="216"><highlight class="normal">{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>*p<sp/>=<sp/>*p<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="218"><highlight class="normal">}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>read_from_string(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x)</highlight></codeline>
<codeline lineno="221"><highlight class="normal">{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgen__readio" kindref="compound">gen_readio</ref><sp/>s;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>get_c_string(x);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>s.getc_fcn<sp/>=<sp/>(int<sp/>(*)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))rfs_getc;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>s.ungetc_fcn<sp/>=<sp/>(void<sp/>(*)(int,</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))rfs_ungetc;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>s.cb_argument<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>&amp;p;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(readtl(&amp;s));</highlight></codeline>
<codeline lineno="229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pts_puts(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*from,</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*cb)</highlight></codeline>
<codeline lineno="232"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>into;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>fromlen,intolen,intosize,fitsize;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/>into<sp/>=<sp/>(<ref refid="structobj" kindref="compound">LISP</ref>)<sp/>cb;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/>fromlen<sp/>=<sp/>strlen(from);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/>intolen<sp/>=<sp/>strlen(into-&gt;storage_as.string.data);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/>intosize<sp/>=<sp/>into-&gt;storage_as.string.dim<sp/><sp/>-<sp/>intolen;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/>fitsize<sp/>=<sp/>(fromlen<sp/>&lt;<sp/>intosize)<sp/>?<sp/>fromlen<sp/>:<sp/>intosize;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/>memcpy(&amp;into-&gt;storage_as.string.data[intolen],from,fitsize);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/>into-&gt;storage_as.string.data[intolen+fitsize]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fitsize<sp/>&lt;<sp/>fromlen)</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;print<sp/>to<sp/>string<sp/>overflow&quot;</highlight><highlight class="normal">,NIL);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(1);}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>err_wta_str(<ref refid="structobj" kindref="compound">LISP</ref><sp/>exp)</highlight></codeline>
<codeline lineno="246"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(err(</highlight><highlight class="stringliteral">&quot;not<sp/>a<sp/>string&quot;</highlight><highlight class="normal">,exp));}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>print_to_string(<ref refid="structobj" kindref="compound">LISP</ref><sp/>exp,<ref refid="structobj" kindref="compound">LISP</ref><sp/>str,<ref refid="structobj" kindref="compound">LISP</ref><sp/>nostart)</highlight></codeline>
<codeline lineno="249"><highlight class="normal">{</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgen__printio" kindref="compound">gen_printio</ref><sp/>s;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NTYPEP(str,tc_string)<sp/>err_wta_str(str);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/>s.putc_fcn<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/>s.puts_fcn<sp/>=<sp/>pts_puts;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/>s.cb_argument<sp/>=<sp/>str;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/>if<sp/>NULLP(nostart)</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/>str-&gt;storage_as.</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.data[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/>lprin1g(exp,&amp;s);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/>return(str);}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>aref1(<ref refid="structobj" kindref="compound">LISP</ref><sp/>a,<ref refid="structobj" kindref="compound">LISP</ref><sp/>i)</highlight></codeline>
<codeline lineno="260"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>k;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NFLONUMP(i)<sp/>err(&quot;bad<sp/>index<sp/>to<sp/>aref&quot;,i);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/>k<sp/>=<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>FLONM(i);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/>if<sp/>(k<sp/>&lt;<sp/>0)<sp/>err(&quot;negative<sp/>index<sp/>to<sp/>aref&quot;,i);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/>switch<sp/>TYPE(a)</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_string:</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>&gt;=<sp/>a-&gt;storage_as.string.dim)<sp/>err(</highlight><highlight class="stringliteral">&quot;index<sp/>too<sp/>large&quot;</highlight><highlight class="normal">,i);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>a-&gt;storage_as.u_string.data[k]));</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_byte_array:</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>&gt;=<sp/>a-&gt;storage_as.string.dim)<sp/>err(</highlight><highlight class="stringliteral">&quot;index<sp/>too<sp/>large&quot;</highlight><highlight class="normal">,i);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>a-&gt;storage_as.string.data[k]));</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_double_array:</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>&gt;=<sp/>a-&gt;storage_as.double_array.dim)<sp/>err(</highlight><highlight class="stringliteral">&quot;index<sp/>too<sp/>large&quot;</highlight><highlight class="normal">,i);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(a-&gt;storage_as.double_array.data[k]));</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_long_array:</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>&gt;=<sp/>a-&gt;storage_as.long_array.dim)<sp/>err(</highlight><highlight class="stringliteral">&quot;index<sp/>too<sp/>large&quot;</highlight><highlight class="normal">,i);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(a-&gt;storage_as.long_array.data[k]));</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_lisp_array:</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>&gt;=<sp/>a-&gt;storage_as.lisp_array.dim)<sp/>err(</highlight><highlight class="stringliteral">&quot;index<sp/>too<sp/>large&quot;</highlight><highlight class="normal">,i);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(a-&gt;storage_as.lisp_array.data[k]);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(err(</highlight><highlight class="stringliteral">&quot;invalid<sp/>argument<sp/>to<sp/>aref&quot;</highlight><highlight class="normal">,a));}}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>err1_aset1(<ref refid="structobj" kindref="compound">LISP</ref><sp/>i)</highlight></codeline>
<codeline lineno="284"><highlight class="normal">{err(</highlight><highlight class="stringliteral">&quot;index<sp/>to<sp/>aset<sp/>too<sp/>large&quot;</highlight><highlight class="normal">,i);}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>err2_aset1(<ref refid="structobj" kindref="compound">LISP</ref><sp/>v)</highlight></codeline>
<codeline lineno="287"><highlight class="normal">{err(</highlight><highlight class="stringliteral">&quot;bad<sp/>value<sp/>to<sp/>store<sp/>in<sp/>array&quot;</highlight><highlight class="normal">,v);}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>aset1(<ref refid="structobj" kindref="compound">LISP</ref><sp/>a,<ref refid="structobj" kindref="compound">LISP</ref><sp/>i,<ref refid="structobj" kindref="compound">LISP</ref><sp/>v)</highlight></codeline>
<codeline lineno="290"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>k;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NFLONUMP(i)<sp/>err(&quot;bad<sp/>index<sp/>to<sp/>aset&quot;,i);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/>k<sp/>=<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>FLONM(i);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/>if<sp/>(k<sp/>&lt;<sp/>0)<sp/>err(&quot;negative<sp/>index<sp/>to<sp/>aset&quot;,i);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/>switch<sp/>TYPE(a)</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_string:</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_byte_array:</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NFLONUMP(v)<sp/>err2_aset1(v);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(k<sp/>&gt;=<sp/>a-&gt;storage_as.</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.dim)<sp/>err1_aset1(i);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a-&gt;storage_as.</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.data[k]<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>FLONM(v);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return(v);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>case<sp/>tc_double_array:</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>NFLONUMP(v)<sp/>err2_aset1(v);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(k<sp/>&gt;=<sp/>a-&gt;storage_as.double_array.dim)<sp/>err1_aset1(i);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a-&gt;storage_as.double_array.data[k]<sp/>=<sp/>FLONM(v);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return(v);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>case<sp/>tc_long_array:</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>NFLONUMP(v)<sp/>err2_aset1(v);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(k<sp/>&gt;=<sp/>a-&gt;storage_as.long_array.dim)<sp/>err1_aset1(i);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a-&gt;storage_as.long_array.data[k]<sp/>=<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>FLONM(v);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return(v);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>case<sp/>tc_lisp_array:</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(k<sp/>&gt;=<sp/>a-&gt;storage_as.lisp_array.dim)<sp/>err1_aset1(i);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a-&gt;storage_as.lisp_array.data[k]<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return(v);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>default:</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return(err(&quot;invalid<sp/>argument<sp/>to<sp/>aset&quot;,a));}}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>arcons(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>typecode,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>n,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>initp)</highlight></codeline>
<codeline lineno="319"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>a;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>flag,j;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/>flag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/>a<sp/>=<sp/>cons(NIL,NIL);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(typecode)</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_double_array:</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a-&gt;storage_as.double_array.dim<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a-&gt;storage_as.double_array.data<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)<sp/>must_malloc(n<sp/>*</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(initp)</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;j&lt;n;++j)<sp/>a-&gt;storage_as.double_array.data[j]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_long_array:</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a-&gt;storage_as.long_array.dim<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a-&gt;storage_as.long_array.data<sp/>=<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*)<sp/>must_malloc(n<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(initp)</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;j&lt;n;++j)<sp/>a-&gt;storage_as.long_array.data[j]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_string:</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a-&gt;storage_as.string.dim<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a-&gt;storage_as.string.data<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>must_malloc(n+1);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a-&gt;storage_as.string.data[n]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(initp)</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;j&lt;n;++j)<sp/>a-&gt;storage_as.string.data[j]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_byte_array:</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a-&gt;storage_as.string.dim<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a-&gt;storage_as.string.data<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>must_malloc(n);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(initp)</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;j&lt;n;++j)<sp/>a-&gt;storage_as.string.data[j]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_lisp_array:</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a-&gt;storage_as.lisp_array.dim<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a-&gt;storage_as.lisp_array.data<sp/>=<sp/>(<ref refid="structobj" kindref="compound">LISP</ref><sp/>*)<sp/>must_malloc(n<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structobj" kindref="compound">LISP</ref>));</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;j&lt;n;++j)<sp/>a-&gt;storage_as.lisp_array.data[j]<sp/>=<sp/>NIL;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>errswitch();}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/>a-&gt;type<sp/>=<sp/>(short)<sp/>typecode;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/>no_interrupt(flag);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(a);}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>mallocl(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*place,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>size)</highlight></codeline>
<codeline lineno="361"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>n,r;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>retval;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/>n<sp/>=<sp/>size<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(long);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/>r<sp/>=<sp/>size<sp/>%<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(long);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r)<sp/>++n;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/>retval<sp/>=<sp/>arcons(tc_long_array,n,0);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/>*(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>**)place<sp/>=<sp/>retval-&gt;storage_as.long_array.data;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(retval);}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>cons_array(<ref refid="structobj" kindref="compound">LISP</ref><sp/>dim,<ref refid="structobj" kindref="compound">LISP</ref><sp/>kind)</highlight></codeline>
<codeline lineno="371"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>a;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>flag,n,j;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NFLONUMP(dim)<sp/>||<sp/>(FLONM(dim)<sp/>&lt;<sp/>0))</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(err(</highlight><highlight class="stringliteral">&quot;bad<sp/>dimension<sp/>to<sp/>cons-array&quot;</highlight><highlight class="normal">,dim));</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/>n<sp/>=<sp/>(long)<sp/>FLONM(dim);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/>flag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/>a<sp/>=<sp/>cons(NIL,NIL);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>EQ(cintern(</highlight><highlight class="stringliteral">&quot;double&quot;</highlight><highlight class="normal">),kind)</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/>{a-&gt;type<sp/>=<sp/>tc_double_array;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>a-&gt;storage_as.double_array.dim<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>a-&gt;storage_as.double_array.data<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)<sp/>must_malloc(n<sp/>*</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;j&lt;n;++j)<sp/>a-&gt;storage_as.double_array.data[j]<sp/>=<sp/>0.0;}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>EQ(cintern(</highlight><highlight class="stringliteral">&quot;long&quot;</highlight><highlight class="normal">),kind)</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/>{a-&gt;type<sp/>=<sp/>tc_long_array;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>a-&gt;storage_as.long_array.dim<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>a-&gt;storage_as.long_array.data<sp/>=<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*)<sp/>must_malloc(n<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;j&lt;n;++j)<sp/>a-&gt;storage_as.long_array.data[j]<sp/>=<sp/>0;}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>EQ(cintern(</highlight><highlight class="stringliteral">&quot;string&quot;</highlight><highlight class="normal">),kind)</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/>{a-&gt;type<sp/>=<sp/>tc_string;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>a-&gt;storage_as.string.dim<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>a-&gt;storage_as.string.data<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>must_malloc(n+1);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>a-&gt;storage_as.string.data[n]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;j&lt;n;++j)<sp/>a-&gt;storage_as.string.data[j]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>EQ(cintern(</highlight><highlight class="stringliteral">&quot;byte&quot;</highlight><highlight class="normal">),kind)</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/>{a-&gt;type<sp/>=<sp/>tc_byte_array;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>a-&gt;storage_as.string.dim<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>a-&gt;storage_as.string.data<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>must_malloc(n);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;j&lt;n;++j)<sp/>a-&gt;storage_as.string.data[j]<sp/>=<sp/>0;}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(EQ(cintern(</highlight><highlight class="stringliteral">&quot;lisp&quot;</highlight><highlight class="normal">),kind)<sp/>||<sp/>NULLP(kind))</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/>{a-&gt;type<sp/>=<sp/>tc_lisp_array;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>a-&gt;storage_as.lisp_array.dim<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>a-&gt;storage_as.lisp_array.data<sp/>=<sp/>(<ref refid="structobj" kindref="compound">LISP</ref><sp/>*)<sp/>must_malloc(n<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structobj" kindref="compound">LISP</ref>));</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;j&lt;n;++j)<sp/>a-&gt;storage_as.lisp_array.data[j]<sp/>=<sp/>NIL;}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;bad<sp/>type<sp/>of<sp/>array&quot;</highlight><highlight class="normal">,kind);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/>no_interrupt(flag);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(a);}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>string_append(<ref refid="structobj" kindref="compound">LISP</ref><sp/>args)</highlight></codeline>
<codeline lineno="412"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>l,s;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/>size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(l=args;NNULLP(l);l=cdr(l))</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/>size<sp/>+=<sp/>strlen(get_c_string(car(l)));</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/>s<sp/>=<sp/>strcons(size,NULL);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/>data<sp/>=<sp/>s-&gt;storage_as.string.data;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/>data[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(l=args;NNULLP(l);l=cdr(l))</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/>strcat(data,get_c_string(car(l)));</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(s);}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>bytes_append(<ref refid="structobj" kindref="compound">LISP</ref><sp/>args)</highlight></codeline>
<codeline lineno="426"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>size,n,j;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>l,s;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data,*ptr;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/>size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(l=args;NNULLP(l);l=cdr(l))</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/>{get_c_string_dim(car(l),&amp;n);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>size<sp/>+=<sp/>n;}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/>s<sp/>=<sp/>arcons(tc_byte_array,size,0);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/>data<sp/>=<sp/>s-&gt;storage_as.string.data;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0,l=args;NNULLP(l);l=cdr(l))</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/>{ptr<sp/>=<sp/>get_c_string_dim(car(l),&amp;n);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;data[j],ptr,n);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>j<sp/>+=<sp/>n;}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(s);}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>substring(<ref refid="structobj" kindref="compound">LISP</ref><sp/>str,<ref refid="structobj" kindref="compound">LISP</ref><sp/>start,<ref refid="structobj" kindref="compound">LISP</ref><sp/>end)</highlight></codeline>
<codeline lineno="442"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>s,e,n;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/>data<sp/>=<sp/>get_c_string_dim(str,&amp;n);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/>s<sp/>=<sp/>get_c_long(start);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NULLP(end)</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/>e<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/>else</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/>e<sp/>=<sp/>get_c_long(end);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/>if<sp/>((s<sp/>&lt;<sp/>0)<sp/>||<sp/>(s<sp/>&gt;<sp/>e))<sp/>err(&quot;bad<sp/>start<sp/>index&quot;,start);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/>if<sp/>((e<sp/>&lt;<sp/>0)<sp/>||<sp/>(e<sp/>&gt;<sp/>n))<sp/>err(&quot;bad<sp/>end<sp/>index&quot;,end);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/>return(strcons(e-s,&amp;data[s]));}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>string_search(<ref refid="structobj" kindref="compound">LISP</ref><sp/>token,<ref refid="structobj" kindref="compound">LISP</ref><sp/>str)</highlight></codeline>
<codeline lineno="455"><highlight class="normal">{</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s1,*s2,*ptr;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/>s1<sp/>=<sp/>get_c_string(str);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/>s2<sp/>=<sp/>get_c_string(token);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/>ptr<sp/>=<sp/>strstr(s1,s2);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr)</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(ptr<sp/>-<sp/>s1));</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IS_TRIM_SPACE(_x)<sp/>(strchr(&quot;<sp/>\t\r\n&quot;,(_x)))</highlight></codeline>
<codeline lineno="465"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>string_trim(<ref refid="structobj" kindref="compound">LISP</ref><sp/>str)</highlight></codeline>
<codeline lineno="467"><highlight class="normal">{</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*start,*end;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/>start<sp/>=<sp/>get_c_string(str);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(*start<sp/>&amp;&amp;<sp/>IS_TRIM_SPACE(*start))<sp/>++start;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/>end<sp/>=<sp/>&amp;start[strlen(start)];</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">((end<sp/>&gt;<sp/>start)<sp/>&amp;&amp;<sp/>IS_TRIM_SPACE(*(end-1)))<sp/>--end;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(strcons(end-start,start));}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>string_trim_left(<ref refid="structobj" kindref="compound">LISP</ref><sp/>str)</highlight></codeline>
<codeline lineno="475"><highlight class="normal">{</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*start,*end;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/>start<sp/>=<sp/>get_c_string(str);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(*start<sp/>&amp;&amp;<sp/>IS_TRIM_SPACE(*start))<sp/>++start;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/>end<sp/>=<sp/>&amp;start[strlen(start)];</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(strcons(end-start,start));}</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>string_trim_right(<ref refid="structobj" kindref="compound">LISP</ref><sp/>str)</highlight></codeline>
<codeline lineno="482"><highlight class="normal">{</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*start,*end;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/>start<sp/>=<sp/>get_c_string(str);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/>end<sp/>=<sp/>&amp;start[strlen(start)];</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">((end<sp/>&gt;<sp/>start)<sp/>&amp;&amp;<sp/>IS_TRIM_SPACE(*(end-1)))<sp/>--end;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(strcons(end-start,start));}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>string_upcase(<ref refid="structobj" kindref="compound">LISP</ref><sp/>str)</highlight></codeline>
<codeline lineno="489"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>result;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s1,*s2;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>j,n;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/>s1<sp/>=<sp/>get_c_string(str);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/>n<sp/>=<sp/>strlen(s1);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/>result<sp/>=<sp/>strcons(n,s1);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/>s2<sp/>=<sp/>get_c_string(result);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;j&lt;n;++j)<sp/>s2[j]<sp/>=<sp/>toupper(s2[j]);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>string_downcase(<ref refid="structobj" kindref="compound">LISP</ref><sp/>str)</highlight></codeline>
<codeline lineno="500"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>result;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s1,*s2;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>j,n;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/>s1<sp/>=<sp/>get_c_string(str);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/>n<sp/>=<sp/>strlen(s1);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/>result<sp/>=<sp/>strcons(n,s1);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/>s2<sp/>=<sp/>get_c_string(result);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;j&lt;n;++j)<sp/>s2[j]<sp/>=<sp/>tolower(s2[j]);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);}</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lreadstring(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgen__readio" kindref="compound">gen_readio</ref><sp/>*f)</highlight></codeline>
<codeline lineno="511"><highlight class="normal">{</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j,c,n;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/>p<sp/>=<sp/>tkbuffer;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(((c<sp/>=<sp/>GETC_FCN(f))<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>(c<sp/>!=<sp/>EOF))</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{c<sp/>=<sp/>GETC_FCN(f);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>EOF)<sp/>err(</highlight><highlight class="stringliteral">&quot;eof<sp/>after<sp/>\\&quot;</highlight><highlight class="normal">,NIL);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(c)</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;n&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;t&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;r&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>0x04;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;N&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;s&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(1)</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{c<sp/>=<sp/>GETC_FCN(f);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>EOF)<sp/>err(</highlight><highlight class="stringliteral">&quot;eof<sp/>after<sp/>\\0&quot;</highlight><highlight class="normal">,NIL);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isdigit(c))</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>n<sp/>*<sp/>8<sp/>+<sp/>c<sp/>-<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{UNGETC_FCN(c,f);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;}}</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>n;}}</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((j<sp/>+<sp/>1)<sp/>&gt;=<sp/>TKBUFFERN)<sp/>err(</highlight><highlight class="stringliteral">&quot;read<sp/>string<sp/>overflow&quot;</highlight><highlight class="normal">,NIL);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>++j;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>*p++<sp/>=<sp/>c;}</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/>*p<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(strcons(j,tkbuffer));}</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lreadsharp(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgen__readio" kindref="compound">gen_readio</ref><sp/>*f)</highlight></codeline>
<codeline lineno="557"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/><ref refid="structobj" kindref="compound">obj</ref>,l,result;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>j,n;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/>c<sp/>=<sp/>GETC_FCN(f);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(c)</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;(&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UNGETC_FCN(c,f);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj<sp/>=<sp/>lreadr(f);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>nlength(obj);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>arcons(tc_lisp_array,n,1);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(l=obj,j=0;j&lt;n;l=cdr(l),++j)</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>result-&gt;storage_as.lisp_array.data[j]<sp/>=<sp/>car(l);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj<sp/>=<sp/>lreadr(f);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(leval(obj,NIL));</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;t&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(1));</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(err(</highlight><highlight class="stringliteral">&quot;readsharp<sp/>syntax<sp/>not<sp/>handled&quot;</highlight><highlight class="normal">,NIL));}}</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HASH_COMBINE(_h1,_h2,_mod)<sp/>((((_h1)<sp/>*<sp/>17<sp/>+<sp/>1)<sp/>^<sp/>(_h2))<sp/>%<sp/>(_mod))</highlight></codeline>
<codeline lineno="581"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>c_sxhash(<ref refid="structobj" kindref="compound">LISP</ref><sp/>obj,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="583"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>hash;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>tmp;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structuser__type__hooks" kindref="compound">user_type_hooks</ref><sp/>*p;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/>STACK_CHECK(&amp;obj);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/>INTERRUPT_CHECK();</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>TYPE(obj)</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_nil:</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_cons:</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hash<sp/>=<sp/>c_sxhash(CAR(obj),n);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(tmp=CDR(obj);CONSP(tmp);tmp=CDR(tmp))</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>hash<sp/>=<sp/>HASH_COMBINE(hash,c_sxhash(CAR(tmp),n),n);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hash<sp/>=<sp/>HASH_COMBINE(hash,c_sxhash(tmp,n),n);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(hash);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_symbol:</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(hash=0,s=(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)PNAME(obj);*s;++s)</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>hash<sp/>=<sp/>HASH_COMBINE(hash,*s,n);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(hash);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_0:</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_1:</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_2:</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_3:</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_4:</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_5:</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_lsubr:</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_fsubr:</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_msubr:</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(hash=0,s=(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>obj-&gt;storage_as.subr.name;*s;++s)</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>hash<sp/>=<sp/>HASH_COMBINE(hash,*s,n);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(hash);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_flonum:</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)FLONM(obj))<sp/>%<sp/>n);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>get_user_type_hooks(TYPE(obj));</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p-&gt;c_sxhash)</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">((*p-&gt;c_sxhash)(obj,n));</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);}}</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>sxhash(<ref refid="structobj" kindref="compound">LISP</ref><sp/>obj,<ref refid="structobj" kindref="compound">LISP</ref><sp/>n)</highlight></codeline>
<codeline lineno="624"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(c_sxhash(obj,FLONUMP(n)<sp/>?<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>FLONM(n)<sp/>:<sp/>10000)));}</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>equal(<ref refid="structobj" kindref="compound">LISP</ref><sp/>a,<ref refid="structobj" kindref="compound">LISP</ref><sp/>b)</highlight></codeline>
<codeline lineno="627"><highlight class="normal">{</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structuser__type__hooks" kindref="compound">user_type_hooks</ref><sp/>*p;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>atype;</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/>STACK_CHECK(&amp;a);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/>loop:</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/>INTERRUPT_CHECK();</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>EQ(a,b)<sp/>return(sym_t);</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/>atype<sp/>=<sp/>TYPE(a);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/>if<sp/>(atype<sp/>!=<sp/>TYPE(b))<sp/>return(NIL);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/>switch(atype)</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_cons:</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NULLP(equal(car(a),car(b)))<sp/>return(NIL);</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>cdr(a);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>cdr(b);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>goto<sp/>loop;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/>case<sp/>tc_flonum:</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return((FLONM(a)<sp/>==<sp/>FLONM(b))<sp/>?<sp/>sym_t<sp/>:<sp/>NIL);</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/>case<sp/>tc_symbol:</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return(NIL);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/>default:</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>get_user_type_hooks(atype);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(p-&gt;equal)</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/>return((*p-&gt;equal)(a,b));</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>return(NIL);}}</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>array_equal(<ref refid="structobj" kindref="compound">LISP</ref><sp/>a,<ref refid="structobj" kindref="compound">LISP</ref><sp/>b)</highlight></codeline>
<codeline lineno="653"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>j,len;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(TYPE(a))</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_string:</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_byte_array:</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>a-&gt;storage_as.string.dim;</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>!=<sp/>b-&gt;storage_as.string.dim)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(memcmp(a-&gt;storage_as.string.data,b-&gt;storage_as.string.data,len)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(sym_t);</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_long_array:</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>a-&gt;storage_as.long_array.dim;</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>!=<sp/>b-&gt;storage_as.long_array.dim)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(memcmp(a-&gt;storage_as.long_array.data,</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b-&gt;storage_as.long_array.data,</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">))<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(sym_t);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_double_array:</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>a-&gt;storage_as.double_array.dim;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>!=<sp/>b-&gt;storage_as.double_array.dim)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;j&lt;len;++j)</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a-&gt;storage_as.double_array.data[j]<sp/>!=</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b-&gt;storage_as.double_array.data[j])</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(sym_t);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_lisp_array:</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>a-&gt;storage_as.lisp_array.dim;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>!=<sp/>b-&gt;storage_as.lisp_array.dim)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;j&lt;len;++j)</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NULLP(equal(a-&gt;storage_as.lisp_array.data[j],</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b-&gt;storage_as.lisp_array.data[j]))</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(sym_t);</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(errswitch());}}</highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>array_sxhash(<ref refid="structobj" kindref="compound">LISP</ref><sp/>a,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="692"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>j,len,hash;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*char_data;</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*long_data;</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*double_data;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(TYPE(a))</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_string:</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_byte_array:</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>a-&gt;storage_as.string.dim;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0,hash=0,char_data=(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)a-&gt;storage_as.string.data;</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>&lt;<sp/>len;</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++j,++char_data)</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/>hash<sp/>=<sp/>HASH_COMBINE(hash,*char_data,n);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(hash);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_long_array:</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>a-&gt;storage_as.long_array.dim;</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0,hash=0,long_data=(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*)a-&gt;storage_as.long_array.data;</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>&lt;<sp/>len;</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++j,++long_data)</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/>hash<sp/>=<sp/>HASH_COMBINE(hash,*long_data<sp/>%<sp/>n,n);</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(hash);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_double_array:</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>a-&gt;storage_as.double_array.dim;</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0,hash=0,double_data=a-&gt;storage_as.double_array.data;</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>&lt;<sp/>len;</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++j,++double_data)</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/>hash<sp/>=<sp/>HASH_COMBINE(hash,(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)*double_data<sp/>%<sp/>n,n);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(hash);</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_lisp_array:</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>a-&gt;storage_as.lisp_array.dim;</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0,hash=0;<sp/>j<sp/>&lt;<sp/>len;<sp/>++j)</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/>hash<sp/>=<sp/>HASH_COMBINE(hash,</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c_sxhash(a-&gt;storage_as.lisp_array.data[j],n),</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(hash);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>errswitch();</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);}}</highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>href_index(<ref refid="structobj" kindref="compound">LISP</ref><sp/>table,<ref refid="structobj" kindref="compound">LISP</ref><sp/>key)</highlight></codeline>
<codeline lineno="731"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>index;</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NTYPEP(table,tc_lisp_array)<sp/>err(&quot;not<sp/>a<sp/>hash<sp/>table&quot;,table);</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/>index<sp/>=<sp/>c_sxhash(key,table-&gt;storage_as.lisp_array.dim);</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/>if<sp/>((index<sp/>&lt;<sp/>0)<sp/>||<sp/>(index<sp/>&gt;=<sp/>table-&gt;storage_as.lisp_array.dim))</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/>{err(</highlight><highlight class="stringliteral">&quot;sxhash<sp/>inconsistency&quot;</highlight><highlight class="normal">,table);</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);}</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(index);}</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>href(<ref refid="structobj" kindref="compound">LISP</ref><sp/>table,<ref refid="structobj" kindref="compound">LISP</ref><sp/>key)</highlight></codeline>
<codeline lineno="741"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(cdr(assoc(key,</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>table-&gt;storage_as.lisp_array.data[href_index(table,key)])));}</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>hset(<ref refid="structobj" kindref="compound">LISP</ref><sp/>table,<ref refid="structobj" kindref="compound">LISP</ref><sp/>key,<ref refid="structobj" kindref="compound">LISP</ref><sp/>value)</highlight></codeline>
<codeline lineno="745"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>index;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>cell,l;</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/>index<sp/>=<sp/>href_index(table,key);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/>l<sp/>=<sp/>table-&gt;storage_as.lisp_array.data[index];</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NNULLP(cell<sp/>=<sp/>assoc(key,l))</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/>return(setcdr(cell,value));</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/>cell<sp/>=<sp/>cons(key,value);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/>table-&gt;storage_as.lisp_array.data[index]<sp/>=<sp/>cons(cell,l);</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/>return(value);}</highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>assoc(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x,<ref refid="structobj" kindref="compound">LISP</ref><sp/>alist)</highlight></codeline>
<codeline lineno="756"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>l,tmp;</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(l=alist;CONSP(l);l=CDR(l))</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/>{tmp<sp/>=<sp/>CAR(l);</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CONSP(tmp)<sp/>&amp;&amp;<sp/>equal(CAR(tmp),x))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(tmp);</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/>INTERRUPT_CHECK();}</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>EQ(l,NIL)<sp/>return(NIL);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/>return(err(&quot;improper<sp/>list<sp/>to<sp/>assoc&quot;,alist));}</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>assv(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x,<ref refid="structobj" kindref="compound">LISP</ref><sp/>alist)</highlight></codeline>
<codeline lineno="765"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>l,tmp;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(l=alist;CONSP(l);l=CDR(l))</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/>{tmp<sp/>=<sp/>CAR(l);</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CONSP(tmp)<sp/>&amp;&amp;<sp/>NNULLP(eql(CAR(tmp),x)))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(tmp);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/>INTERRUPT_CHECK();}</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>EQ(l,NIL)<sp/>return(NIL);</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/>return(err(&quot;improper<sp/>list<sp/>to<sp/>assv&quot;,alist));}</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>put_long(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i,FILE<sp/>*f)</highlight></codeline>
<codeline lineno="774"><highlight class="normal">{fwrite(&amp;i,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">),1,f);}</highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>get_long(FILE<sp/>*f)</highlight></codeline>
<codeline lineno="777"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/>fread(&amp;i,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">),1,f);</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(i);}</highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>fast_print_table(<ref refid="structobj" kindref="compound">LISP</ref><sp/>obj,<ref refid="structobj" kindref="compound">LISP</ref><sp/>table)</highlight></codeline>
<codeline lineno="782"><highlight class="normal">{FILE<sp/>*f;</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>ht,index;</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/>f<sp/>=<sp/>get_c_file(car(table),(FILE<sp/>*)<sp/>NULL);</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NULLP(ht<sp/>=<sp/>car(cdr(table)))</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/>return(1);</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/>index<sp/>=<sp/>href(ht,obj);</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/>if<sp/>NNULLP(index)</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/>{putc(FO_fetch,f);</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/>put_long(get_c_long(index),f);</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);}</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NULLP(index<sp/>=<sp/>car(cdr(cdr(table))))</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/>return(1);</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/>hset(ht,obj,index);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/>FLONM(bashnum)<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/>setcar(cdr(cdr(table)),plus(index,bashnum));</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/>putc(FO_store,f);</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/>put_long(get_c_long(index),f);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/>return(1);}</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>fast_print(<ref refid="structobj" kindref="compound">LISP</ref><sp/>obj,<ref refid="structobj" kindref="compound">LISP</ref><sp/>table)</highlight></codeline>
<codeline lineno="802"><highlight class="normal">{FILE<sp/>*f;</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>tmp;</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structuser__type__hooks" kindref="compound">user_type_hooks</ref><sp/>*p;</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/>STACK_CHECK(&amp;obj);</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/>f<sp/>=<sp/>get_c_file(car(table),(FILE<sp/>*)<sp/>NULL);</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(TYPE(obj))</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_nil:</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>putc(tc_nil,f);</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_cons:</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(len=0,tmp=obj;CONSP(tmp);tmp=CDR(tmp))<sp/>{INTERRUPT_CHECK();++len;}</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/>{putc(tc_cons,f);</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>fast_print(car(obj),table);</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>fast_print(cdr(obj),table);}</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NULLP(tmp)</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/>{putc(FO_list,f);</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>put_long(len,f);</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(tmp=obj;CONSP(tmp);tmp=CDR(tmp))</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fast_print(CAR(tmp),table);}</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/>{putc(FO_listd,f);</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>put_long(len,f);</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(tmp=obj;CONSP(tmp);tmp=CDR(tmp))</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fast_print(CAR(tmp),table);</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>fast_print(tmp,table);}</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_flonum:</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>putc(tc_flonum,f);</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fwrite(&amp;obj-&gt;storage_as.flonum.data,</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(obj-&gt;storage_as.flonum.data),</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f);</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_symbol:</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fast_print_table(obj,table))</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/>{putc(tc_symbol,f);</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>strlen(PNAME(obj));</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&gt;=<sp/>TKBUFFERN)</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;symbol<sp/>name<sp/>too<sp/>long&quot;</highlight><highlight class="normal">,obj);</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>put_long(len,f);</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>fwrite(PNAME(obj),len,1,f);</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(sym_t);}</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>get_user_type_hooks(TYPE(obj));</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p-&gt;fast_print)</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">((*p-&gt;fast_print)(obj,table));</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(err(</highlight><highlight class="stringliteral">&quot;cannot<sp/>fast-print&quot;</highlight><highlight class="normal">,obj));}}</highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>fast_read(<ref refid="structobj" kindref="compound">LISP</ref><sp/>table)</highlight></codeline>
<codeline lineno="856"><highlight class="normal">{FILE<sp/>*f;</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>tmp,l;</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structuser__type__hooks" kindref="compound">user_type_hooks</ref><sp/>*p;</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/>f<sp/>=<sp/>get_c_file(car(table),(FILE<sp/>*)<sp/>NULL);</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/>c<sp/>=<sp/>getc(f);</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>EOF)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(table);</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(c)</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>FO_comment:</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">((c<sp/>=<sp/>getc(f)))</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(c)</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EOF:</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(table);</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(fast_read(table));}</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>FO_fetch:</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>get_long(f);</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FLONM(bashnum)<sp/>=<sp/>len;</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(href(car(cdr(table)),bashnum));</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>FO_store:</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>get_long(f);</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>fast_read(table);</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hset(car(cdr(table)),flocons(len),tmp);</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(tmp);</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_nil:</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_cons:</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>fast_read(table);</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(cons(tmp,fast_read(table)));</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>FO_list:</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>FO_listd:</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>get_long(f);</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FLONM(bashnum)<sp/>=<sp/>len;</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>l<sp/>=<sp/>make_list(bashnum,NIL);</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>l;</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(len<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/>{CAR(tmp)<sp/>=<sp/>fast_read(table);</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>CDR(tmp);</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>--len;}</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CAR(tmp)<sp/>=<sp/>fast_read(table);</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>FO_listd)</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/>CDR(tmp)<sp/>=<sp/>fast_read(table);</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(l);</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_flonum:</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>newcell(tc_flonum);</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fread(&amp;tmp-&gt;storage_as.flonum.data,</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(tmp-&gt;storage_as.flonum.data),</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f);</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(tmp);</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_symbol:</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>get_long(f);</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&gt;=<sp/>TKBUFFERN)</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;symbol<sp/>name<sp/>too<sp/>long&quot;</highlight><highlight class="normal">,NIL);</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fread(tkbuffer,len,1,f);</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tkbuffer[len]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(rintern(tkbuffer));</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>get_user_type_hooks(c);</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p-&gt;fast_read)</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(*p-&gt;fast_read)(c,table);</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(err(</highlight><highlight class="stringliteral">&quot;unknown<sp/>fast-read<sp/>opcode&quot;</highlight><highlight class="normal">,flocons(c)));}}</highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>array_fast_print(<ref refid="structobj" kindref="compound">LISP</ref><sp/>ptr,<ref refid="structobj" kindref="compound">LISP</ref><sp/>table)</highlight></codeline>
<codeline lineno="922"><highlight class="normal">{</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j,len;</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/>FILE<sp/>*f;</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/>f<sp/>=<sp/>get_c_file(car(table),(FILE<sp/>*)<sp/>NULL);</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(ptr-&gt;type)</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_string:</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_byte_array:</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>putc(ptr-&gt;type,f);</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>ptr-&gt;storage_as.string.dim;</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>put_long(len,f);</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fwrite(ptr-&gt;storage_as.string.data,len,1,f);</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_double_array:</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>putc(tc_double_array,f);</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>ptr-&gt;storage_as.double_array.dim<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(double);</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>put_long(len,f);</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fwrite(ptr-&gt;storage_as.double_array.data,len,1,f);</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_long_array:</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>putc(tc_long_array,f);</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>ptr-&gt;storage_as.long_array.dim<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(long);</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>put_long(len,f);</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fwrite(ptr-&gt;storage_as.long_array.data,len,1,f);</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_lisp_array:</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>putc(tc_lisp_array,f);</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>ptr-&gt;storage_as.lisp_array.dim;</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>put_long(len,f);</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;<sp/>j<sp/>&lt;<sp/>len;<sp/>++j)</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/>fast_print(ptr-&gt;storage_as.lisp_array.data[j],table);</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(errswitch());}}</highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>array_fast_read(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>code,<ref refid="structobj" kindref="compound">LISP</ref><sp/>table)</highlight></codeline>
<codeline lineno="956"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>j,len,iflag;</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/>FILE<sp/>*f;</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>ptr;</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/>f<sp/>=<sp/>get_c_file(car(table),(FILE<sp/>*)<sp/>NULL);</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(code)</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_string:</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>get_long(f);</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>strcons(len,NULL);</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fread(ptr-&gt;storage_as.string.data,len,1,f);</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ptr-&gt;storage_as.string.data[len]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(ptr);</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_byte_array:</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>get_long(f);</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>iflag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>newcell(tc_byte_array);</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ptr-&gt;storage_as.string.dim<sp/>=<sp/>len;</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ptr-&gt;storage_as.string.data<sp/>=</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>must_malloc(len);</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fread(ptr-&gt;storage_as.string.data,len,1,f);</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>no_interrupt(iflag);</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(ptr);</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_double_array:</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>get_long(f);</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>iflag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>newcell(tc_double_array);</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ptr-&gt;storage_as.double_array.dim<sp/>=<sp/>len;</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ptr-&gt;storage_as.double_array.data<sp/>=</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)<sp/>must_malloc(len<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fread(ptr-&gt;storage_as.double_array.data,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">),len,f);</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>no_interrupt(iflag);</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(ptr);</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_long_array:</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>get_long(f);</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>iflag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>newcell(tc_long_array);</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ptr-&gt;storage_as.long_array.dim<sp/>=<sp/>len;</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ptr-&gt;storage_as.long_array.data<sp/>=</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*)<sp/>must_malloc(len<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fread(ptr-&gt;storage_as.long_array.data,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">),len,f);</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>no_interrupt(iflag);</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(ptr);</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_lisp_array:</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>get_long(f);</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FLONM(bashnum)<sp/>=<sp/>len;</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>cons_array(bashnum,NIL);</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;<sp/>j<sp/>&lt;<sp/>len;<sp/>++j)</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr-&gt;storage_as.lisp_array.data[j]<sp/>=<sp/>fast_read(table);</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(ptr);</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(errswitch());}}</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>get_c_long(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x)</highlight></codeline>
<codeline lineno="1008"><highlight class="normal">{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NFLONUMP(x)<sp/>err(&quot;not<sp/>a<sp/>number&quot;,x);</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/>return((</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)FLONM(x));}</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>get_c_double(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x)</highlight></codeline>
<codeline lineno="1012"><highlight class="normal">{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NFLONUMP(x)<sp/>err(&quot;not<sp/>a<sp/>number&quot;,x);</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/>return(FLONM(x));}</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>make_list(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x,<ref refid="structobj" kindref="compound">LISP</ref><sp/>v)</highlight></codeline>
<codeline lineno="1016"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>l;</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/>n<sp/>=<sp/>get_c_long(x);</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/>l<sp/>=<sp/>NIL;</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(n<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/>{l<sp/>=<sp/>cons(v,l);<sp/>--n;}</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(l);}</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lfread(<ref refid="structobj" kindref="compound">LISP</ref><sp/>size,<ref refid="structobj" kindref="compound">LISP</ref><sp/>file)</highlight></codeline>
<codeline lineno="1025"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>flag,n,ret,m;</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buffer;</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>s;</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/>FILE<sp/>*f;</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/>f<sp/>=<sp/>get_c_file(file,stdin);</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/>flag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(TYPE(size))</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_string:</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_byte_array:</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buffer<sp/>=<sp/>s-&gt;storage_as.string.data;</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>s-&gt;storage_as.string.dim;</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>get_c_long(size);</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buffer<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>must_malloc(n+1);</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buffer[n]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>=<sp/>1;}</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/>ret<sp/>=<sp/>fread(buffer,1,n,f);</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m)</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(buffer);</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/>no_interrupt(flag);</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m)</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>==<sp/>n)</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{s<sp/>=<sp/>cons(NIL,NIL);</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;type<sp/>=<sp/>tc_string;</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;storage_as.string.data<sp/>=<sp/>buffer;</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;storage_as.string.dim<sp/>=<sp/>n;}</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{s<sp/>=<sp/>strcons(ret,NULL);</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(s-&gt;storage_as.string.data,buffer,ret);</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(buffer);}</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/>no_interrupt(flag);</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(s);}</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/>no_interrupt(flag);</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)ret));}</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lfwrite(<ref refid="structobj" kindref="compound">LISP</ref><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<ref refid="structobj" kindref="compound">LISP</ref><sp/>file)</highlight></codeline>
<codeline lineno="1066"><highlight class="normal">{FILE<sp/>*f;</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>flag;</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data;</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>dim,len;</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/>f<sp/>=<sp/>get_c_file(file,stdout);</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/>data<sp/>=<sp/>get_c_string_dim(CONSP(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)<sp/>?<sp/>car(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)<sp/>:<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,&amp;dim);</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/>len<sp/>=<sp/>CONSP(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)<sp/>?<sp/>get_c_long(cadr(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">))<sp/>:<sp/>dim;</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&lt;=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&gt;<sp/>dim)<sp/>err(</highlight><highlight class="stringliteral">&quot;write<sp/>length<sp/>too<sp/>long&quot;</highlight><highlight class="normal">,</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/>flag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/>fwrite(data,1,len,f);</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/>no_interrupt(flag);</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lfflush(<ref refid="structobj" kindref="compound">LISP</ref><sp/>file)</highlight></codeline>
<codeline lineno="1081"><highlight class="normal">{FILE<sp/>*f;</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>flag;</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/>f<sp/>=<sp/>get_c_file(file,stdout);</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/>flag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/>fflush(f);</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/>no_interrupt(flag);</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>string_length(<ref refid="structobj" kindref="compound">LISP</ref><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1090"><highlight class="normal">{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NTYPEP(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,tc_string)<sp/>err_wta_str(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/>return(flocons(strlen(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">-&gt;storage_as.</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.data)));}</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>string_dim(<ref refid="structobj" kindref="compound">LISP</ref><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1094"><highlight class="normal">{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NTYPEP(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,tc_string)<sp/>err_wta_str(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/>return(flocons((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">-&gt;storage_as.</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.dim));}</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>nlength(<ref refid="structobj" kindref="compound">LISP</ref><sp/>obj)</highlight></codeline>
<codeline lineno="1098"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>l;</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>TYPE(obj)</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_string:</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(strlen(obj-&gt;storage_as.string.data));</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_byte_array:</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(obj-&gt;storage_as.string.dim);</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_double_array:</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(obj-&gt;storage_as.double_array.dim);</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_long_array:</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(obj-&gt;storage_as.long_array.dim);</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_lisp_array:</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(obj-&gt;storage_as.lisp_array.dim);</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_nil:</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_cons:</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(l=obj,n=0;CONSP(l);l=CDR(l),++n)<sp/>INTERRUPT_CHECK();</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NNULLP(l)<sp/>err(&quot;improper<sp/>list<sp/>to<sp/>length&quot;,obj);</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return(n);</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/>default:</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>err(&quot;wta<sp/>to<sp/>length&quot;,obj);</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return(0);}}</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>llength(<ref refid="structobj" kindref="compound">LISP</ref><sp/>obj)</highlight></codeline>
<codeline lineno="1122"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(nlength(obj)));}</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>number2string(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x,<ref refid="structobj" kindref="compound">LISP</ref><sp/>b,<ref refid="structobj" kindref="compound">LISP</ref><sp/>w,<ref refid="structobj" kindref="compound">LISP</ref><sp/>p)</highlight></codeline>
<codeline lineno="1125"><highlight class="normal">{</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[1000];</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y;</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>base,width,prec;</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NFLONUMP(x)<sp/>err(&quot;wta&quot;,x);</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/>y<sp/>=<sp/>FLONM(x);</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/>width<sp/>=<sp/>NNULLP(w)<sp/>?<sp/>get_c_long(w)<sp/>:<sp/>-1;</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/>if<sp/>(width<sp/>&gt;<sp/>100)<sp/>err(&quot;width<sp/>too<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">&quot;,w);</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/>prec<sp/>=<sp/>NNULLP(p)<sp/>?<sp/>get_c_long(p)<sp/>:<sp/>-1;</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/>if<sp/>(prec<sp/>&gt;<sp/>100)<sp/>err(&quot;precision<sp/>too<sp/>large&quot;,p);</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/>if<sp/>(NULLP(b)<sp/>||<sp/>EQ(sym_e,b)<sp/>||<sp/>EQ(sym_f,b))</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((width<sp/>&gt;=<sp/>0)<sp/>&amp;&amp;<sp/>(prec<sp/>&gt;=<sp/>0))</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(buffer,</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULLP(b)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;%<sp/>*.*g&quot;</highlight><highlight class="normal"><sp/>:<sp/>EQ(sym_e,b)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;%<sp/>*.*e&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;%<sp/>*.*f&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>width,</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prec,</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y);</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(width<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(buffer,</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULLP(b)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;%<sp/>*g&quot;</highlight><highlight class="normal"><sp/>:<sp/>EQ(sym_e,b)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;%<sp/>*e&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;%<sp/>*f&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>width,</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y);</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prec<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(buffer,</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULLP(b)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;%.*g&quot;</highlight><highlight class="normal"><sp/>:<sp/>EQ(sym_e,b)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;%.*e&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;%.*f&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prec,</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y);</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(buffer,</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULLP(b)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;%g&quot;</highlight><highlight class="normal"><sp/>:<sp/>EQ(sym_e,b)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;%e&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;%f&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y);}</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((base<sp/>=<sp/>get_c_long(b))<sp/>==<sp/>10)<sp/>||<sp/>(base<sp/>==<sp/>8)<sp/>||<sp/>(base<sp/>==<sp/>16))</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(width<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(buffer,</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(base<sp/>==<sp/>10)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;%0*ld&quot;</highlight><highlight class="normal"><sp/>:<sp/>(base<sp/>==<sp/>8)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;%0*lo&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;%0*lX&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>width,</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>y);</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(buffer,</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(base<sp/>==<sp/>10)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;%ld&quot;</highlight><highlight class="normal"><sp/>:<sp/>(base<sp/>==<sp/>8)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;%lo&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;%lX&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>y);}</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;number<sp/>base<sp/>not<sp/>handled&quot;</highlight><highlight class="normal">,b);</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(strcons(strlen(buffer),buffer));}</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>string2number(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x,<ref refid="structobj" kindref="compound">LISP</ref><sp/>b)</highlight></codeline>
<codeline lineno="1170"><highlight class="normal">{</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str;</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>base,value<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/>str<sp/>=<sp/>get_c_string(x);</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NULLP(b)</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/>result<sp/>=<sp/>atof(str);</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/>else<sp/>if<sp/>((base<sp/>=<sp/>get_c_long(b))<sp/>==<sp/>10)</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/>{sscanf(str,</highlight><highlight class="stringliteral">&quot;%ld&quot;</highlight><highlight class="normal">,&amp;value);</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>(double)<sp/>value;}</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(base<sp/>==<sp/>8)</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/>{sscanf(str,</highlight><highlight class="stringliteral">&quot;%lo&quot;</highlight><highlight class="normal">,&amp;value);</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>(double)<sp/>value;}</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(base<sp/>==<sp/>16)</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/>{sscanf(str,</highlight><highlight class="stringliteral">&quot;%lx&quot;</highlight><highlight class="normal">,&amp;value);</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>(double)<sp/>value;}</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((base<sp/>&gt;=<sp/>1)<sp/>&amp;&amp;<sp/>(base<sp/>&lt;=<sp/>16))</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(result<sp/>=<sp/>0.0;*str;++str)</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isdigit(*str))</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>result<sp/>*<sp/>base<sp/>+<sp/>*str<sp/>-<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isxdigit(*str))</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>result<sp/>*<sp/>base<sp/>+<sp/>toupper(*str)<sp/>-<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>+<sp/>10;}</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(err(</highlight><highlight class="stringliteral">&quot;number<sp/>base<sp/>not<sp/>handled&quot;</highlight><highlight class="normal">,b));</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(result));}</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lstrcmp(<ref refid="structobj" kindref="compound">LISP</ref><sp/>s1,<ref refid="structobj" kindref="compound">LISP</ref><sp/>s2)</highlight></codeline>
<codeline lineno="1196"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(strcmp(get_c_string(s1),get_c_string(s2))));}</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>chk_string(<ref refid="structobj" kindref="compound">LISP</ref><sp/>s,</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**data,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*dim)</highlight></codeline>
<codeline lineno="1199"><highlight class="normal">{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>TYPEP(s,tc_string)</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/>{*data<sp/>=<sp/>s-&gt;storage_as.string.data;</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/>*dim<sp/>=<sp/>s-&gt;storage_as.string.dim;}</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/>err_wta_str(s);}</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lstrcpy(<ref refid="structobj" kindref="compound">LISP</ref><sp/>dest,<ref refid="structobj" kindref="compound">LISP</ref><sp/>src)</highlight></codeline>
<codeline lineno="1206"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>ddim,slen;</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*d,*s;</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/>chk_string(dest,&amp;d,&amp;ddim);</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/>s<sp/>=<sp/>get_c_string(src);</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/>slen<sp/>=<sp/>strlen(s);</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(slen<sp/>&gt;<sp/>ddim)</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;string<sp/>too<sp/>long&quot;</highlight><highlight class="normal">,src);</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/>memcpy(d,s,slen);</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/>d[slen]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lstrcat(<ref refid="structobj" kindref="compound">LISP</ref><sp/>dest,<ref refid="structobj" kindref="compound">LISP</ref><sp/>src)</highlight></codeline>
<codeline lineno="1218"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>ddim,dlen,slen;</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*d,*s;</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/>chk_string(dest,&amp;d,&amp;ddim);</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/>s<sp/>=<sp/>get_c_string(src);</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/>slen<sp/>=<sp/>strlen(s);</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/>dlen<sp/>=<sp/>strlen(d);</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((slen<sp/>+<sp/>dlen)<sp/>&gt;<sp/>ddim)</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;string<sp/>too<sp/>long&quot;</highlight><highlight class="normal">,src);</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/>memcpy(&amp;d[dlen],s,slen);</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/>d[dlen+slen]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lstrbreakup(<ref refid="structobj" kindref="compound">LISP</ref><sp/>str,<ref refid="structobj" kindref="compound">LISP</ref><sp/>lmarker)</highlight></codeline>
<codeline lineno="1231"><highlight class="normal">{</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*start,*end,*marker;</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k;</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>result<sp/>=<sp/>NIL;</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/>start<sp/>=<sp/>get_c_string(str);</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/>marker<sp/>=<sp/>get_c_string(lmarker);</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/>k<sp/>=<sp/>strlen(marker);</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(*start)</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(end<sp/>=<sp/>strstr(start,marker)))<sp/>end<sp/>=<sp/>&amp;start[strlen(start)];</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>cons(strcons(end-start,start),result);</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/>start<sp/>=<sp/>(*end)<sp/>?<sp/>end+k<sp/>:<sp/>end;}</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(nreverse(result));}</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"></highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lstrunbreakup(<ref refid="structobj" kindref="compound">LISP</ref><sp/>elems,<ref refid="structobj" kindref="compound">LISP</ref><sp/>lmarker)</highlight></codeline>
<codeline lineno="1244"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>result,l;</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(l=elems,result=NIL;NNULLP(l);l=cdr(l))</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>EQ(l,elems)</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>cons(car(l),result);</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>cons(car(l),cons(lmarker,result));</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(string_append(nreverse(result)));}</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>stringp(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x)</highlight></codeline>
<codeline lineno="1253"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(TYPEP(x,tc_string)<sp/>?<sp/>sym_t<sp/>:<sp/>NIL);}</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*base64_encode_table<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;\</highlight></codeline>
<codeline lineno="1256"><highlight class="stringliteral">ABCDEFGHIJKLMNOPQRSTUVWXYZ\</highlight></codeline>
<codeline lineno="1257"><highlight class="stringliteral">abcdefghijklmnopqrstuvwxyz\</highlight></codeline>
<codeline lineno="1258"><highlight class="stringliteral">0123456789+/=&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*base64_decode_table<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init_base64_table(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1263"><highlight class="normal">{</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/>base64_decode_table<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>malloc(256);</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/>memset(base64_decode_table,-1,256);</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;j&lt;65;++j)</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/>base64_decode_table[base64_encode_table[j]]<sp/>=<sp/>j;}</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BITMSK(N)<sp/>((1<sp/>&lt;&lt;<sp/>(N))<sp/>-<sp/>1)</highlight></codeline>
<codeline lineno="1270"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ITEM1(X)<sp/><sp/><sp/>(X<sp/>&gt;&gt;<sp/>2)<sp/>&amp;<sp/>BITMSK(6)</highlight></codeline>
<codeline lineno="1272"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ITEM2(X,Y)<sp/>((X<sp/>&amp;<sp/>BITMSK(2))<sp/>&lt;&lt;<sp/>4)<sp/>|<sp/>((Y<sp/>&gt;&gt;<sp/>4)<sp/>&amp;<sp/>BITMSK(4))</highlight></codeline>
<codeline lineno="1273"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ITEM3(X,Y)<sp/>((X<sp/>&amp;<sp/>BITMSK(4))<sp/>&lt;&lt;<sp/>2)<sp/>|<sp/>((Y<sp/>&gt;&gt;<sp/>6)<sp/>&amp;<sp/>BITMSK(2))</highlight></codeline>
<codeline lineno="1274"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ITEM4(X)<sp/><sp/><sp/>X<sp/>&amp;<sp/>BITMSK(6)</highlight></codeline>
<codeline lineno="1275"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>base64encode(<ref refid="structobj" kindref="compound">LISP</ref><sp/>in)</highlight></codeline>
<codeline lineno="1277"><highlight class="normal">{</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,*t<sp/>=<sp/>base64_encode_table;</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p1,*p2;</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>out;</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>j,m,n,chunks,leftover;</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/>s<sp/>=<sp/>get_c_string_dim(in,&amp;n);</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/>chunks<sp/>=<sp/>n<sp/>/<sp/>3;</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/>leftover<sp/>=<sp/>n<sp/>%<sp/>3;</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/>m<sp/>=<sp/>(chunks<sp/>+<sp/>((leftover)<sp/>?<sp/>1<sp/>:<sp/>0))<sp/>*<sp/>4;</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/>out<sp/>=<sp/>strcons(m,NULL);</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/>p2<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>get_c_string(out);</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0,p1=(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)s;j&lt;chunks;++j,p1<sp/>+=<sp/>3)</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/>{*p2++<sp/>=<sp/>t[ITEM1(p1[0])];</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/>*p2++<sp/>=<sp/>t[ITEM2(p1[0],p1[1])];</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/>*p2++<sp/>=<sp/>t[ITEM3(p1[1],p1[2])];</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/>*p2++<sp/>=<sp/>t[ITEM4(p1[2])];}</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(leftover)</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*p2++<sp/>=<sp/>t[ITEM1(p1[0])];</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*p2++<sp/>=<sp/>t[ITEM2(p1[0],0)];</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*p2++<sp/>=<sp/>base64_encode_table[64];</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*p2++<sp/>=<sp/>base64_encode_table[64];</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*p2++<sp/>=<sp/>t[ITEM1(p1[0])];</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*p2++<sp/>=<sp/>t[ITEM2(p1[0],p1[1])];</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*p2++<sp/>=<sp/>t[ITEM3(p1[1],0)];</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*p2++<sp/>=<sp/>base64_encode_table[64];</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>errswitch();}</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(out);}</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>base64decode(<ref refid="structobj" kindref="compound">LISP</ref><sp/>in)</highlight></codeline>
<codeline lineno="1312"><highlight class="normal">{</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,*t<sp/>=<sp/>base64_decode_table;</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>out;</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p1,*p2;</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>j,m,n,chunks,leftover,item1,item2,item3,item4;</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/>s<sp/>=<sp/>get_c_string(in);</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/>n<sp/>=<sp/>strlen(s);</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(strcons(0,NULL));</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>%<sp/>4)</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;illegal<sp/>base64<sp/>data<sp/>length&quot;</highlight><highlight class="normal">,in);</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s[n-1]<sp/>==<sp/>base64_encode_table[64])</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s[n-2]<sp/>==<sp/>base64_encode_table[64])</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>leftover<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>leftover<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/>leftover<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/>chunks<sp/>=<sp/>(n<sp/>/<sp/>4<sp/>)<sp/>-<sp/>((leftover)<sp/>?<sp/>1<sp/>:<sp/>0);</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/>m<sp/>=<sp/>(chunks<sp/>*<sp/>3)<sp/>+<sp/>leftover;</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/>out<sp/>=<sp/>strcons(m,NULL);</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/>p2<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>get_c_string(out);</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0,p1=(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)s;j&lt;chunks;++j,p1<sp/>+=<sp/>4)</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((item1<sp/>=<sp/>t[p1[0]])<sp/>&amp;<sp/>~BITMSK(6))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((item2<sp/>=<sp/>t[p1[1]])<sp/>&amp;<sp/>~BITMSK(6))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((item3<sp/>=<sp/>t[p1[2]])<sp/>&amp;<sp/>~BITMSK(6))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((item4<sp/>=<sp/>t[p1[3]])<sp/>&amp;<sp/>~BITMSK(6))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/>*p2++<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)<sp/>((item1<sp/>&lt;&lt;<sp/>2)<sp/>|<sp/>(item2<sp/>&gt;&gt;<sp/>4));</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/>*p2++<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)<sp/>((item2<sp/>&lt;&lt;<sp/>4)<sp/>|<sp/>(item3<sp/>&gt;&gt;<sp/>2));</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/>*p2++<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)<sp/>((item3<sp/>&lt;&lt;<sp/>6)<sp/>|<sp/>item4);}</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(leftover)</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((item1<sp/>=<sp/>t[p1[0]])<sp/>&amp;<sp/>~BITMSK(6))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((item2<sp/>=<sp/>t[p1[1]])<sp/>&amp;<sp/>~BITMSK(6))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*p2++<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)<sp/>((item1<sp/>&lt;&lt;<sp/>2)<sp/>|<sp/>(item2<sp/>&gt;&gt;<sp/>4));</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((item1<sp/>=<sp/>t[p1[0]])<sp/>&amp;<sp/>~BITMSK(6))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((item2<sp/>=<sp/>t[p1[1]])<sp/>&amp;<sp/>~BITMSK(6))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((item3<sp/>=<sp/>t[p1[2]])<sp/>&amp;<sp/>~BITMSK(6))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*p2++<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)<sp/>((item1<sp/>&lt;&lt;<sp/>2)<sp/>|<sp/>(item2<sp/>&gt;&gt;<sp/>4));</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*p2++<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)<sp/>((item2<sp/>&lt;&lt;<sp/>4)<sp/>|<sp/>(item3<sp/>&gt;&gt;<sp/>2));</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>errswitch();}</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(out);}</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"></highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>memq(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x,<ref refid="structobj" kindref="compound">LISP</ref><sp/>il)</highlight></codeline>
<codeline lineno="1360"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>l,tmp;</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(l=il;CONSP(l);l=CDR(l))</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/>{tmp<sp/>=<sp/>CAR(l);</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>EQ(x,tmp)<sp/>return(l);</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/>INTERRUPT_CHECK();}</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/>if<sp/>EQ(l,NIL)<sp/>return(NIL);</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/>return(err(&quot;improper<sp/>list<sp/>to<sp/>memq&quot;,il));}</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"></highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>member(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x,<ref refid="structobj" kindref="compound">LISP</ref><sp/>il)</highlight></codeline>
<codeline lineno="1369"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>l,tmp;</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(l=il;CONSP(l);l=CDR(l))</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/>{tmp<sp/>=<sp/>CAR(l);</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NNULLP(equal(x,tmp))<sp/>return(l);</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/>INTERRUPT_CHECK();}</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/>if<sp/>EQ(l,NIL)<sp/>return(NIL);</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/>return(err(&quot;improper<sp/>list<sp/>to<sp/>member&quot;,il));}</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"></highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>memv(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x,<ref refid="structobj" kindref="compound">LISP</ref><sp/>il)</highlight></codeline>
<codeline lineno="1378"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>l,tmp;</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(l=il;CONSP(l);l=CDR(l))</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/>{tmp<sp/>=<sp/>CAR(l);</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NNULLP(eql(x,tmp))<sp/>return(l);</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/>INTERRUPT_CHECK();}</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/>if<sp/>EQ(l,NIL)<sp/>return(NIL);</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/>return(err(&quot;improper<sp/>list<sp/>to<sp/>memv&quot;,il));}</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"></highlight></codeline>
<codeline lineno="1386"><highlight class="normal"></highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>nth(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x,<ref refid="structobj" kindref="compound">LISP</ref><sp/>li)</highlight></codeline>
<codeline lineno="1388"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>l;</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>j,n<sp/>=<sp/>get_c_long(x);</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j<sp/>=<sp/>0,<sp/>l<sp/>=<sp/>li;<sp/>(j<sp/>&lt;<sp/>n)<sp/>&amp;&amp;<sp/>CONSP(l);<sp/>++j)<sp/>l<sp/>=<sp/>CDR(l);</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>CONSP(l)</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/>return(CAR(l));</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/>else</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/>return(err(&quot;bad<sp/>arg<sp/>to<sp/>nth&quot;,x));}</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"></highlight></codeline>
<codeline lineno="1396"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>these<sp/>lxxx_default<sp/>functions<sp/>are<sp/>convenient<sp/>for<sp/>manipulating</highlight></codeline>
<codeline lineno="1397"><highlight class="comment"><sp/><sp/><sp/>command-line<sp/>argument<sp/>lists<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1398"><highlight class="normal"></highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lref_default(<ref refid="structobj" kindref="compound">LISP</ref><sp/>li,<ref refid="structobj" kindref="compound">LISP</ref><sp/>x,<ref refid="structobj" kindref="compound">LISP</ref><sp/>fcn)</highlight></codeline>
<codeline lineno="1400"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>l;</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>j,n<sp/>=<sp/>get_c_long(x);</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j<sp/>=<sp/>0,<sp/>l<sp/>=<sp/>li;<sp/>(j<sp/>&lt;<sp/>n)<sp/>&amp;&amp;<sp/>CONSP(l);<sp/>++j)<sp/>l<sp/>=<sp/>CDR(l);</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>CONSP(l)</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/>return(CAR(l));</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/>else<sp/>if<sp/>NNULLP(fcn)</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/>return(lapply(fcn,NIL));</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/>else</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/>return(NIL);}</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"></highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>larg_default(<ref refid="structobj" kindref="compound">LISP</ref><sp/>li,<ref refid="structobj" kindref="compound">LISP</ref><sp/>x,<ref refid="structobj" kindref="compound">LISP</ref><sp/>dval)</highlight></codeline>
<codeline lineno="1411"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>l<sp/>=<sp/>li,elem;</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>j=0,n<sp/>=<sp/>get_c_long(x);</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>NNULLP(l)</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/>{elem<sp/>=<sp/>car(l);</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TYPEP(elem,tc_string)<sp/>&amp;&amp;<sp/>strchr(</highlight><highlight class="stringliteral">&quot;-:&quot;</highlight><highlight class="normal">,*get_c_string(elem)))</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>l<sp/>=<sp/>cdr(l);</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>n)</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(elem);</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{l<sp/>=<sp/>cdr(l);</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++j;}}</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(dval);}</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"></highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lkey_default(<ref refid="structobj" kindref="compound">LISP</ref><sp/>li,<ref refid="structobj" kindref="compound">LISP</ref><sp/>key,<ref refid="structobj" kindref="compound">LISP</ref><sp/>dval)</highlight></codeline>
<codeline lineno="1425"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>l<sp/>=<sp/>li,elem;</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ckey,*celem;</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/>ckey<sp/>=<sp/>get_c_string(key);</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/>n<sp/>=<sp/>strlen(ckey);</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>NNULLP(l)</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/>{elem<sp/>=<sp/>car(l);</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TYPEP(elem,tc_string)<sp/>&amp;&amp;<sp/>(*(celem<sp/>=<sp/>get_c_string(elem))<sp/>==<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/>(strncmp(&amp;celem[1],ckey,n)<sp/>==<sp/>0)<sp/>&amp;&amp;<sp/>(celem[n+1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(strcons(strlen(&amp;celem[n+2]),&amp;celem[n+2]));</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/>l<sp/>=<sp/>cdr(l);}</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(dval);}</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"></highlight></codeline>
<codeline lineno="1438"><highlight class="normal"></highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>llist(<ref refid="structobj" kindref="compound">LISP</ref><sp/>l)</highlight></codeline>
<codeline lineno="1440"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(l);}</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"></highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>writes1(FILE<sp/>*f,<ref refid="structobj" kindref="compound">LISP</ref><sp/>l)</highlight></codeline>
<codeline lineno="1443"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>v;</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/>STACK_CHECK(&amp;v);</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/>INTERRUPT_CHECK();</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(v=l;CONSP(v);v=CDR(v))</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/>writes1(f,CAR(v));</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>TYPE(v)</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_nil:</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_symbol:</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_string:</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fput_st(f,get_c_string(v));</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lprin1f(v,f);</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"></highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>writes(<ref refid="structobj" kindref="compound">LISP</ref><sp/>args)</highlight></codeline>
<codeline lineno="1461"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(writes1(get_c_file(car(args),stdout),cdr(args)));}</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"></highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>last(<ref refid="structobj" kindref="compound">LISP</ref><sp/>l)</highlight></codeline>
<codeline lineno="1464"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>v1,v2;</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/>v1<sp/>=<sp/>l;</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/>v2<sp/>=<sp/>CONSP(v1)<sp/>?<sp/>CDR(v1)<sp/>:<sp/>err(</highlight><highlight class="stringliteral">&quot;bad<sp/>arg<sp/>to<sp/>last&quot;</highlight><highlight class="normal">,l);</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(CONSP(v2))</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/>{INTERRUPT_CHECK();</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/>v1<sp/>=<sp/>v2;</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/>v2<sp/>=<sp/>CDR(v2);}</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(v1);}</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"></highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>butlast(<ref refid="structobj" kindref="compound">LISP</ref><sp/>l)</highlight></codeline>
<codeline lineno="1474"><highlight class="normal">{INTERRUPT_CHECK();</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/>STACK_CHECK(&amp;l);</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NULLP(l)<sp/>err(&quot;list<sp/>is<sp/>empty&quot;,l);</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/>if<sp/>CONSP(l)</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/>if<sp/>NULLP(CDR(l))</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>return(NIL);</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>return(cons(CAR(l),butlast(CDR(l))));</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/>return(err(&quot;not<sp/>a<sp/>list&quot;,l));}</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"></highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>nconc(<ref refid="structobj" kindref="compound">LISP</ref><sp/>a,<ref refid="structobj" kindref="compound">LISP</ref><sp/>b)</highlight></codeline>
<codeline lineno="1485"><highlight class="normal">{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NULLP(a)</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/>return(b);</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/>setcdr(last(a),b);</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/>return(a);}</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"></highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>funcall1(<ref refid="structobj" kindref="compound">LISP</ref><sp/>fcn,<ref refid="structobj" kindref="compound">LISP</ref><sp/>a1)</highlight></codeline>
<codeline lineno="1491"><highlight class="normal">{</highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>TYPE(fcn)</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_1:</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>STACK_CHECK(&amp;fcn);</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>INTERRUPT_CHECK();</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(SUBR1(fcn)(a1));</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_closure:</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>TYPEP(fcn-&gt;storage_as.closure.code,tc_subr_2)</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/>{STACK_CHECK(&amp;fcn);</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>INTERRUPT_CHECK();</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(SUBR2(fcn-&gt;storage_as.closure.code)</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(fcn-&gt;storage_as.closure.env,a1));}</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(lapply(fcn,cons(a1,NIL)));}}</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"></highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>funcall2(<ref refid="structobj" kindref="compound">LISP</ref><sp/>fcn,<ref refid="structobj" kindref="compound">LISP</ref><sp/>a1,<ref refid="structobj" kindref="compound">LISP</ref><sp/>a2)</highlight></codeline>
<codeline lineno="1506"><highlight class="normal">{</highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>TYPE(fcn)</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_2:</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_2n:</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>STACK_CHECK(&amp;fcn);</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>INTERRUPT_CHECK();</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(SUBR2(fcn)(a1,a2));</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(lapply(fcn,cons(a1,cons(a2,NIL))));}}</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"></highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lqsort(<ref refid="structobj" kindref="compound">LISP</ref><sp/>l,<ref refid="structobj" kindref="compound">LISP</ref><sp/>f,<ref refid="structobj" kindref="compound">LISP</ref><sp/>g)</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>this<sp/>is<sp/>a<sp/>stupid<sp/>recursive<sp/>qsort<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1517"><highlight class="normal">{</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j,n;</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>v,mark,less,notless;</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(v=l,n=0;CONSP(v);v=CDR(v),++n)<sp/>INTERRUPT_CHECK();</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NNULLP(v)<sp/>err(&quot;bad<sp/>list<sp/>to<sp/>qsort&quot;,l);</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/>if<sp/>(n<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/>return(NIL);</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/>j<sp/>=<sp/>rand()<sp/>%<sp/>n;</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/>for(v=l,n=0;n&lt;j;++n)<sp/>v=CDR(v);</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/>mark<sp/>=<sp/>CAR(v);</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/>for(less=NIL,notless=NIL,v=l,n=0;NNULLP(v);v=CDR(v),++n)</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/>if<sp/>(j<sp/>!=<sp/>n)</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NNULLP(funcall2(f,</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULLP(g)<sp/>?<sp/>CAR(v)<sp/>:<sp/>funcall1(g,CAR(v)),</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULLP(g)<sp/>?<sp/>mark<sp/><sp/><sp/>:<sp/>funcall1(g,mark)))</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/>less<sp/>=<sp/>cons(CAR(v),less);</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/>notless<sp/>=<sp/>cons(CAR(v),notless);}</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/>return(nconc(lqsort(less,f,g),</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cons(mark,</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lqsort(notless,f,g))));}</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"></highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>string_lessp(<ref refid="structobj" kindref="compound">LISP</ref><sp/>s1,<ref refid="structobj" kindref="compound">LISP</ref><sp/>s2)</highlight></codeline>
<codeline lineno="1539"><highlight class="normal">{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(get_c_string(s1),get_c_string(s2))<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(sym_t);</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"></highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>benchmark_funcall1(<ref refid="structobj" kindref="compound">LISP</ref><sp/>ln,<ref refid="structobj" kindref="compound">LISP</ref><sp/>f,<ref refid="structobj" kindref="compound">LISP</ref><sp/>a1)</highlight></codeline>
<codeline lineno="1545"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>j,n;</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>value<sp/>=<sp/>NIL;</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/>n<sp/>=<sp/>get_c_long(ln);</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;j&lt;n;++j)</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/>value<sp/>=<sp/>funcall1(f,a1);</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(value);}</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"></highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>benchmark_funcall2(<ref refid="structobj" kindref="compound">LISP</ref><sp/>l)</highlight></codeline>
<codeline lineno="1553"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>j,n;</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>ln<sp/>=<sp/>car(l);<ref refid="structobj" kindref="compound">LISP</ref><sp/>f<sp/>=<sp/>car(cdr(l));<sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>a1<sp/>=<sp/>car(cdr(cdr(l)));</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>a2<sp/>=<sp/>car(cdr(cdr(cdr(l))));</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>value<sp/>=<sp/>NIL;</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/>n<sp/>=<sp/>get_c_long(ln);</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;j&lt;n;++j)</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/>value<sp/>=<sp/>funcall2(f,a1,a2);</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(value);}</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"></highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>benchmark_eval(<ref refid="structobj" kindref="compound">LISP</ref><sp/>ln,<ref refid="structobj" kindref="compound">LISP</ref><sp/>exp,<ref refid="structobj" kindref="compound">LISP</ref><sp/>env)</highlight></codeline>
<codeline lineno="1563"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>j,n;</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>value<sp/>=<sp/>NIL;</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/>n<sp/>=<sp/>get_c_long(ln);</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;j&lt;n;++j)</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/>value<sp/>=<sp/>leval(exp,env);</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(value);}</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"></highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>mapcar1(<ref refid="structobj" kindref="compound">LISP</ref><sp/>fcn,<ref refid="structobj" kindref="compound">LISP</ref><sp/>in)</highlight></codeline>
<codeline lineno="1571"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>res,ptr,l;</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NULLP(in)<sp/>return(NIL);</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/>res<sp/>=<sp/>ptr<sp/>=<sp/>cons(funcall1(fcn,car(in)),NIL);</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/>for(l=cdr(in);CONSP(l);l=CDR(l))</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/>ptr<sp/>=<sp/>CDR(ptr)<sp/>=<sp/>cons(funcall1(fcn,CAR(l)),CDR(ptr));</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/>return(res);}</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"></highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>mapcar2(<ref refid="structobj" kindref="compound">LISP</ref><sp/>fcn,<ref refid="structobj" kindref="compound">LISP</ref><sp/>in1,<ref refid="structobj" kindref="compound">LISP</ref><sp/>in2)</highlight></codeline>
<codeline lineno="1579"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>res,ptr,l1,l2;</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NULLP(in1)<sp/>||<sp/>NULLP(in2))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/>res<sp/>=<sp/>ptr<sp/>=<sp/>cons(funcall2(fcn,car(in1),car(in2)),NIL);</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(l1=cdr(in1),l2=cdr(in2);CONSP(l1)<sp/>&amp;&amp;<sp/>CONSP(l2);l1=CDR(l1),l2=CDR(l2))</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/>ptr<sp/>=<sp/>CDR(ptr)<sp/>=<sp/>cons(funcall2(fcn,CAR(l1),CAR(l2)),CDR(ptr));</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(res);}</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"></highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>mapcar(<ref refid="structobj" kindref="compound">LISP</ref><sp/>l)</highlight></codeline>
<codeline lineno="1587"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>fcn<sp/>=<sp/>car(l);</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(get_c_long(llength(l)))</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(mapcar1(fcn,car(cdr(l))));</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(mapcar2(fcn,car(cdr(l)),car(cdr(cdr(l)))));</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(err(</highlight><highlight class="stringliteral">&quot;mapcar<sp/>case<sp/>not<sp/>handled&quot;</highlight><highlight class="normal">,l));}}</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"></highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lfmod(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x,<ref refid="structobj" kindref="compound">LISP</ref><sp/>y)</highlight></codeline>
<codeline lineno="1597"><highlight class="normal">{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NFLONUMP(x)<sp/>err(&quot;wta(1st)<sp/>to<sp/>fmod&quot;,x);</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/>if<sp/>NFLONUMP(y)<sp/>err(&quot;wta(2nd)<sp/>to<sp/>fmod&quot;,y);</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/>return(flocons(fmod(FLONM(x),FLONM(y))));}</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"></highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lsubset(<ref refid="structobj" kindref="compound">LISP</ref><sp/>fcn,<ref refid="structobj" kindref="compound">LISP</ref><sp/>l)</highlight></codeline>
<codeline lineno="1602"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>result<sp/>=<sp/>NIL,v;</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(v=l;CONSP(v);v=CDR(v))</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NNULLP(funcall1(fcn,CAR(v)))</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>cons(CAR(v),result);</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(nreverse(result));}</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"></highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>ass(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x,<ref refid="structobj" kindref="compound">LISP</ref><sp/>alist,<ref refid="structobj" kindref="compound">LISP</ref><sp/>fcn)</highlight></codeline>
<codeline lineno="1609"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>l,tmp;</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(l=alist;CONSP(l);l=CDR(l))</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/>{tmp<sp/>=<sp/>CAR(l);</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CONSP(tmp)<sp/>&amp;&amp;<sp/>NNULLP(funcall2(fcn,CAR(tmp),x)))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(tmp);</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/>INTERRUPT_CHECK();}</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>EQ(l,NIL)<sp/>return(NIL);</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/>return(err(&quot;improper<sp/>list<sp/>to<sp/>ass&quot;,alist));}</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"></highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>append2(<ref refid="structobj" kindref="compound">LISP</ref><sp/>l1,<ref refid="structobj" kindref="compound">LISP</ref><sp/>l2)</highlight></codeline>
<codeline lineno="1618"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>result<sp/>=<sp/>NIL,p1,p2;</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/>n<sp/>=<sp/>nlength(l1)<sp/>+<sp/>nlength(l2);</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(n<sp/>&gt;<sp/>0)<sp/>{result<sp/>=<sp/>cons(NIL,result);<sp/>--n;}</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(p1=result,p2=l1;NNULLP(p2);p1=cdr(p1),p2=cdr(p2))<sp/>setcar(p1,car(p2));</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(p2=l2;NNULLP(p2);p1=cdr(p1),p2=cdr(p2))<sp/>setcar(p1,car(p2));</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);}</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"></highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>append(<ref refid="structobj" kindref="compound">LISP</ref><sp/>l)</highlight></codeline>
<codeline lineno="1627"><highlight class="normal">{STACK_CHECK(&amp;l);</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/>INTERRUPT_CHECK();</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NULLP(l)</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/>return(NIL);</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/>else<sp/>if<sp/>NULLP(cdr(l))</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/>return(car(l));</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/>else<sp/>if<sp/>NULLP(cddr(l))</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/>return(append2(car(l),cadr(l)));</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/>else</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/>return(append2(car(l),append(cdr(l))));}</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"></highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>listn(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>n,<sp/>...)</highlight></codeline>
<codeline lineno="1639"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>result,ptr;</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/>va_list<sp/>args;</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0,result=NIL;j&lt;n;++j)<sp/><sp/>result<sp/>=<sp/>cons(NIL,result);</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/>va_start(args,n);</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0,ptr=result;j&lt;n;ptr=cdr(ptr),++j)</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/>setcar(ptr,va_arg(args,<ref refid="structobj" kindref="compound">LISP</ref>));</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/>va_end(args);</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);}</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"></highlight></codeline>
<codeline lineno="1649"><highlight class="normal"></highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>fast_load(<ref refid="structobj" kindref="compound">LISP</ref><sp/>lfname,<ref refid="structobj" kindref="compound">LISP</ref><sp/>noeval)</highlight></codeline>
<codeline lineno="1651"><highlight class="normal">{</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fname;</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>stream;</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>result<sp/>=<sp/>NIL,form;</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/>fname<sp/>=<sp/>get_c_string(lfname);</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(siod_verbose_level<sp/>&gt;=<sp/>3)</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/>{put_st(</highlight><highlight class="stringliteral">&quot;fast<sp/>loading<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/>put_st(fname);</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/>put_st(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);}</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/>stream<sp/>=<sp/>listn(3,</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fopen_c(fname,</highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cons_array(flocons(100),NIL),</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flocons(0));</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(NEQ(stream,form<sp/>=<sp/>fast_read(stream)))</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(siod_verbose_level<sp/>&gt;=<sp/>5)</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lprint(form,NIL);</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NULLP(noeval)</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>leval(form,NIL);</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>cons(form,result);}</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/>fclose_l(car(stream));</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/>if<sp/>(siod_verbose_level<sp/>&gt;=<sp/>3)</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/>put_st(&quot;done.\n&quot;);</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/>return(nreverse(result));}</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"></highlight></codeline>
<codeline lineno="1675"><highlight class="normal">static<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>shexstr(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*outstr,</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buff,</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="1676"><highlight class="normal">{</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data<sp/>=<sp/>buff;</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;j&lt;len;++j)</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/>sprintf(&amp;outstr[j*2],</highlight><highlight class="stringliteral">&quot;%02X&quot;</highlight><highlight class="normal">,data[j]);}</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"></highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>fast_save(<ref refid="structobj" kindref="compound">LISP</ref><sp/>fname,<ref refid="structobj" kindref="compound">LISP</ref><sp/>forms,<ref refid="structobj" kindref="compound">LISP</ref><sp/>nohash,<ref refid="structobj" kindref="compound">LISP</ref><sp/>comment,<ref refid="structobj" kindref="compound">LISP</ref><sp/>fmode)</highlight></codeline>
<codeline lineno="1682"><highlight class="normal">{</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cname,msgbuff[100],databuff[50];</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>stream,l;</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/>FILE<sp/>*f;</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>l_one<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d_one<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/>cname<sp/>=<sp/>get_c_string(fname);</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(siod_verbose_level<sp/>&gt;=<sp/>3)</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/>{put_st(</highlight><highlight class="stringliteral">&quot;fast<sp/>saving<sp/>forms<sp/>to<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/>put_st(cname);</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/>put_st(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);}</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/>stream<sp/>=<sp/>listn(3,</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fopen_c(cname,NNULLP(fmode)<sp/>?<sp/>get_c_string(fmode)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;wb&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NNULLP(nohash)<sp/>?<sp/>NIL<sp/>:<sp/>cons_array(flocons(100),NIL),</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flocons(0));</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/>f<sp/>=<sp/>get_c_file(car(stream),NULL);</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NNULLP(comment)</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/>fput_st(f,get_c_string(comment));</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/>sprintf(msgbuff,&quot;</highlight><highlight class="preprocessor">#<sp/>Siod<sp/>Binary<sp/>Object<sp/>Save<sp/>File\n&quot;);</highlight></codeline>
<codeline lineno="1700"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>fput_st(f,msgbuff);</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/>sprintf(msgbuff,</highlight><highlight class="stringliteral">&quot;#<sp/>sizeof(long)<sp/>=<sp/>%d\n#<sp/>sizeof(double)<sp/>=<sp/>%d\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">),</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/>fput_st(f,msgbuff);</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/>shexstr(databuff,&amp;l_one,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(l_one));</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/>sprintf(msgbuff,</highlight><highlight class="stringliteral">&quot;#<sp/>1<sp/>=<sp/>%s\n&quot;</highlight><highlight class="normal">,databuff);</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/>fput_st(f,msgbuff);</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/>shexstr(databuff,&amp;d_one,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(d_one));</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/>sprintf(msgbuff,</highlight><highlight class="stringliteral">&quot;#<sp/>1.0<sp/>=<sp/>%s\n&quot;</highlight><highlight class="normal">,databuff);</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/>fput_st(f,msgbuff);</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(l=forms;NNULLP(l);l=cdr(l))</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/>fast_print(car(l),stream);</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/>fclose_l(car(stream));</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(siod_verbose_level<sp/>&gt;=<sp/>3)</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/>put_st(</highlight><highlight class="stringliteral">&quot;done.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"></highlight></codeline>
<codeline lineno="1717"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>swrite1(<ref refid="structobj" kindref="compound">LISP</ref><sp/>stream,<ref refid="structobj" kindref="compound">LISP</ref><sp/>data)</highlight></codeline>
<codeline lineno="1718"><highlight class="normal">{FILE<sp/>*f<sp/>=<sp/>get_c_file(stream,stdout);</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>TYPE(data)</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_symbol:</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_string:</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fput_st(f,get_c_string(data));</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lprin1f(data,f);</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;}}</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"></highlight></codeline>
<codeline lineno="1728"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>swrite2(<ref refid="structobj" kindref="compound">LISP</ref><sp/>name,<ref refid="structobj" kindref="compound">LISP</ref><sp/>table)</highlight></codeline>
<codeline lineno="1729"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>value,key;</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SYMBOLP(name)<sp/>&amp;&amp;<sp/>(PNAME(name)[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/>key<sp/>=<sp/>rintern(&amp;PNAME(name)[1]);</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/>key<sp/>=<sp/>name;</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/>value<sp/>=<sp/>href(table,key);</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CONSP(value))</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CONSP(CDR(value))<sp/>&amp;&amp;<sp/>EQ(name,key))</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>hset(table,key,CDR(value));</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(CAR(value));}</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NULLP(value))</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(name);</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(value);}</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"></highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>swrite(<ref refid="structobj" kindref="compound">LISP</ref><sp/>stream,<ref refid="structobj" kindref="compound">LISP</ref><sp/>table,<ref refid="structobj" kindref="compound">LISP</ref><sp/>data)</highlight></codeline>
<codeline lineno="1745"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>j,k,m,n;</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(TYPE(data))</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_symbol:</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>swrite1(stream,swrite2(data,table));</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_lisp_array:</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>data-&gt;storage_as.lisp_array.dim;</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>1)</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;no<sp/>object<sp/>repeat<sp/>count&quot;</highlight><highlight class="normal">,data);</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>=<sp/>get_c_long(swrite2(data-&gt;storage_as.lisp_array.data[0],</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>table));</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(k=0;k&lt;m;++k)</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=1;j&lt;n;++j)</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>swrite(stream,table,data-&gt;storage_as.lisp_array.data[j]);</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_cons:</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>this<sp/>should<sp/>be<sp/>handled<sp/>similar<sp/>to<sp/>the<sp/>array<sp/>case<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>swrite1(stream,data);}</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"></highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lpow(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x,<ref refid="structobj" kindref="compound">LISP</ref><sp/>y)</highlight></codeline>
<codeline lineno="1768"><highlight class="normal">{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NFLONUMP(x)<sp/>err(&quot;wta(1st)<sp/>to<sp/>pow&quot;,x);</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/>if<sp/>NFLONUMP(y)<sp/>err(&quot;wta(2nd)<sp/>to<sp/>pow&quot;,y);</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/>return(flocons(pow(FLONM(x),FLONM(y))));}</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"></highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lexp(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x)</highlight></codeline>
<codeline lineno="1773"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(exp(get_c_double(x))));}</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"></highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>llog(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x)</highlight></codeline>
<codeline lineno="1776"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(log(get_c_double(x))));}</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"></highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lsin(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x)</highlight></codeline>
<codeline lineno="1779"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(sin(get_c_double(x))));}</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"></highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lcos(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x)</highlight></codeline>
<codeline lineno="1782"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(cos(get_c_double(x))));}</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"></highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>ltan(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x)</highlight></codeline>
<codeline lineno="1785"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(tan(get_c_double(x))));}</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"></highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lasin(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x)</highlight></codeline>
<codeline lineno="1788"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(asin(get_c_double(x))));}</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"></highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lacos(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x)</highlight></codeline>
<codeline lineno="1791"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(acos(get_c_double(x))));}</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"></highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>latan(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x)</highlight></codeline>
<codeline lineno="1794"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(atan(get_c_double(x))));}</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"></highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>latan2(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x,<ref refid="structobj" kindref="compound">LISP</ref><sp/>y)</highlight></codeline>
<codeline lineno="1797"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(atan2(get_c_double(x),get_c_double(y))));}</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"></highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>hexstr(<ref refid="structobj" kindref="compound">LISP</ref><sp/>a)</highlight></codeline>
<codeline lineno="1800"><highlight class="normal">{</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*in;</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*out;</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>result;</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>j,dim;</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/>in<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>get_c_string_dim(a,&amp;dim);</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/>result<sp/>=<sp/>strcons(dim*2,NULL);</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(out=get_c_string(result),j=0;j&lt;dim;++j,out<sp/>+=<sp/>2)</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/>sprintf(out,</highlight><highlight class="stringliteral">&quot;%02x&quot;</highlight><highlight class="normal">,in[j]);</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);}</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"></highlight></codeline>
<codeline lineno="1810"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xdigitvalue(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c)</highlight></codeline>
<codeline lineno="1811"><highlight class="normal">{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isdigit(c))</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(c<sp/>-<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isxdigit(c))</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(toupper(c)<sp/>-<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>+<sp/>10);</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);}</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"></highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>hexstr2bytes(<ref refid="structobj" kindref="compound">LISP</ref><sp/>a)</highlight></codeline>
<codeline lineno="1818"><highlight class="normal">{</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*in;</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*out;</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>result;</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>j,dim;</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/>in<sp/>=<sp/>get_c_string(a);</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/>dim<sp/>=<sp/>strlen(in)<sp/>/<sp/>2;<sp/></highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/>result<sp/>=<sp/>arcons(tc_byte_array,dim,0);</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/>out<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>result-&gt;storage_as.string.data;</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;j&lt;dim;++j)</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/>out[j]<sp/>=<sp/>xdigitvalue(in[j*2])<sp/>*<sp/>16<sp/>+<sp/>xdigitvalue(in[j*2+1]);</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);}</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"></highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>getprop(<ref refid="structobj" kindref="compound">LISP</ref><sp/>plist,<ref refid="structobj" kindref="compound">LISP</ref><sp/>key)</highlight></codeline>
<codeline lineno="1831"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>l;</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(l=cdr(plist);NNULLP(l);l=cddr(l))</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>EQ(car(l),key)</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(cadr(l));</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>INTERRUPT_CHECK();</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"></highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>setprop(<ref refid="structobj" kindref="compound">LISP</ref><sp/>plist,<ref refid="structobj" kindref="compound">LISP</ref><sp/>key,<ref refid="structobj" kindref="compound">LISP</ref><sp/>value)</highlight></codeline>
<codeline lineno="1840"><highlight class="normal">{err(</highlight><highlight class="stringliteral">&quot;not<sp/>implemented&quot;</highlight><highlight class="normal">,NIL);</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"></highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>putprop(<ref refid="structobj" kindref="compound">LISP</ref><sp/>plist,<ref refid="structobj" kindref="compound">LISP</ref><sp/>value,<ref refid="structobj" kindref="compound">LISP</ref><sp/>key)</highlight></codeline>
<codeline lineno="1844"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(setprop(plist,key,value));}</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"></highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>ltypeof(<ref refid="structobj" kindref="compound">LISP</ref><sp/>obj)</highlight></codeline>
<codeline lineno="1847"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/>x<sp/>=<sp/>TYPE(obj);</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(x)</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_nil:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(cintern(</highlight><highlight class="stringliteral">&quot;tc_nil&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_cons:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(cintern(</highlight><highlight class="stringliteral">&quot;tc_cons&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_flonum:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(cintern(</highlight><highlight class="stringliteral">&quot;tc_flonum&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_symbol:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(cintern(</highlight><highlight class="stringliteral">&quot;tc_symbol&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_0:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(cintern(</highlight><highlight class="stringliteral">&quot;tc_subr_0&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_1:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(cintern(</highlight><highlight class="stringliteral">&quot;tc_subr_1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_2:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(cintern(</highlight><highlight class="stringliteral">&quot;tc_subr_2&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_2n:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(cintern(</highlight><highlight class="stringliteral">&quot;tc_subr_2n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_3:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(cintern(</highlight><highlight class="stringliteral">&quot;tc_subr_3&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_4:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(cintern(</highlight><highlight class="stringliteral">&quot;tc_subr_4&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_subr_5:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(cintern(</highlight><highlight class="stringliteral">&quot;tc_subr_5&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_lsubr:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(cintern(</highlight><highlight class="stringliteral">&quot;tc_lsubr&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_fsubr:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(cintern(</highlight><highlight class="stringliteral">&quot;tc_fsubr&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_msubr:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(cintern(</highlight><highlight class="stringliteral">&quot;tc_msubr&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_closure:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(cintern(</highlight><highlight class="stringliteral">&quot;tc_closure&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_free_cell:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(cintern(</highlight><highlight class="stringliteral">&quot;tc_free_cell&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_string:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(cintern(</highlight><highlight class="stringliteral">&quot;tc_string&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_byte_array:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(cintern(</highlight><highlight class="stringliteral">&quot;tc_byte_array&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_double_array:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(cintern(</highlight><highlight class="stringliteral">&quot;tc_double_array&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_long_array:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(cintern(</highlight><highlight class="stringliteral">&quot;tc_long_array&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_lisp_array:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(cintern(</highlight><highlight class="stringliteral">&quot;tc_lisp_array&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_c_file:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(cintern(</highlight><highlight class="stringliteral">&quot;tc_c_file&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(x));}}</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"></highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>caaar(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x)</highlight></codeline>
<codeline lineno="1875"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(car(car(car(x))));}</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"></highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>caadr(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x)</highlight></codeline>
<codeline lineno="1878"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(car(car(cdr(x))));}</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"></highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>cadar(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x)</highlight></codeline>
<codeline lineno="1881"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(car(cdr(car(x))));}</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"></highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>caddr(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x)</highlight></codeline>
<codeline lineno="1884"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(car(cdr(cdr(x))));}</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"></highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>cdaar(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x)</highlight></codeline>
<codeline lineno="1887"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(cdr(car(car(x))));}</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"></highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>cdadr(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x)</highlight></codeline>
<codeline lineno="1890"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(cdr(car(cdr(x))));}</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"></highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>cddar(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x)</highlight></codeline>
<codeline lineno="1893"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(cdr(cdr(car(x))));}</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"></highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>cdddr(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x)</highlight></codeline>
<codeline lineno="1896"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(cdr(cdr(cdr(x))));}</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"></highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>ash(<ref refid="structobj" kindref="compound">LISP</ref><sp/>value,<ref refid="structobj" kindref="compound">LISP</ref><sp/>n)</highlight></codeline>
<codeline lineno="1899"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>m,k;</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/>m<sp/>=<sp/>get_c_long(value);</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/>k<sp/>=<sp/>get_c_long(n);</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/>m<sp/>=<sp/>m<sp/>&lt;&lt;<sp/>k;</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/>m<sp/>=<sp/>m<sp/>&gt;&gt;<sp/>(-k);</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(m));}</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"></highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>bitand(<ref refid="structobj" kindref="compound">LISP</ref><sp/>a,<ref refid="structobj" kindref="compound">LISP</ref><sp/>b)</highlight></codeline>
<codeline lineno="1909"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(get_c_long(a)<sp/>&amp;<sp/>get_c_long(b)));}</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"></highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>bitor(<ref refid="structobj" kindref="compound">LISP</ref><sp/>a,<ref refid="structobj" kindref="compound">LISP</ref><sp/>b)</highlight></codeline>
<codeline lineno="1912"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(get_c_long(a)<sp/>|<sp/>get_c_long(b)));}</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"></highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>bitxor(<ref refid="structobj" kindref="compound">LISP</ref><sp/>a,<ref refid="structobj" kindref="compound">LISP</ref><sp/>b)</highlight></codeline>
<codeline lineno="1915"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(get_c_long(a)<sp/>^<sp/>get_c_long(b)));}</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"></highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>bitnot(<ref refid="structobj" kindref="compound">LISP</ref><sp/>a)</highlight></codeline>
<codeline lineno="1918"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(~get_c_long(a)));}</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"></highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>leval_prog1(<ref refid="structobj" kindref="compound">LISP</ref><sp/>args,<ref refid="structobj" kindref="compound">LISP</ref><sp/>env)</highlight></codeline>
<codeline lineno="1921"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>retval,l;</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/>retval<sp/>=<sp/>leval(car(args),env);</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(l=cdr(args);NNULLP(l);l=cdr(l))</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/>leval(car(l),env);</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(retval);}</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"></highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>leval_cond(<ref refid="structobj" kindref="compound">LISP</ref><sp/>*pform,<ref refid="structobj" kindref="compound">LISP</ref><sp/>*penv)</highlight></codeline>
<codeline lineno="1928"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>args,env,clause,value,next;</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/>args<sp/>=<sp/>cdr(*pform);</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/>env<sp/>=<sp/>*penv;</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NULLP(args)</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/>{*pform<sp/>=<sp/>NIL;</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/>next<sp/>=<sp/>cdr(args);</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>NNULLP(next)</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/>{clause<sp/>=<sp/>car(args);</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/>leval(car(clause),env);</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NNULLP(value)</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{clause<sp/>=<sp/>cdr(clause);</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NULLP(clause)</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{*pform<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{next<sp/>=<sp/>cdr(clause);</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(NNULLP(next))</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{leval(car(clause),env);</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clause=next;</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next=cdr(next);}</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*pform<sp/>=<sp/>car(clause);<sp/></highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(sym_t);}}</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/>args<sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/>next<sp/>=<sp/>cdr(next);}</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/>clause<sp/>=<sp/>car(args);</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/>next<sp/>=<sp/>cdr(clause);</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NULLP(next)</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/><sp/>{*pform<sp/>=<sp/>car(clause);</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(sym_t);}</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/>value<sp/>=<sp/>leval(car(clause),env);</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NULLP(value)</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/><sp/>{*pform<sp/>=<sp/>NIL;</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/>clause<sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/>next<sp/>=<sp/>cdr(next);</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(NNULLP(next))</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/><sp/>{leval(car(clause),env);</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/>clause=next;</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/>next=cdr(next);}</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/>*pform<sp/>=<sp/>car(clause);</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(sym_t);}</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"></highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lstrspn(<ref refid="structobj" kindref="compound">LISP</ref><sp/>str1,<ref refid="structobj" kindref="compound">LISP</ref><sp/>str2)</highlight></codeline>
<codeline lineno="1972"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(strspn(get_c_string(str1),get_c_string(str2))));}</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"></highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lstrcspn(<ref refid="structobj" kindref="compound">LISP</ref><sp/>str1,<ref refid="structobj" kindref="compound">LISP</ref><sp/>str2)</highlight></codeline>
<codeline lineno="1975"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(strcspn(get_c_string(str1),get_c_string(str2))));}</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"></highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>substring_equal(<ref refid="structobj" kindref="compound">LISP</ref><sp/>str1,<ref refid="structobj" kindref="compound">LISP</ref><sp/>str2,<ref refid="structobj" kindref="compound">LISP</ref><sp/>start,<ref refid="structobj" kindref="compound">LISP</ref><sp/>end)</highlight></codeline>
<codeline lineno="1978"><highlight class="normal">{</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cstr1,*cstr2;</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>len1,n,s,e;</highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/>cstr1<sp/>=<sp/>get_c_string_dim(str1,&amp;len1);</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/>cstr2<sp/>=<sp/>get_c_string_dim(str2,&amp;n);</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/>s<sp/>=<sp/>NULLP(start)<sp/>?<sp/>0<sp/>:<sp/>get_c_long(start);</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/>e<sp/>=<sp/>NULLP(end)<sp/>?<sp/>len1<sp/>:<sp/>get_c_long(end);</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((s<sp/>&lt;<sp/>0)<sp/>||<sp/>(s<sp/>&gt;<sp/>e)<sp/>||<sp/>(e<sp/>&lt;<sp/>0)<sp/>||<sp/>(e<sp/>&gt;<sp/>n)<sp/>||<sp/>((e<sp/>-<sp/>s)<sp/>!=<sp/>len1))</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">((memcmp(cstr1,&amp;cstr2[s],e-s)<sp/>==<sp/>0)<sp/>?<sp/>a_true_value()<sp/>:<sp/>NIL);}</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"></highlight></codeline>
<codeline lineno="1988"><highlight class="normal"></highlight><highlight class="comment">//#ifdef<sp/>vms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1989"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>strncasecmp(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="1990"><highlight class="normal">{</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j,c1,c2;</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;j&lt;n;++j)</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{c1<sp/>=<sp/>toupper(s1[j]);</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/>c2<sp/>=<sp/>toupper(s2[j]);</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c1<sp/>==<sp/>0)<sp/>&amp;&amp;<sp/>(c2<sp/>==<sp/>0))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c1<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(-1);</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c2<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(1);</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c1<sp/>&lt;<sp/>c2)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(-1);</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c2<sp/>&gt;<sp/>c1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(1);}</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);}</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"></highlight><highlight class="comment">//#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2001"><highlight class="normal"></highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>substring_equalcase(<ref refid="structobj" kindref="compound">LISP</ref><sp/>str1,<ref refid="structobj" kindref="compound">LISP</ref><sp/>str2,<ref refid="structobj" kindref="compound">LISP</ref><sp/>start,<ref refid="structobj" kindref="compound">LISP</ref><sp/>end)</highlight></codeline>
<codeline lineno="2003"><highlight class="normal">{</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cstr1,*cstr2;</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>len1,n,s,e;</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/>cstr1<sp/>=<sp/>get_c_string_dim(str1,&amp;len1);</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/>cstr2<sp/>=<sp/>get_c_string_dim(str2,&amp;n);</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/>s<sp/>=<sp/>NULLP(start)<sp/>?<sp/>0<sp/>:<sp/>get_c_long(start);</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/>e<sp/>=<sp/>NULLP(end)<sp/>?<sp/>len1<sp/>:<sp/>get_c_long(end);</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((s<sp/>&lt;<sp/>0)<sp/>||<sp/>(s<sp/>&gt;<sp/>e)<sp/>||<sp/>(e<sp/>&lt;<sp/>0)<sp/>||<sp/>(e<sp/>&gt;<sp/>n)<sp/>||<sp/>((e<sp/>-<sp/>s)<sp/>!=<sp/>len1))</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">((strncasecmp(cstr1,&amp;cstr2[s],e-s)<sp/>==<sp/>0)<sp/>?<sp/>a_true_value()<sp/>:<sp/>NIL);}</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"></highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>set_eval_history(<ref refid="structobj" kindref="compound">LISP</ref><sp/>len,<ref refid="structobj" kindref="compound">LISP</ref><sp/>circ)</highlight></codeline>
<codeline lineno="2014"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>data;</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/>data<sp/>=<sp/>NULLP(len)<sp/>?<sp/>len<sp/>:<sp/>make_list(len,NIL);</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NNULLP(circ)</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/>data<sp/>=<sp/>nconc(data,data);</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/>setvar(cintern(&quot;*eval-history-ptr*&quot;),data,NIL);</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/>setvar(cintern(&quot;*eval-history*&quot;),data,NIL);</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/>return(len);}</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"></highlight></codeline>
<codeline lineno="2022"><highlight class="normal">static<sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>parser_fasl(<ref refid="structobj" kindref="compound">LISP</ref><sp/>ignore)</highlight></codeline>
<codeline lineno="2023"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(closure(listn(3,</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NIL,</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cons_array(flocons(100),NIL),</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flocons(0)),</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>leval(cintern(</highlight><highlight class="stringliteral">&quot;parser_fasl_hook&quot;</highlight><highlight class="normal">),NIL)));}</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"></highlight></codeline>
<codeline lineno="2029"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>parser_fasl_hook(<ref refid="structobj" kindref="compound">LISP</ref><sp/>env,<ref refid="structobj" kindref="compound">LISP</ref><sp/>f)</highlight></codeline>
<codeline lineno="2030"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>result;</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/>setcar(env,f);</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/>result<sp/>=<sp/>fast_read(env);</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>EQ(result,env)</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/><sp/>return(get_eof_val());</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/>else</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/><sp/>return(result);}</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"></highlight></codeline>
<codeline lineno="2038"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init_subrs_a(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2039"><highlight class="normal">{init_subr_2(</highlight><highlight class="stringliteral">&quot;aref&quot;</highlight><highlight class="normal">,aref1);</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/>init_subr_3(</highlight><highlight class="stringliteral">&quot;aset&quot;</highlight><highlight class="normal">,aset1);</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/>init_lsubr(</highlight><highlight class="stringliteral">&quot;string-append&quot;</highlight><highlight class="normal">,string_append);</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/>init_lsubr(</highlight><highlight class="stringliteral">&quot;bytes-append&quot;</highlight><highlight class="normal">,bytes_append);</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;string-length&quot;</highlight><highlight class="normal">,string_length);</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;string-dimension&quot;</highlight><highlight class="normal">,string_dim);</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;read-from-string&quot;</highlight><highlight class="normal">,read_from_string);</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/>init_subr_3(</highlight><highlight class="stringliteral">&quot;print-to-string&quot;</highlight><highlight class="normal">,print_to_string);</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;cons-array&quot;</highlight><highlight class="normal">,cons_array);</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;sxhash&quot;</highlight><highlight class="normal">,sxhash);</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;equal?&quot;</highlight><highlight class="normal">,equal);</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;href&quot;</highlight><highlight class="normal">,href);</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/>init_subr_3(</highlight><highlight class="stringliteral">&quot;hset&quot;</highlight><highlight class="normal">,hset);</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;assoc&quot;</highlight><highlight class="normal">,assoc);</highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;assv&quot;</highlight><highlight class="normal">,assv);</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;fast-read&quot;</highlight><highlight class="normal">,fast_read);</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;fast-print&quot;</highlight><highlight class="normal">,fast_print);</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;make-list&quot;</highlight><highlight class="normal">,make_list);</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;fread&quot;</highlight><highlight class="normal">,lfread);</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;fwrite&quot;</highlight><highlight class="normal">,lfwrite);</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;fflush&quot;</highlight><highlight class="normal">,lfflush);</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;length&quot;</highlight><highlight class="normal">,llength);</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/>init_subr_4(</highlight><highlight class="stringliteral">&quot;number-&gt;string&quot;</highlight><highlight class="normal">,number2string);</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;string-&gt;number&quot;</highlight><highlight class="normal">,string2number);</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/>init_subr_3(</highlight><highlight class="stringliteral">&quot;substring&quot;</highlight><highlight class="normal">,substring);</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;string-search&quot;</highlight><highlight class="normal">,string_search);</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;string-trim&quot;</highlight><highlight class="normal">,string_trim);</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;string-trim-left&quot;</highlight><highlight class="normal">,string_trim_left);</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;string-trim-right&quot;</highlight><highlight class="normal">,string_trim_right);</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;string-upcase&quot;</highlight><highlight class="normal">,string_upcase);</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;string-downcase&quot;</highlight><highlight class="normal">,string_downcase);</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;strcmp&quot;</highlight><highlight class="normal">,lstrcmp);</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;strcat&quot;</highlight><highlight class="normal">,lstrcat);</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;strcpy&quot;</highlight><highlight class="normal">,lstrcpy);</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;strbreakup&quot;</highlight><highlight class="normal">,lstrbreakup);</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;unbreakupstr&quot;</highlight><highlight class="normal">,lstrunbreakup);</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;string?&quot;</highlight><highlight class="normal">,stringp);</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/>gc_protect_sym(&amp;sym_e,</highlight><highlight class="stringliteral">&quot;e&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/>gc_protect_sym(&amp;sym_f,</highlight><highlight class="stringliteral">&quot;f&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/>gc_protect_sym(&amp;sym_plists,</highlight><highlight class="stringliteral">&quot;*plists*&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/>setvar(sym_plists,arcons(tc_lisp_array,100,1),NIL);</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/>init_subr_3(</highlight><highlight class="stringliteral">&quot;lref-default&quot;</highlight><highlight class="normal">,lref_default);</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/>init_subr_3(</highlight><highlight class="stringliteral">&quot;larg-default&quot;</highlight><highlight class="normal">,larg_default);</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/>init_subr_3(</highlight><highlight class="stringliteral">&quot;lkey-default&quot;</highlight><highlight class="normal">,lkey_default);</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/>init_lsubr(</highlight><highlight class="stringliteral">&quot;list&quot;</highlight><highlight class="normal">,llist);</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/>init_lsubr(</highlight><highlight class="stringliteral">&quot;writes&quot;</highlight><highlight class="normal">,writes);</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/>init_subr_3(</highlight><highlight class="stringliteral">&quot;qsort&quot;</highlight><highlight class="normal">,lqsort);</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;string-lessp&quot;</highlight><highlight class="normal">,string_lessp);</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/>init_lsubr(</highlight><highlight class="stringliteral">&quot;mapcar&quot;</highlight><highlight class="normal">,mapcar);</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/>init_subr_3(</highlight><highlight class="stringliteral">&quot;mapcar2&quot;</highlight><highlight class="normal">,mapcar2);</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;mapcar1&quot;</highlight><highlight class="normal">,mapcar1);</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/>init_subr_3(</highlight><highlight class="stringliteral">&quot;benchmark-funcall1&quot;</highlight><highlight class="normal">,benchmark_funcall1);</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/>init_lsubr(</highlight><highlight class="stringliteral">&quot;benchmark-funcall2&quot;</highlight><highlight class="normal">,benchmark_funcall2);</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/>init_subr_3(</highlight><highlight class="stringliteral">&quot;benchmark-eval&quot;</highlight><highlight class="normal">,benchmark_eval);</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;fmod&quot;</highlight><highlight class="normal">,lfmod);</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;subset&quot;</highlight><highlight class="normal">,lsubset);</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;base64encode&quot;</highlight><highlight class="normal">,base64encode);</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;base64decode&quot;</highlight><highlight class="normal">,base64decode);</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/>init_subr_3(</highlight><highlight class="stringliteral">&quot;ass&quot;</highlight><highlight class="normal">,ass);</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;append2&quot;</highlight><highlight class="normal">,append2);</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/>init_lsubr(</highlight><highlight class="stringliteral">&quot;append&quot;</highlight><highlight class="normal">,append);</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/>init_subr_5(</highlight><highlight class="stringliteral">&quot;fast-save&quot;</highlight><highlight class="normal">,fast_save);</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;fast-load&quot;</highlight><highlight class="normal">,fast_load);</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/>init_subr_3(</highlight><highlight class="stringliteral">&quot;swrite&quot;</highlight><highlight class="normal">,swrite);</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;pow&quot;</highlight><highlight class="normal">,lpow);</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;exp&quot;</highlight><highlight class="normal">,lexp);</highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;log&quot;</highlight><highlight class="normal">,llog);</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;sin&quot;</highlight><highlight class="normal">,lsin);</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;cos&quot;</highlight><highlight class="normal">,lcos);</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;tan&quot;</highlight><highlight class="normal">,ltan);</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;asin&quot;</highlight><highlight class="normal">,lasin);</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;acos&quot;</highlight><highlight class="normal">,lacos);</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;atan&quot;</highlight><highlight class="normal">,latan);</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;atan2&quot;</highlight><highlight class="normal">,latan2);</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;typeof&quot;</highlight><highlight class="normal">,ltypeof);</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;caaar&quot;</highlight><highlight class="normal">,caaar);</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;caadr&quot;</highlight><highlight class="normal">,caadr);</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;cadar&quot;</highlight><highlight class="normal">,cadar);</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;caddr&quot;</highlight><highlight class="normal">,caddr);</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;cdaar&quot;</highlight><highlight class="normal">,cdaar);</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;cdadr&quot;</highlight><highlight class="normal">,cdadr);</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;cddar&quot;</highlight><highlight class="normal">,cddar);</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;cdddr&quot;</highlight><highlight class="normal">,cdddr);</highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/>setvar(cintern(</highlight><highlight class="stringliteral">&quot;*pi*&quot;</highlight><highlight class="normal">),flocons(atan(1.0)*4),NIL);</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/>init_base64_table();</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;array-&gt;hexstr&quot;</highlight><highlight class="normal">,hexstr);</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;hexstr-&gt;bytes&quot;</highlight><highlight class="normal">,hexstr2bytes);</highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/>init_subr_3(</highlight><highlight class="stringliteral">&quot;ass&quot;</highlight><highlight class="normal">,ass);</highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;bit-and&quot;</highlight><highlight class="normal">,bitand);</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;bit-or&quot;</highlight><highlight class="normal">,bitor);</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;bit-xor&quot;</highlight><highlight class="normal">,bitxor);</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;bit-not&quot;</highlight><highlight class="normal">,bitnot);</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/>init_msubr(</highlight><highlight class="stringliteral">&quot;cond&quot;</highlight><highlight class="normal">,leval_cond);</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/>init_fsubr(</highlight><highlight class="stringliteral">&quot;prog1&quot;</highlight><highlight class="normal">,leval_prog1);</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;strspn&quot;</highlight><highlight class="normal">,lstrspn);</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;strcspn&quot;</highlight><highlight class="normal">,lstrcspn);</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/>init_subr_4(</highlight><highlight class="stringliteral">&quot;substring-equal?&quot;</highlight><highlight class="normal">,substring_equal);</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/>init_subr_4(</highlight><highlight class="stringliteral">&quot;substring-equalcase?&quot;</highlight><highlight class="normal">,substring_equalcase);</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;butlast&quot;</highlight><highlight class="normal">,butlast);</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;ash&quot;</highlight><highlight class="normal">,ash);</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;get&quot;</highlight><highlight class="normal">,getprop);</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/>init_subr_3(</highlight><highlight class="stringliteral">&quot;setprop&quot;</highlight><highlight class="normal">,setprop);</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/>init_subr_3(</highlight><highlight class="stringliteral">&quot;putprop&quot;</highlight><highlight class="normal">,putprop);</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;last&quot;</highlight><highlight class="normal">,last);</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;memq&quot;</highlight><highlight class="normal">,memq);</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;memv&quot;</highlight><highlight class="normal">,memv);</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;member&quot;</highlight><highlight class="normal">,member);</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;nth&quot;</highlight><highlight class="normal">,nth);</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;nconc&quot;</highlight><highlight class="normal">,nconc);</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;set-eval-history&quot;</highlight><highlight class="normal">,set_eval_history);</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;parser_fasl&quot;</highlight><highlight class="normal">,parser_fasl);</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/>setvar(cintern(</highlight><highlight class="stringliteral">&quot;*parser_fasl.scm-loaded*&quot;</highlight><highlight class="normal">),a_true_value(),NIL);</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;parser_fasl_hook&quot;</highlight><highlight class="normal">,parser_fasl_hook);</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/>init_sliba_version();}</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/Users/josburn/Documents/programming/siod/libsiod/sliba.c"/>
  </compounddef>
</doxygen>

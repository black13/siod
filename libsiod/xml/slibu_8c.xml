<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.3.1">
  <compounddef id="slibu_8c" kind="file">
    <compoundname>slibu.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">ctype.h</includes>
    <includes local="no">setjmp.h</includes>
    <includes local="no">signal.h</includes>
    <includes local="no">math.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">time.h</includes>
    <includes local="no">errno.h</includes>
    <includes local="no">stdarg.h</includes>
    <includes refid="siod_8h" local="yes">siod.h</includes>
    <includes refid="siodp_8h" local="yes">siodp.h</includes>
    <includes refid="md5_8h" local="yes">md5.h</includes>
    <incdepgraph>
      <node id="43">
        <label>stdarg.h</label>
      </node>
      <node id="45">
        <label>siodp.h</label>
        <link refid="siodp_8h_source"/>
      </node>
      <node id="40">
        <label>stdlib.h</label>
      </node>
      <node id="37">
        <label>setjmp.h</label>
      </node>
      <node id="42">
        <label>errno.h</label>
      </node>
      <node id="35">
        <label>string.h</label>
      </node>
      <node id="44">
        <label>siod.h</label>
        <link refid="siod_8h_source"/>
      </node>
      <node id="38">
        <label>signal.h</label>
      </node>
      <node id="41">
        <label>time.h</label>
      </node>
      <node id="39">
        <label>math.h</label>
      </node>
      <node id="46">
        <label>md5.h</label>
        <link refid="md5_8h_source"/>
      </node>
      <node id="36">
        <label>ctype.h</label>
      </node>
      <node id="34">
        <label>stdio.h</label>
      </node>
      <node id="33">
        <label>slibu.c</label>
        <link refid="slibu.c"/>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="slibu_8c_1acc9a1cdbaad4936a3da0f61bc6a22ea9" prot="public" static="no">
        <name>CTYPE_FLOAT</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="1887" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="1887" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="slibu_8c_1ad6de6ea030fd05a7dc9f1f12bf309c0f" prot="public" static="no">
        <name>CTYPE_DOUBLE</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="1888" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="1888" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="slibu_8c_1a55f45bf1f50211077eef26be2691bf7d" prot="public" static="no">
        <name>CTYPE_CHAR</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="1889" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="1889" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="slibu_8c_1a18464c3708ac96f7ef6e1eae5b4286d6" prot="public" static="no">
        <name>CTYPE_UCHAR</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="1890" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="1890" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="slibu_8c_1a5bc9f316e732110d0df3e5752d3d04fa" prot="public" static="no">
        <name>CTYPE_SHORT</name>
        <initializer>5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="1891" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="1891" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="slibu_8c_1afef7c8310a822e607919a9b2da583c6f" prot="public" static="no">
        <name>CTYPE_USHORT</name>
        <initializer>6</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="1892" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="1892" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="slibu_8c_1a92d462dd3152279508bac94000a1acc0" prot="public" static="no">
        <name>CTYPE_INT</name>
        <initializer>7</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="1893" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="1893" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="slibu_8c_1a5dc68d474310c8f096dfa666a9a55947" prot="public" static="no">
        <name>CTYPE_UINT</name>
        <initializer>8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="1894" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="1894" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="slibu_8c_1aa51b7a09f3459b6b4221b44661b45b47" prot="public" static="no">
        <name>CTYPE_LONG</name>
        <initializer>9</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="1895" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="1895" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="slibu_8c_1a7976164911ad751badc95cbcd94eee92" prot="public" static="no">
        <name>CTYPE_ULONG</name>
        <initializer>10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="1896" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="1896" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="slibu_8c_1a1b1816c09ec3338cb69aa20b43534bd8" prot="public" static="no" mutable="no">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP sym_channels</definition>
        <argsstring></argsstring>
        <name>sym_channels</name>
        <initializer>= NIL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="109" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="slibu_8c_1abbe648c8a0e72e55fe60da2217288096" prot="public" static="no" mutable="no">
        <type>long</type>
        <definition>long tc_opendir</definition>
        <argsstring></argsstring>
        <name>tc_opendir</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="110" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="slibu_8c_1a66e443265430f35c667495814bbcfa00" prot="public" static="no" mutable="no">
        <type>char *</type>
        <definition>char* ld_library_path_env</definition>
        <argsstring></argsstring>
        <name>ld_library_path_env</name>
        <initializer>= &quot;LD_LIBRARY_PATH&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="112" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="112" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="slibu_8c_1a390f071b249911b1945f5b25233c090f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void init_slibu_version</definition>
        <argsstring>(void)</argsstring>
        <name>init_slibu_version</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="104" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="103" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="slibu_8c_1a60de2f6dfca7e067af4003693d8eff52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lsystem</definition>
        <argsstring>(LISP args)</argsstring>
        <name>lsystem</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="123" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="122" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="slibu_8c_1a034c537a2566298ebbbe09be38c09ea6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lgetuid</definition>
        <argsstring>(void)</argsstring>
        <name>lgetuid</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="135" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="134" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="slibu_8c_1ad92f89153c816627c06b988140d1f355" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lgetgid</definition>
        <argsstring>(void)</argsstring>
        <name>lgetgid</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="138" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="137" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="slibu_8c_1a98fd6e9bcaea867bf94b9325f38060cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lrandom</definition>
        <argsstring>(LISP n)</argsstring>
        <name>lrandom</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="389" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="388" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="slibu_8c_1a73c1fba2634135a444814bd9265dde5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lsrandom</definition>
        <argsstring>(LISP n)</argsstring>
        <name>lsrandom</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="399" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="398" bodyend="407"/>
      </memberdef>
      <memberdef kind="function" id="slibu_8c_1af30349636d21c5a04b217a1df33cba9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char **</type>
        <definition>char** list2char</definition>
        <argsstring>(LISP *safe, LISP v)</argsstring>
        <name>list2char</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref> *</type>
          <declname>safe</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="427" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="426" bodyend="437"/>
      </memberdef>
      <memberdef kind="function" id="slibu_8c_1af110c703a11e37ff0fcdf8a667ffdbfe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int assemble_options</definition>
        <argsstring>(LISP l,...)</argsstring>
        <name>assemble_options</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>l</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="469" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="468" bodyend="489"/>
      </memberdef>
      <memberdef kind="function" id="slibu_8c_1a51210515715425609c115a82310425c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lgetpid</definition>
        <argsstring>(void)</argsstring>
        <name>lgetpid</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="531" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="530" bodyend="531"/>
      </memberdef>
      <memberdef kind="function" id="slibu_8c_1af0e2f7caaad3ef49c8a8f48f590fa985" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lgetppid</definition>
        <argsstring>(void)</argsstring>
        <name>lgetppid</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="562" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="561" bodyend="562"/>
      </memberdef>
      <memberdef kind="function" id="slibu_8c_1a62b4c144fbd6d78614b07d0587affc13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lmemref_byte</definition>
        <argsstring>(LISP addr)</argsstring>
        <name>lmemref_byte</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>addr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="566" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="565" bodyend="567"/>
      </memberdef>
      <memberdef kind="function" id="slibu_8c_1a4cc7a7c76da80da833f69c8d2b6d65d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lexit</definition>
        <argsstring>(LISP val)</argsstring>
        <name>lexit</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="570" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="569" bodyend="573"/>
      </memberdef>
      <memberdef kind="function" id="slibu_8c_1a0e79912f983fabb9ab8abee3d9c181e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP ltrunc</definition>
        <argsstring>(LISP x)</argsstring>
        <name>ltrunc</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="576" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="575" bodyend="579"/>
      </memberdef>
      <memberdef kind="function" id="slibu_8c_1a641d02d9733b41583595462620e840af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_m_d5___c_t_x" kindref="compound">MD5_CTX</ref> *</type>
        <definition>MD5_CTX* get_md5_ctx</definition>
        <argsstring>(LISP a)</argsstring>
        <name>get_md5_ctx</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="596" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="595" bodyend="601"/>
      </memberdef>
      <memberdef kind="function" id="slibu_8c_1a3d3a5fa7f60c4b30244c1d5eb4675ca7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP md5_init</definition>
        <argsstring>(void)</argsstring>
        <name>md5_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="604" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="603" bodyend="606"/>
      </memberdef>
      <memberdef kind="function" id="slibu_8c_1a8c1fefa74fb655b586658509d9e9438d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md5_update_from_file</definition>
        <argsstring>(MD5_CTX *ctx, FILE *f, unsigned char *buff, long dim)</argsstring>
        <name>md5_update_from_file</name>
        <param>
          <type><ref refid="struct_m_d5___c_t_x" kindref="compound">MD5_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>buff</declname>
        </param>
        <param>
          <type>long</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="609" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="608" bodyend="611"/>
      </memberdef>
      <memberdef kind="function" id="slibu_8c_1a72d8b4093b4da21669e96a5dfb8cd736" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP md5_update</definition>
        <argsstring>(LISP ctx, LISP str, LISP len)</argsstring>
        <name>md5_update</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>str</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="614" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="613" bodyend="626"/>
      </memberdef>
      <memberdef kind="function" id="slibu_8c_1a4fa2af8f0753c563e21fe4af1b2548d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP md5_final</definition>
        <argsstring>(LISP ctx)</argsstring>
        <name>md5_final</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="629" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="628" bodyend="632"/>
      </memberdef>
      <memberdef kind="function" id="slibu_8c_1aa2463770a99dc41fa1e8fe2f16aca22e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP file_times</definition>
        <argsstring>(LISP fname)</argsstring>
        <name>file_times</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>fname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="889" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="888" bodyend="898"/>
      </memberdef>
      <memberdef kind="function" id="slibu_8c_1ae3b55338a151978a5aee32548acbe2be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP delete_file</definition>
        <argsstring>(LISP fname)</argsstring>
        <name>delete_file</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>fname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="1108" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="1107" bodyend="1119"/>
      </memberdef>
      <memberdef kind="function" id="slibu_8c_1ae2faa48892b044d88ba62a69aa4771c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP utime2str</definition>
        <argsstring>(LISP u)</argsstring>
        <name>utime2str</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>u</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="1122" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="1121" bodyend="1132"/>
      </memberdef>
      <memberdef kind="function" id="slibu_8c_1a28cd7df6f88c5330d9396d8db5f01fa8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lgetenv</definition>
        <argsstring>(LISP var)</argsstring>
        <name>lgetenv</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>var</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="1229" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="1228" bodyend="1233"/>
      </memberdef>
      <memberdef kind="function" id="slibu_8c_1ad51fe84a04fbfbbc6f5837e3f1287066" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP unix_time</definition>
        <argsstring>(void)</argsstring>
        <name>unix_time</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="1236" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="1235" bodyend="1236"/>
      </memberdef>
      <memberdef kind="function" id="slibu_8c_1a1f48f344dbf56443dc2830a0226e90e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP unix_ctime</definition>
        <argsstring>(LISP value)</argsstring>
        <name>unix_ctime</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="1239" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="1238" bodyend="1249"/>
      </memberdef>
      <memberdef kind="function" id="slibu_8c_1a0fb84d737fe0a80dd183dc0a69f1a310" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP http_date</definition>
        <argsstring>(LISP value)</argsstring>
        <name>http_date</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="1253" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="1251" bodyend="1270"/>
      </memberdef>
      <memberdef kind="function" id="slibu_8c_1a2a38b8a6a2bb6af86fb869217a3ee5ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lsleep</definition>
        <argsstring>(LISP ns)</argsstring>
        <name>lsleep</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>ns</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="1331" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="1330" bodyend="1341"/>
      </memberdef>
      <memberdef kind="function" id="slibu_8c_1a271d14f435f34ab85ea0b87e47645044" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP url_encode</definition>
        <argsstring>(LISP in)</argsstring>
        <name>url_encode</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="1344" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="1343" bodyend="1363"/>
      </memberdef>
      <memberdef kind="function" id="slibu_8c_1a14491e59c65690ec4dd221802181d1ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP url_decode</definition>
        <argsstring>(LISP in)</argsstring>
        <name>url_decode</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="1366" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="1365" bodyend="1394"/>
      </memberdef>
      <memberdef kind="function" id="slibu_8c_1a78d817b462241341e72d148d1301927e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP html_encode</definition>
        <argsstring>(LISP in)</argsstring>
        <name>html_encode</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="1397" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="1396" bodyend="1444"/>
      </memberdef>
      <memberdef kind="function" id="slibu_8c_1a8f9dc24df43fafaf76c0f17503b12a82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP html_decode</definition>
        <argsstring>(LISP in)</argsstring>
        <name>html_decode</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="1447" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="1446" bodyend="1447"/>
      </memberdef>
      <memberdef kind="function" id="slibu_8c_1ac260d75fdc37021dd7044b15b001d5ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lgets</definition>
        <argsstring>(LISP file, LISP buffn)</argsstring>
        <name>lgets</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>file</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>buffn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="1450" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="1449" bodyend="1466"/>
      </memberdef>
      <memberdef kind="function" id="slibu_8c_1a1205ceba0a163a7c4d4ecda7ddb3f175" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP readline</definition>
        <argsstring>(LISP file)</argsstring>
        <name>readline</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="1469" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="1468" bodyend="1483"/>
      </memberdef>
      <memberdef kind="function" id="slibu_8c_1a1fc5604e584dc24acf5125345d8ea1e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP l_chown</definition>
        <argsstring>(LISP path, LISP uid, LISP gid)</argsstring>
        <name>l_chown</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>path</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>uid</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>gid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="1488" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="1487" bodyend="1493"/>
      </memberdef>
      <memberdef kind="function" id="slibu_8c_1a61d026627c2e2ebb33506eb9d3b99fdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP so_init_name</definition>
        <argsstring>(LISP fname, LISP iname)</argsstring>
        <name>so_init_name</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>fname</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>iname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="1538" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="1537" bodyend="1548"/>
      </memberdef>
      <memberdef kind="function" id="slibu_8c_1a7b289f6f3bcc411805a517390f728e00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP so_ext</definition>
        <argsstring>(LISP fname)</argsstring>
        <name>so_ext</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>fname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="1551" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="1550" bodyend="1566"/>
      </memberdef>
      <memberdef kind="function" id="slibu_8c_1a74ebab709f4004f4384b51c2572e3f10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP load_so</definition>
        <argsstring>(LISP fname, LISP iname)</argsstring>
        <name>load_so</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>fname</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>iname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="1570" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="1568" bodyend="1647"/>
      </memberdef>
      <memberdef kind="function" id="slibu_8c_1ab81f0820a41c05e1d88e8206de8f3431" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP require_so</definition>
        <argsstring>(LISP fname)</argsstring>
        <name>require_so</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>fname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="1650" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="1649" bodyend="1657"/>
      </memberdef>
      <memberdef kind="function" id="slibu_8c_1a30a0d288980deac015a51b2d0932ff9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP siod_lib_l</definition>
        <argsstring>(void)</argsstring>
        <name>siod_lib_l</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="1660" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="1659" bodyend="1660"/>
      </memberdef>
      <memberdef kind="function" id="slibu_8c_1a20a9eb2d8f00dff56fafb519f25d30f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP ccall_catch_1</definition>
        <argsstring>(LISP(*fcn)(void *), void *arg)</argsstring>
        <name>ccall_catch_1</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref>(*)(void *)</type>
          <declname>fcn</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="1664" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="1663" bodyend="1667"/>
      </memberdef>
      <memberdef kind="function" id="slibu_8c_1a6b0c9c2ea45cfd43fc5aa1f2e90fc676" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP ccall_catch</definition>
        <argsstring>(LISP tag, LISP(*fcn)(void *), void *arg)</argsstring>
        <name>ccall_catch</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>tag</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref>(*)(void *)</type>
          <declname>fcn</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="1670" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="1669" bodyend="1679"/>
      </memberdef>
      <memberdef kind="function" id="slibu_8c_1af27c3725115bd05858b0db0c061b355f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP decode_tm</definition>
        <argsstring>(struct tm *t)</argsstring>
        <name>decode_tm</name>
        <param>
          <type>struct tm *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="1682" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="1681" bodyend="1695"/>
      </memberdef>
      <memberdef kind="function" id="slibu_8c_1a2191dbf0850437ec9c2f96398e2a6c0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP symalist</definition>
        <argsstring>(char *arg,...)</argsstring>
        <name>symalist</name>
        <param>
          <type>char *</type>
          <declname>arg</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="1698" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="1697" bodyend="1711"/>
      </memberdef>
      <memberdef kind="function" id="slibu_8c_1ae5724efaed6c45ed1b372703640d07f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void encode_tm</definition>
        <argsstring>(LISP alist, struct tm *t)</argsstring>
        <name>encode_tm</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>alist</declname>
        </param>
        <param>
          <type>struct tm *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="1714" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="1713" bodyend="1737"/>
      </memberdef>
      <memberdef kind="function" id="slibu_8c_1adedc5d646d1bd7ed3279c5824ca2c711" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP llocaltime</definition>
        <argsstring>(LISP value)</argsstring>
        <name>llocaltime</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="1740" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="1739" bodyend="1749"/>
      </memberdef>
      <memberdef kind="function" id="slibu_8c_1a2c8cb6e892e0d8b4c7b822e6407366ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lgmtime</definition>
        <argsstring>(LISP value)</argsstring>
        <name>lgmtime</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="1752" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="1751" bodyend="1761"/>
      </memberdef>
      <memberdef kind="function" id="slibu_8c_1ad337e660381de71da2758b98886ba16c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lmktime</definition>
        <argsstring>(LISP alist)</argsstring>
        <name>lmktime</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>alist</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="1770" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="1769" bodyend="1774"/>
      </memberdef>
      <memberdef kind="function" id="slibu_8c_1aebb447f3405b43a0aef0cecf3705fdf1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lchdir</definition>
        <argsstring>(LISP dir)</argsstring>
        <name>lchdir</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>dir</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="1818" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="1817" bodyend="1843"/>
      </memberdef>
      <memberdef kind="function" id="slibu_8c_1ac396a6c04d40bdaac37abecd08c94071" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP err_large_index</definition>
        <argsstring>(LISP ind)</argsstring>
        <name>err_large_index</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>ind</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="1899" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="1898" bodyend="1899"/>
      </memberdef>
      <memberdef kind="function" id="slibu_8c_1a81baa49b5495c21166be88652593aa57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP datref</definition>
        <argsstring>(LISP dat, LISP ctype, LISP ind)</argsstring>
        <name>datref</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>dat</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>ctype</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>ind</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="1902" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="1901" bodyend="1939"/>
      </memberdef>
      <memberdef kind="function" id="slibu_8c_1a2e7d1a1ef63aa2d5b3a8774e8df7fcad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP sdatref</definition>
        <argsstring>(LISP spec, LISP dat)</argsstring>
        <name>sdatref</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>spec</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>dat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="1942" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="1941" bodyend="1942"/>
      </memberdef>
      <memberdef kind="function" id="slibu_8c_1ab4ebc0f3f1f2bf6fd667c44fa90a5c95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP mkdatref</definition>
        <argsstring>(LISP ctype, LISP ind)</argsstring>
        <name>mkdatref</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>ctype</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>ind</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="1945" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="1944" bodyend="1946"/>
      </memberdef>
      <memberdef kind="function" id="slibu_8c_1ac7fe80db227f1fa98002c9e53343b69d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP datlength</definition>
        <argsstring>(LISP dat, LISP ctype)</argsstring>
        <name>datlength</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>dat</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>ctype</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="1949" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="1948" bodyend="1974"/>
      </memberdef>
      <memberdef kind="function" id="slibu_8c_1a47cab43b84db9709ac518cbe2f4f5b09" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>static LISP cgi_main</definition>
        <argsstring>(LISP flag, LISP result)</argsstring>
        <name>cgi_main</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="1977" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="1976" bodyend="1999"/>
      </memberdef>
      <memberdef kind="function" id="slibu_8c_1a4d7d9a5bd1e81185f972a8a9a5a3e33a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int htqs_arg</definition>
        <argsstring>(char *value)</argsstring>
        <name>htqs_arg</name>
        <param>
          <type>char *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="2003" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="2002" bodyend="2016"/>
      </memberdef>
      <memberdef kind="function" id="slibu_8c_1a90f0378f7cc514acc1d40497ed73a442" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int __stdcall</type>
        <definition>int __stdcall siod_main</definition>
        <argsstring>(int argc, char **argv, char **env)</argsstring>
        <name>siod_main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>env</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="2020" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="2019" bodyend="2078"/>
      </memberdef>
      <memberdef kind="function" id="slibu_8c_1a42db69aac8708e9fe3341724bff3ad8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long position_script</definition>
        <argsstring>(FILE *f, char *buff, size_t bufflen)</argsstring>
        <name>position_script</name>
        <param>
          <type>FILE *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buff</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bufflen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="2083" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="2080" bodyend="2111"/>
      </memberdef>
      <memberdef kind="function" id="slibu_8c_1a2c99e6c0b2e5e619c92dd39803f2fd57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void __stdcall</type>
        <definition>void __stdcall siod_shuffle_args</definition>
        <argsstring>(int *pargc, char ***pargv)</argsstring>
        <name>siod_shuffle_args</name>
        <param>
          <type>int *</type>
          <declname>pargc</declname>
        </param>
        <param>
          <type>char ***</type>
          <declname>pargv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="2130" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="2127" bodyend="2158"/>
      </memberdef>
      <memberdef kind="function" id="slibu_8c_1a3c5cac0c8f69b601926389bceaaea365" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP lposition_script</definition>
        <argsstring>(LISP lfile)</argsstring>
        <name>lposition_script</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>lfile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="2161" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="2160" bodyend="2169"/>
      </memberdef>
      <memberdef kind="function" id="slibu_8c_1a45d4ea90f01e48ab6f9ef639654aaab1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void __stdcall</type>
        <definition>void __stdcall siod_init</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>siod_init</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="2172" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="2171" bodyend="2176"/>
      </memberdef>
      <memberdef kind="function" id="slibu_8c_1af38d1bd5627768630d2f25eee69e62c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void __stdcall</type>
        <definition>void __stdcall init_slibu</definition>
        <argsstring>(void)</argsstring>
        <name>init_slibu</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" line="2179" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c" bodystart="2178" bodyend="2392"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*-*-mode:c-*-*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>DEC-94<sp/>George<sp/>Carrette.<sp/>Additional<sp/>lisp<sp/>util<sp/>subrs,</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/><sp/>many<sp/>of<sp/>them<sp/>depending<sp/>on<sp/>operating<sp/>system<sp/>calls.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/><sp/>Note<sp/>that<sp/>I<sp/>have<sp/>avoided<sp/>more<sp/>than<sp/>one<sp/>nesting<sp/>of<sp/>conditional<sp/>compilation,</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/><sp/>and<sp/>the<sp/>use<sp/>of<sp/>the<sp/>else<sp/>clause,<sp/>in<sp/>hopes<sp/>of<sp/>preserving<sp/>some<sp/>readability.</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/>For<sp/>better<sp/>or<sp/>worse<sp/>I<sp/>avoided<sp/>gnu<sp/>autoconfigure<sp/>because<sp/>it<sp/>was<sp/>complex<sp/>required</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/><sp/>scripts<sp/>nearly<sp/>as<sp/>big<sp/>as<sp/>this<sp/>source<sp/>file.<sp/>Meanwhile<sp/>there<sp/>is<sp/>some<sp/>ANSI<sp/>POSIX</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/><sp/>convergence<sp/>going<sp/>on.</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ctype.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;setjmp.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;signal.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;errno.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdarg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(unix)</highlight></codeline>
<codeline lineno="24"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dirent.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/wait.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;pwd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/stat.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/resource.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;grp.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utime.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/fcntl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="36"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__osf__)<sp/>||<sp/>defined(sun)</highlight></codeline>
<codeline lineno="38"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/mode.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="40"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__osf__)<sp/>||<sp/>defined(SUN5)</highlight></codeline>
<codeline lineno="42"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;fnmatch.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="44"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__osf__)</highlight></codeline>
<codeline lineno="46"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;rld_interface.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="48"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(hpux)</highlight></codeline>
<codeline lineno="50"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;dl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="52"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__osf__)<sp/>||<sp/>defined(sun)<sp/>||<sp/>defined(linux)<sp/>||<sp/>defined(sgi)</highlight></codeline>
<codeline lineno="54"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;dlfcn.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="56"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(sun)</highlight></codeline>
<codeline lineno="58"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;crypt.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/mkdev.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fcntl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="63"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(linux)<sp/>&amp;&amp;<sp/>defined(PPC)</highlight></codeline>
<codeline lineno="65"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>I<sp/>know,<sp/>this<sp/>should<sp/>be<sp/>defined(NEED_CRYPT_H)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;crypt.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="68"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(sgi)</highlight></codeline>
<codeline lineno="70"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="72"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(hpux)</highlight></codeline>
<codeline lineno="74"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PATH_MAX<sp/>MAXPATHLEN</highlight></codeline>
<codeline lineno="75"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="76"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(VMS)</highlight></codeline>
<codeline lineno="78"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;unixlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stat.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ssdef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;descrip.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;lib$routines.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;descrip.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ssdef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iodef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;lnmdef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="88"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32</highlight></codeline>
<codeline lineno="90"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#pragma<sp/>warning(<sp/>disable<sp/>:<sp/>4996<sp/>)</highlight></codeline>
<codeline lineno="91"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;windows.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;io.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/stat.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;process.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;direct.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="98"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;siod.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;siodp.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;md5.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init_slibu_version(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="104"><highlight class="normal">{setvar(cintern(</highlight><highlight class="stringliteral">&quot;*slibu-version*&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>cintern(</highlight><highlight class="stringliteral">&quot;$Id:<sp/>slibu.c,v<sp/>1.5<sp/>2001/02/01<sp/>16:03:29<sp/>gjcarret<sp/>Exp<sp/>gjcarret<sp/>$&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>NIL);}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>sym_channels<sp/>=<sp/>NIL;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>tc_opendir<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ld_library_path_env<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;LD_LIBRARY_PATH&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VMS</highlight></codeline>
<codeline lineno="115"><highlight class="preprocessor"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*strdup(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*in)</highlight></codeline>
<codeline lineno="116"><highlight class="normal">{</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*r;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/>r<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>malloc(strlen(in)+1);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/>strcpy(r,in);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(r);}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="121"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lsystem(<ref refid="structobj" kindref="compound">LISP</ref><sp/>args)</highlight></codeline>
<codeline lineno="123"><highlight class="normal">{</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>retval;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>iflag;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/>iflag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/>retval<sp/>=<sp/>system(get_c_string(string_append(args)));</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/>no_interrupt(iflag);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(retval<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(cons(flocons(retval),llast_c_errmsg(-1)));</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(retval));}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>WIN32</highlight></codeline>
<codeline lineno="134"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lgetuid(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="135"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(getuid()));}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lgetgid(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="138"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(getgid()));}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="140"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>unix</highlight></codeline>
<codeline lineno="142"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lcrypt(<ref refid="structobj" kindref="compound">LISP</ref><sp/>key,<ref refid="structobj" kindref="compound">LISP</ref><sp/>salt)</highlight></codeline>
<codeline lineno="144"><highlight class="normal">{</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*result;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((result<sp/>=<sp/>crypt(get_c_string(key),get_c_string(salt))))</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(strcons(strlen(result),result));</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="151"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(unix)<sp/>||<sp/>defined(WIN32)</highlight></codeline>
<codeline lineno="153"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(WIN32)</highlight></codeline>
<codeline lineno="155"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>getcwd<sp/>_getcwd</highlight></codeline>
<codeline lineno="156"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PATH_MAX<sp/>_MAX_PATH</highlight></codeline>
<codeline lineno="157"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="158"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lgetcwd(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="160"><highlight class="normal">{</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>path[PATH_MAX+1];</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getcwd(path,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(path)))</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(strcons(strlen(path),path));</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(err(</highlight><highlight class="stringliteral">&quot;getcwd&quot;</highlight><highlight class="normal">,llast_c_errmsg(-1)));}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="167"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>unix</highlight></codeline>
<codeline lineno="169"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>ldecode_pwent(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>passwd<sp/>*p)</highlight></codeline>
<codeline lineno="172"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(symalist(</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,strcons(strlen(p-&gt;pw_name),p-&gt;pw_name),</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;passwd&quot;</highlight><highlight class="normal">,strcons(strlen(p-&gt;pw_passwd),p-&gt;pw_passwd),</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;uid&quot;</highlight><highlight class="normal">,flocons(p-&gt;pw_uid),</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;gid&quot;</highlight><highlight class="normal">,flocons(p-&gt;pw_gid),</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;dir&quot;</highlight><highlight class="normal">,strcons(strlen(p-&gt;pw_dir),p-&gt;pw_dir),</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;gecos&quot;</highlight><highlight class="normal">,strcons(strlen(p-&gt;pw_gecos),p-&gt;pw_gecos),</highlight></codeline>
<codeline lineno="179"><highlight class="normal">#</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>defined(__osf__)<sp/>||<sp/>defined(hpux)<sp/>||<sp/>defined(sun)</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;comment&quot;</highlight><highlight class="normal">,strcons(strlen(p-&gt;pw_comment),p-&gt;pw_comment),</highlight></codeline>
<codeline lineno="181"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="182"><highlight class="normal">#</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>defined(hpux)<sp/>||<sp/>defined(sun)</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;age&quot;</highlight><highlight class="normal">,strcons(strlen(p-&gt;pw_age),p-&gt;pw_age),</highlight></codeline>
<codeline lineno="184"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="185"><highlight class="normal">#</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>defined(__osf__)</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;quota&quot;</highlight><highlight class="normal">,flocons(p-&gt;pw_quota),</highlight></codeline>
<codeline lineno="187"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;shell&quot;</highlight><highlight class="normal">,strcons(strlen(p-&gt;pw_shell),p-&gt;pw_shell),</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL));}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*strfield(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<ref refid="structobj" kindref="compound">LISP</ref><sp/>alist)</highlight></codeline>
<codeline lineno="192"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>value,key<sp/>=<sp/>rintern(name);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NULLP(value<sp/>=<sp/>assq(key,alist))</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/>return(&quot;&quot;);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/>return(get_c_string(cdr(value)));}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal">static<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>longfield(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<ref refid="structobj" kindref="compound">LISP</ref><sp/>alist)</highlight></codeline>
<codeline lineno="198"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>value,key<sp/>=<sp/>rintern(name);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NULLP(value<sp/>=<sp/>assq(key,alist))</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/>return(0);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/>return(get_c_long(cdr(value)));}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lencode_pwent(<ref refid="structobj" kindref="compound">LISP</ref><sp/>alist,struct<sp/>passwd<sp/>*p)</highlight></codeline>
<codeline lineno="204"><highlight class="normal">{p-&gt;pw_name<sp/>=<sp/>strfield(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,alist);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/>p-&gt;pw_passwd<sp/>=<sp/>strfield(</highlight><highlight class="stringliteral">&quot;passwd&quot;</highlight><highlight class="normal">,alist);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/>p-&gt;pw_uid<sp/>=<sp/>longfield(</highlight><highlight class="stringliteral">&quot;uid&quot;</highlight><highlight class="normal">,alist);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/>p-&gt;pw_gid<sp/>=<sp/>longfield(</highlight><highlight class="stringliteral">&quot;gid&quot;</highlight><highlight class="normal">,alist);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/>p-&gt;pw_dir<sp/>=<sp/>strfield(</highlight><highlight class="stringliteral">&quot;dir&quot;</highlight><highlight class="normal">,alist);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/>p-&gt;pw_gecos<sp/>=<sp/>strfield(</highlight><highlight class="stringliteral">&quot;gecos&quot;</highlight><highlight class="normal">,alist);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__osf__)<sp/>||<sp/>defined(hpux)<sp/>||<sp/>defined(sun)</highlight></codeline>
<codeline lineno="211"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>p-&gt;pw_comment<sp/>=<sp/>strfield(</highlight><highlight class="stringliteral">&quot;comment&quot;</highlight><highlight class="normal">,alist);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="213"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>defined(hpux)<sp/>||<sp/>defined(sun)</highlight></codeline>
<codeline lineno="214"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>p-&gt;pw_age<sp/>=<sp/>strfield(</highlight><highlight class="stringliteral">&quot;age&quot;</highlight><highlight class="normal">,alist);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="216"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>defined(__osf__)</highlight></codeline>
<codeline lineno="217"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>p-&gt;pw_quota<sp/>=<sp/>longfield(</highlight><highlight class="stringliteral">&quot;quota&quot;</highlight><highlight class="normal">,alist);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="219"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>p-&gt;pw_shell<sp/>=<sp/>strfield(</highlight><highlight class="stringliteral">&quot;shell&quot;</highlight><highlight class="normal">,alist);}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lgetpwuid(<ref refid="structobj" kindref="compound">LISP</ref><sp/>luid)</highlight></codeline>
<codeline lineno="222"><highlight class="normal">{</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iflag;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/>uid_t<sp/>uid;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">passwd<sp/>*p;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>result<sp/>=<sp/>NIL;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/>uid<sp/>=<sp/>get_c_long(luid);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/>iflag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((p<sp/>=<sp/>getpwuid(uid)))</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/>result<sp/>=<sp/>ldecode_pwent(p);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/>no_interrupt(iflag);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lgetpwnam(<ref refid="structobj" kindref="compound">LISP</ref><sp/>nam)</highlight></codeline>
<codeline lineno="234"><highlight class="normal">{</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iflag;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">passwd<sp/>*p;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>result<sp/>=<sp/>NIL;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/>iflag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((p<sp/>=<sp/>getpwnam(get_c_string(nam))))</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/>result<sp/>=<sp/>ldecode_pwent(p);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/>no_interrupt(iflag);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lgetpwent(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="244"><highlight class="normal">{</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iflag;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>result<sp/>=<sp/>NIL;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">passwd<sp/>*p;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/>iflag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((p<sp/>=<sp/>getpwent()))</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/>result<sp/>=<sp/>ldecode_pwent(p);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/>no_interrupt(iflag);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lsetpwent(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="254"><highlight class="normal">{</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iflag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/>setpwent();</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/>no_interrupt(iflag);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lendpwent(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="260"><highlight class="normal">{</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iflag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/>endpwent();</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/>no_interrupt(iflag);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lsetuid(<ref refid="structobj" kindref="compound">LISP</ref><sp/>n)</highlight></codeline>
<codeline lineno="266"><highlight class="normal">{uid_t<sp/>uid;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/>uid<sp/>=<sp/>(uid_t)<sp/>get_c_long(n);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(setuid(uid))</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(err(</highlight><highlight class="stringliteral">&quot;setuid&quot;</highlight><highlight class="normal">,llast_c_errmsg(-1)));</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lseteuid(<ref refid="structobj" kindref="compound">LISP</ref><sp/>n)</highlight></codeline>
<codeline lineno="274"><highlight class="normal">{uid_t<sp/>uid;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/>uid<sp/>=<sp/>(uid_t)<sp/>get_c_long(n);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(seteuid(uid))</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(err(</highlight><highlight class="stringliteral">&quot;seteuid&quot;</highlight><highlight class="normal">,llast_c_errmsg(-1)));</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lgeteuid(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="282"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(geteuid()));}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__osf__)</highlight></codeline>
<codeline lineno="285"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lsetpwfile(<ref refid="structobj" kindref="compound">LISP</ref><sp/>fname)</highlight></codeline>
<codeline lineno="286"><highlight class="normal">{</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iflag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/>setpwfile(get_c_string(fname));</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/>no_interrupt(iflag);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="291"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lputpwent(<ref refid="structobj" kindref="compound">LISP</ref><sp/>alist,<ref refid="structobj" kindref="compound">LISP</ref><sp/>file)</highlight></codeline>
<codeline lineno="293"><highlight class="normal">{</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iflag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>status;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">passwd<sp/>p;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/>lencode_pwent(alist,&amp;p);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/>status<sp/>=<sp/>putpwent(&amp;p,get_c_file(file,NULL));</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/>no_interrupt(iflag);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>laccess_problem(<ref refid="structobj" kindref="compound">LISP</ref><sp/>lfname,<ref refid="structobj" kindref="compound">LISP</ref><sp/>lacc)</highlight></codeline>
<codeline lineno="302"><highlight class="normal">{</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fname<sp/>=<sp/>get_c_string(lfname);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*acc<sp/>=<sp/>get_c_string(lacc),*p;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>amode<sp/>=<sp/>0,iflag<sp/>=<sp/>no_interrupt(1),retval;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(p=acc;*p;++p)</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(*p)</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;r&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>amode<sp/>|=<sp/>R_OK;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;w&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>amode<sp/>|=<sp/>W_OK;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>amode<sp/>|=<sp/>X_OK;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>amode<sp/>|=<sp/>F_OK;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;bad<sp/>access<sp/>mode&quot;</highlight><highlight class="normal">,lacc);}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/>retval<sp/>=<sp/>access(fname,amode);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/>no_interrupt(iflag);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(retval<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(llast_c_errmsg(-1));</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lsymlink(<ref refid="structobj" kindref="compound">LISP</ref><sp/>p1,<ref refid="structobj" kindref="compound">LISP</ref><sp/>p2)</highlight></codeline>
<codeline lineno="329"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>iflag;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/>iflag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(symlink(get_c_string(p1),get_c_string(p2)))</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(err(</highlight><highlight class="stringliteral">&quot;symlink&quot;</highlight><highlight class="normal">,llast_c_errmsg(-1)));</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/>no_interrupt(iflag);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>llink(<ref refid="structobj" kindref="compound">LISP</ref><sp/>p1,<ref refid="structobj" kindref="compound">LISP</ref><sp/>p2)</highlight></codeline>
<codeline lineno="337"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>iflag;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/>iflag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(link(get_c_string(p1),get_c_string(p2)))</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(err(</highlight><highlight class="stringliteral">&quot;link&quot;</highlight><highlight class="normal">,llast_c_errmsg(-1)));</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/>no_interrupt(iflag);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lunlink(<ref refid="structobj" kindref="compound">LISP</ref><sp/>p)</highlight></codeline>
<codeline lineno="345"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>iflag;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/>iflag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlink(get_c_string(p)))</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(err(</highlight><highlight class="stringliteral">&quot;unlink&quot;</highlight><highlight class="normal">,llast_c_errmsg(-1)));</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/>no_interrupt(iflag);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lrmdir(<ref refid="structobj" kindref="compound">LISP</ref><sp/>p)</highlight></codeline>
<codeline lineno="353"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>iflag;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/>iflag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rmdir(get_c_string(p)))</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(err(</highlight><highlight class="stringliteral">&quot;rmdir&quot;</highlight><highlight class="normal">,llast_c_errmsg(-1)));</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/>no_interrupt(iflag);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lmkdir(<ref refid="structobj" kindref="compound">LISP</ref><sp/>p,<ref refid="structobj" kindref="compound">LISP</ref><sp/>m)</highlight></codeline>
<codeline lineno="361"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>iflag;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/>iflag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mkdir(get_c_string(p),get_c_long(m)))</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(err(</highlight><highlight class="stringliteral">&quot;mkdir&quot;</highlight><highlight class="normal">,llast_c_errmsg(-1)));</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/>no_interrupt(iflag);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lreadlink(<ref refid="structobj" kindref="compound">LISP</ref><sp/>p)</highlight></codeline>
<codeline lineno="369"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>iflag;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buff[PATH_MAX+1];</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/>iflag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((size<sp/>=<sp/>readlink(get_c_string(p),buff,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buff)))<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(err(</highlight><highlight class="stringliteral">&quot;readlink&quot;</highlight><highlight class="normal">,llast_c_errmsg(-1)));</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/>no_interrupt(iflag);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(strcons(size,buff));}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lrename(<ref refid="structobj" kindref="compound">LISP</ref><sp/>p1,<ref refid="structobj" kindref="compound">LISP</ref><sp/>p2)</highlight></codeline>
<codeline lineno="379"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>iflag;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/>iflag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rename(get_c_string(p1),get_c_string(p2)))</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(err(</highlight><highlight class="stringliteral">&quot;rename&quot;</highlight><highlight class="normal">,llast_c_errmsg(-1)));</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/>no_interrupt(iflag);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="387"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lrandom(<ref refid="structobj" kindref="compound">LISP</ref><sp/>n)</highlight></codeline>
<codeline lineno="389"><highlight class="normal">{</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(hpux)<sp/>||<sp/>defined(vms)<sp/>||<sp/>defined(sun)<sp/>||<sp/>defined(sgi)<sp/>||<sp/>defined(WIN32)</highlight></codeline>
<codeline lineno="391"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>res<sp/>=<sp/>rand();</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="393"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>defined(__osf__)<sp/>||<sp/>defined(linux)</highlight></codeline>
<codeline lineno="394"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>res<sp/>=<sp/>random();</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="396"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(NNULLP(n)<sp/>?<sp/>res<sp/>%<sp/>get_c_long(n)<sp/>:<sp/>res));}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lsrandom(<ref refid="structobj" kindref="compound">LISP</ref><sp/>n)</highlight></codeline>
<codeline lineno="399"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>seed;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/>seed<sp/>=<sp/>get_c_long(n);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(hpux)<sp/>||<sp/>defined(vms)<sp/>||<sp/>defined(sun)<sp/>||<sp/>defined(sgi)<sp/>||<sp/>defined(WIN32)</highlight></codeline>
<codeline lineno="402"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>srand(seed);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="404"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>defined(__osf__)<sp/>||<sp/>defined(linux)</highlight></codeline>
<codeline lineno="405"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>srandom(seed);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="407"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>unix</highlight></codeline>
<codeline lineno="410"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lfork(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="412"><highlight class="normal">{</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iflag;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/>pid_t<sp/>pid;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/>iflag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/>pid<sp/>=<sp/>fork();</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pid<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/>{no_interrupt(iflag);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pid<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(err(</highlight><highlight class="stringliteral">&quot;fork&quot;</highlight><highlight class="normal">,llast_c_errmsg(-1)));</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/>no_interrupt(iflag);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(pid));}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="425"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**list2char(<ref refid="structobj" kindref="compound">LISP</ref><sp/>*safe,<ref refid="structobj" kindref="compound">LISP</ref><sp/>v)</highlight></codeline>
<codeline lineno="427"><highlight class="normal">{</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**x,*tmp;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>j,n;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>l;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/>n<sp/>=<sp/>get_c_long(llength(v));</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/>*safe<sp/>=<sp/>cons(mallocl(&amp;x,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>*<sp/>(n<sp/>+<sp/>1)),*safe);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(l=v,j=0;j&lt;n;l=cdr(l),++j)</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/>{tmp<sp/>=<sp/>get_c_string(car(l));</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>*safe<sp/>=<sp/>cons(mallocl(&amp;x[j],strlen(tmp)+1),*safe);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>strcpy(x[j],tmp);}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/>x[n]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(x);}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>unix</highlight></codeline>
<codeline lineno="440"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lexec(<ref refid="structobj" kindref="compound">LISP</ref><sp/>path,<ref refid="structobj" kindref="compound">LISP</ref><sp/>args,<ref refid="structobj" kindref="compound">LISP</ref><sp/>env)</highlight></codeline>
<codeline lineno="442"><highlight class="normal">{</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iflag;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv<sp/>=<sp/>NULL,<sp/>**envp<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>gcsafe=NIL;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/>iflag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/>argv<sp/>=<sp/>list2char(&amp;gcsafe,args);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NNULLP(env)</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/>envp<sp/>=<sp/>list2char(&amp;gcsafe,env);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/>if<sp/>(envp)</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/>execve(get_c_string(path),argv,envp);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/>else</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/>execv(get_c_string(path),argv);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/>no_interrupt(iflag);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/>return(err(&quot;exec&quot;,llast_c_errmsg(-1)));}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lnice(<ref refid="structobj" kindref="compound">LISP</ref><sp/>val)</highlight></codeline>
<codeline lineno="457"><highlight class="normal">{</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iflag,n;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/>n<sp/>=<sp/>get_c_long(val);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/>iflag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/>n<sp/>=<sp/>nice(n);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;nice&quot;</highlight><highlight class="normal">,llast_c_errmsg(-1));</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/>no_interrupt(iflag);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(n));}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="467"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>assemble_options(<ref refid="structobj" kindref="compound">LISP</ref><sp/>l,<sp/>...)</highlight></codeline>
<codeline lineno="469"><highlight class="normal">{</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>0,val,noptions,nmask<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>lsym,lp<sp/>=<sp/>NIL;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sym;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/>va_list<sp/>syms;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NULLP(l)<sp/>return(0);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/>noptions<sp/>=<sp/>CONSP(l)<sp/>?<sp/>get_c_long(llength(l))<sp/>:<sp/>-1;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/>va_start(syms,l);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/>while((sym<sp/>=<sp/>va_arg(syms,</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)))</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/>{val<sp/>=<sp/>va_arg(syms,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>lsym<sp/>=<sp/>cintern(sym);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(EQ(l,lsym)<sp/>||<sp/>(CONSP(l)<sp/>&amp;&amp;<sp/>NNULLP(lp<sp/>=<sp/>memq(lsym,l))))</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{result<sp/>|=<sp/>val;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(noptions<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>nmask<sp/>=<sp/>nmask<sp/>|<sp/>(1<sp/>&lt;&lt;<sp/>(noptions<sp/>-<sp/>get_c_long(llength(lp))));</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>noptions<sp/>=<sp/>-2;}}</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/>va_end(syms);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((noptions<sp/>==<sp/>-1)<sp/>||</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>((noptions<sp/>&gt;<sp/>0)<sp/>&amp;&amp;<sp/>(nmask<sp/>!=<sp/>((1<sp/>&lt;&lt;<sp/>noptions)<sp/>-<sp/>1))))</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;contains<sp/>undefined<sp/>options&quot;</highlight><highlight class="normal">,l);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>unix</highlight></codeline>
<codeline lineno="492"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lwait(<ref refid="structobj" kindref="compound">LISP</ref><sp/>lpid,<ref refid="structobj" kindref="compound">LISP</ref><sp/>loptions)</highlight></codeline>
<codeline lineno="494"><highlight class="normal">{pid_t<sp/>pid,ret;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iflag,status<sp/>=<sp/>0,options;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/>pid<sp/>=<sp/>NULLP(lpid)<sp/>?<sp/>-1<sp/>:<sp/>get_c_long(lpid);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/>options<sp/>=<sp/>assemble_options(loptions,</highlight></codeline>
<codeline lineno="498"><highlight class="normal">#ifdef<sp/>WCONTINUED</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;WCONTINUED&quot;</highlight><highlight class="normal">,WCONTINUED,</highlight></codeline>
<codeline lineno="500"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="501"><highlight class="normal">#ifdef<sp/>WNOWAIT</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;WNOWAIT&quot;</highlight><highlight class="normal">,WNOWAIT,</highlight></codeline>
<codeline lineno="503"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;WNOHANG&quot;</highlight><highlight class="normal">,WNOHANG,</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;WUNTRACED&quot;</highlight><highlight class="normal">,WUNTRACED,</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/>iflag<sp/>=<sp/>no_interrupt(1);<sp/></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/>ret<sp/>=<sp/>waitpid(pid,&amp;status,options);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/>no_interrupt(iflag);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(err(</highlight><highlight class="stringliteral">&quot;wait&quot;</highlight><highlight class="normal">,llast_c_errmsg(-1)));</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>should<sp/>do<sp/>more<sp/>decoding<sp/>on<sp/>the<sp/>status<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(cons(flocons(ret),cons(flocons(status),NIL)));}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lkill(<ref refid="structobj" kindref="compound">LISP</ref><sp/>pid,<ref refid="structobj" kindref="compound">LISP</ref><sp/>sig)</highlight></codeline>
<codeline lineno="519"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>iflag;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/>iflag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kill(get_c_long(pid),</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NULLP(sig)<sp/>?<sp/>SIGKILL<sp/>:<sp/>get_c_long(sig)))</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;kill&quot;</highlight><highlight class="normal">,llast_c_errmsg(-1));</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/>no_interrupt(iflag);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="529"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lgetpid(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="531"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(getpid()));}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>unix</highlight></codeline>
<codeline lineno="534"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lgetpgrp(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="535"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(getpgrp()));}</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lsetpgid(<ref refid="structobj" kindref="compound">LISP</ref><sp/>pid,<ref refid="structobj" kindref="compound">LISP</ref><sp/>pgid)</highlight></codeline>
<codeline lineno="538"><highlight class="normal">{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(setpgid(get_c_long(pid),get_c_long(pgid)))</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(err(</highlight><highlight class="stringliteral">&quot;setpgid&quot;</highlight><highlight class="normal">,llast_c_errmsg(-1)));</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lgetgrgid(<ref refid="structobj" kindref="compound">LISP</ref><sp/>n)</highlight></codeline>
<codeline lineno="544"><highlight class="normal">{gid_t<sp/>gid;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">group<sp/>*gr;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>iflag,j;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>result<sp/>=<sp/>NIL;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/>gid<sp/>=<sp/>get_c_long(n);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/>iflag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((gr<sp/>=<sp/>getgrgid(gid)))</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/>{result<sp/>=<sp/>cons(strcons(strlen(gr-&gt;gr_name),gr-&gt;gr_name),result);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;gr-&gt;gr_mem[j];++j)</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>cons(strcons(strlen(gr-&gt;gr_mem[j]),gr-&gt;gr_mem[j]),result);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>nreverse(result);}</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/>no_interrupt(iflag);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);}</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="559"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>WIN32</highlight></codeline>
<codeline lineno="561"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lgetppid(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="562"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(getppid()));}</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="564"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lmemref_byte(<ref refid="structobj" kindref="compound">LISP</ref><sp/>addr)</highlight></codeline>
<codeline lineno="566"><highlight class="normal">{</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>get_c_long(addr);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(*ptr));}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lexit(<ref refid="structobj" kindref="compound">LISP</ref><sp/>val)</highlight></codeline>
<codeline lineno="570"><highlight class="normal">{</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iflag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/>exit(get_c_long(val));</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/>no_interrupt(iflag);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>ltrunc(<ref refid="structobj" kindref="compound">LISP</ref><sp/>x)</highlight></codeline>
<codeline lineno="576"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NFLONUMP(x)<sp/>err(&quot;wta<sp/>to<sp/>trunc&quot;,x);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/>i<sp/>=<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>FLONM(x);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/>return(flocons((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>i));}</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>unix</highlight></codeline>
<codeline lineno="582"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lputenv(<ref refid="structobj" kindref="compound">LISP</ref><sp/>lstr)</highlight></codeline>
<codeline lineno="583"><highlight class="normal">{</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*orig,*cpy;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/>orig<sp/>=<sp/>get_c_string(lstr);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>unix<sp/>putenv<sp/>keeps<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>string<sp/>we<sp/>pass,</highlight></codeline>
<codeline lineno="586"><highlight class="comment"><sp/><sp/><sp/><sp/>therefore<sp/>we<sp/>must<sp/>make<sp/>a<sp/>fresh<sp/>copy,<sp/>which<sp/>is<sp/>memory<sp/>leaky.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/>cpy<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>must_malloc(strlen(orig)+1);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/>strcpy(cpy,orig);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(putenv(cpy))</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(err(</highlight><highlight class="stringliteral">&quot;putenv&quot;</highlight><highlight class="normal">,llast_c_errmsg(-1)));</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="594"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><ref refid="struct_m_d5___c_t_x" kindref="compound">MD5_CTX</ref><sp/>*<sp/>get_md5_ctx(<ref refid="structobj" kindref="compound">LISP</ref><sp/>a)</highlight></codeline>
<codeline lineno="596"><highlight class="normal">{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TYPEP(a,tc_byte_array)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>(a-&gt;storage_as.string.dim<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_m_d5___c_t_x" kindref="compound">MD5_CTX</ref>)))</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">((<ref refid="struct_m_d5___c_t_x" kindref="compound">MD5_CTX</ref><sp/>*)a-&gt;storage_as.string.data);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/>{err(</highlight><highlight class="stringliteral">&quot;not<sp/>an<sp/>MD5_CTX<sp/>array&quot;</highlight><highlight class="normal">,a);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NULL);}}</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>md5_init(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="604"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>a<sp/>=<sp/>arcons(tc_byte_array,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_m_d5___c_t_x" kindref="compound">MD5_CTX</ref>),1);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/>MD5Init(get_md5_ctx(a));</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(a);}</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>md5_update_from_file(<ref refid="struct_m_d5___c_t_x" kindref="compound">MD5_CTX</ref><sp/>*ctx,FILE<sp/>*f,</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buff,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>dim)</highlight></codeline>
<codeline lineno="609"><highlight class="normal">{</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">((len<sp/>=<sp/>fread(buff,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buff[0]),dim,f)))</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/>MD5Update(ctx,buff,len);}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>md5_update(<ref refid="structobj" kindref="compound">LISP</ref><sp/>ctx,<ref refid="structobj" kindref="compound">LISP</ref><sp/>str,<ref refid="structobj" kindref="compound">LISP</ref><sp/>len)</highlight></codeline>
<codeline lineno="614"><highlight class="normal">{</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buffer;<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>dim,n;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/>buffer<sp/>=<sp/>get_c_string_dim(str,&amp;dim);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>TYPEP(len,tc_c_file)</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/>{md5_update_from_file(get_md5_ctx(ctx),<sp/>get_c_file(len,NULL),</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)buffer,dim);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NULLP(len)</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/>n<sp/>=<sp/>dim;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/>else</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/>{n<sp/>=<sp/>get_c_long(len);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((n<sp/>&lt;<sp/>0)<sp/>||<sp/>(n<sp/>&gt;<sp/>dim))<sp/>err(</highlight><highlight class="stringliteral">&quot;invalid<sp/>length<sp/>for<sp/>string&quot;</highlight><highlight class="normal">,len);}</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/>MD5Update(get_md5_ctx(ctx),(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)buffer,n);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>md5_final(<ref refid="structobj" kindref="compound">LISP</ref><sp/>ctx)</highlight></codeline>
<codeline lineno="629"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>result<sp/>=<sp/>arcons(tc_byte_array,16,0);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/>MD5Final((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>result-&gt;storage_as.string.data,</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>get_md5_ctx(ctx));</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);}</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__osf__)<sp/>||<sp/>defined(sun)</highlight></codeline>
<codeline lineno="635"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handle_sigxcpu(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sig)</highlight></codeline>
<codeline lineno="637"><highlight class="normal">{</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">rlimit<sp/>x;</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getrlimit(RLIMIT_CPU,&amp;x))</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/>{errjmp_ok<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;getrlimit&quot;</highlight><highlight class="normal">,llast_c_errmsg(-1));}</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x.rlim_cur<sp/>&gt;=<sp/>x.rlim_max)</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/>{errjmp_ok<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;hard<sp/>cpu<sp/>limit<sp/>exceded&quot;</highlight><highlight class="normal">,NIL);}</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nointerrupt<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/>interrupt_differed<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;cpu<sp/>limit<sp/>exceded&quot;</highlight><highlight class="normal">,NIL);}</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>cpu_usage_limits(<ref refid="structobj" kindref="compound">LISP</ref><sp/>soft,<ref refid="structobj" kindref="compound">LISP</ref><sp/>hard)</highlight></codeline>
<codeline lineno="650"><highlight class="normal">{</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">rlimit<sp/>x;</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NULLP(soft)<sp/>&amp;&amp;<sp/>NULLP(hard))</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getrlimit(RLIMIT_CPU,&amp;x))</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(err(</highlight><highlight class="stringliteral">&quot;getrlimit&quot;</highlight><highlight class="normal">,llast_c_errmsg(-1)));</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(listn(2,flocons(x.rlim_cur),flocons(x.rlim_max)));}</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/>{x.rlim_cur<sp/>=<sp/>get_c_long(soft);</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/>x.rlim_max<sp/>=<sp/>get_c_long(hard);</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/>signal(SIGXCPU,handle_sigxcpu);</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(setrlimit(RLIMIT_CPU,&amp;x))</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(err(</highlight><highlight class="stringliteral">&quot;setrlimit&quot;</highlight><highlight class="normal">,llast_c_errmsg(-1)));</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}}</highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="666"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(unix)</highlight></codeline>
<codeline lineno="668"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>handle_sigalrm_flag<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handle_sigalrm(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sig)</highlight></codeline>
<codeline lineno="672"><highlight class="normal">{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nointerrupt<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(handle_sigalrm_flag)</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>we<sp/>were<sp/>inside<sp/>a<sp/>system<sp/>call<sp/>then<sp/>it<sp/>would<sp/>be</highlight></codeline>
<codeline lineno="675"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>interrupted<sp/>even<sp/>if<sp/>we<sp/>take<sp/>no<sp/>action<sp/>here.</highlight></codeline>
<codeline lineno="676"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>But<sp/>sometimes<sp/>we<sp/>want<sp/>to<sp/>be<sp/>really<sp/>sure<sp/>of<sp/>signalling</highlight></codeline>
<codeline lineno="677"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>an<sp/>error,<sp/>hence<sp/>the<sp/>flag.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/>interrupt_differed<sp/>=<sp/>1;}</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;alarm<sp/>signal&quot;</highlight><highlight class="normal">,NIL);}</highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lalarm(<ref refid="structobj" kindref="compound">LISP</ref><sp/>seconds,<ref refid="structobj" kindref="compound">LISP</ref><sp/>flag)</highlight></codeline>
<codeline lineno="683"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>iflag;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>retval;</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/>iflag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/>signal(SIGALRM,handle_sigalrm);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/>handle_sigalrm_flag<sp/>=<sp/>NULLP(flag)<sp/>?<sp/>0<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/>retval<sp/>=<sp/>alarm(get_c_long(seconds));</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/>no_interrupt(iflag);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(retval));}</highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="693"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__osf__)<sp/>||<sp/>defined(SUN5)</highlight></codeline>
<codeline lineno="696"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TV_FRAC(x)<sp/>(((double)x.tv_usec)<sp/>*<sp/>1.0e-6)</highlight></codeline>
<codeline lineno="698"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>SUN5</highlight></codeline>
<codeline lineno="700"><highlight class="preprocessor"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getrusage(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>rusage<sp/>*);</highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="702"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>current_resource_usage(<ref refid="structobj" kindref="compound">LISP</ref><sp/>kind)</highlight></codeline>
<codeline lineno="704"><highlight class="normal">{</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">rusage<sp/>u;</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>code;</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NULLP(kind)<sp/>||<sp/>EQ(cintern(</highlight><highlight class="stringliteral">&quot;SELF&quot;</highlight><highlight class="normal">),kind))</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/>code<sp/>=<sp/>RUSAGE_SELF;</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>EQ(cintern(</highlight><highlight class="stringliteral">&quot;CHILDREN&quot;</highlight><highlight class="normal">),kind)</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/>code<sp/>=<sp/>RUSAGE_CHILDREN;</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/>else</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/>return(err(&quot;unknown<sp/>rusage&quot;,kind));</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/>if<sp/>(getrusage(code,&amp;u))</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/>return(err(&quot;getrusage&quot;,llast_c_errmsg(-1)));</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/>return(symalist(&quot;utime&quot;,flocons(((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)u.ru_utime.tv_sec)<sp/>+</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TV_FRAC(u.ru_utime)),</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;stime&quot;,flocons(((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)u.ru_stime.tv_sec)<sp/>+</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TV_FRAC(u.ru_stime)),</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;maxrss&quot;,flocons(u.ru_maxrss),</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;ixrss&quot;,flocons(u.ru_ixrss),</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;idrss&quot;,flocons(u.ru_idrss),</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;isrss&quot;,flocons(u.ru_isrss),</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;minflt&quot;,flocons(u.ru_minflt),</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;majflt&quot;,flocons(u.ru_majflt),</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;nswap&quot;,flocons(u.ru_nswap),</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;inblock&quot;,flocons(u.ru_inblock),</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;oublock&quot;,flocons(u.ru_oublock),</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;msgsnd&quot;,flocons(u.ru_msgsnd),</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;msgrcv&quot;,flocons(u.ru_msgrcv),</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;nsignals&quot;,flocons(u.ru_nsignals),</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;nvcsw&quot;,flocons(u.ru_nvcsw),</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;nivcsw&quot;,flocons(u.ru_nivcsw),</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL));}</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="735"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>unix</highlight></codeline>
<codeline lineno="737"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>l_opendir(<ref refid="structobj" kindref="compound">LISP</ref><sp/>name)</highlight></codeline>
<codeline lineno="739"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>iflag;</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>value;</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/>DIR<sp/>*d;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/>iflag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/>value<sp/>=<sp/>cons(NIL,NIL);</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(d<sp/>=<sp/>opendir(get_c_string(name))))</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(err(</highlight><highlight class="stringliteral">&quot;opendir&quot;</highlight><highlight class="normal">,llast_c_errmsg(-1)));</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/>value-&gt;type<sp/>=<sp/>tc_opendir;</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/>CAR(value)<sp/>=<sp/>(<ref refid="structobj" kindref="compound">LISP</ref>)<sp/>d;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/>no_interrupt(iflag);</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(value);}</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal">DIR<sp/>*get_opendir(<ref refid="structobj" kindref="compound">LISP</ref><sp/>v,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>oflag)</highlight></codeline>
<codeline lineno="752"><highlight class="normal">{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NTYPEP(v,tc_opendir)<sp/>err(&quot;not<sp/>an<sp/>opendir&quot;,v);</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/>if<sp/>NULLP(CAR(v))</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oflag)<sp/>err(</highlight><highlight class="stringliteral">&quot;opendir<sp/>not<sp/>open&quot;</highlight><highlight class="normal">,v);</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NULL);}</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">((DIR<sp/>*)CAR(v));}</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>l_closedir(<ref refid="structobj" kindref="compound">LISP</ref><sp/>v)</highlight></codeline>
<codeline lineno="759"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>iflag,old_errno;</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/>DIR<sp/>*d;</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/>iflag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/>d<sp/>=<sp/>get_opendir(v,1);</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/>old_errno<sp/>=<sp/>errno;</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/>CAR(v)<sp/>=<sp/>NIL;</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(closedir(d))</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(err(</highlight><highlight class="stringliteral">&quot;closedir&quot;</highlight><highlight class="normal">,llast_c_errmsg(old_errno)));</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/>no_interrupt(iflag);</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/>opendir_gc_free(<ref refid="structobj" kindref="compound">LISP</ref><sp/>v)</highlight></codeline>
<codeline lineno="771"><highlight class="normal">{DIR<sp/>*d;</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((d<sp/>=<sp/>get_opendir(v,0)))</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/>closedir(d);}</highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>l_readdir(<ref refid="structobj" kindref="compound">LISP</ref><sp/>v)</highlight></codeline>
<codeline lineno="776"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>iflag,namlen;</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/>DIR<sp/>*d;</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">dirent<sp/>*r;</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/>d<sp/>=<sp/>get_opendir(v,1);</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/>iflag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/>r<sp/>=<sp/>readdir(d);</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/>no_interrupt(iflag);</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!r)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);</highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(sun)<sp/>||<sp/>defined(sgi)<sp/>||<sp/>defined(linux)</highlight></codeline>
<codeline lineno="785"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>namlen<sp/>=<sp/>safe_strlen(r-&gt;d_name,r-&gt;d_reclen);</highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="787"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>namlen<sp/>=<sp/>r-&gt;d_namlen;</highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="789"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(strcons(namlen,r-&gt;d_name));}</highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>opendir_prin1(<ref refid="structobj" kindref="compound">LISP</ref><sp/>ptr,</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgen__printio" kindref="compound">gen_printio</ref><sp/>*f)</highlight></codeline>
<codeline lineno="792"><highlight class="normal">{</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[256];</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/>sprintf(buffer,</highlight><highlight class="stringliteral">&quot;#&lt;OPENDIR<sp/>%p&gt;&quot;</highlight><highlight class="normal">,get_opendir(ptr,0));</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/>gput_st(f,buffer);}</highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="797"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32</highlight></codeline>
<codeline lineno="799"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>count;</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/>HANDLE<sp/>h;</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/>WIN32_FIND_DATA<sp/>s;}<sp/>DIR;</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>llast_win32_errmsg(DWORD<sp/>status)</highlight></codeline>
<codeline lineno="806"><highlight class="normal">{DWORD<sp/>len,msgcode;</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[256];</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/>msgcode<sp/>=<sp/>(status<sp/>==<sp/>0)<sp/>?<sp/>GetLastError()<sp/>:<sp/>status;</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/>len<sp/>=<sp/>FormatMessage(FORMAT_MESSAGE_FROM_SYSTEM<sp/>|</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FORMAT_MESSAGE_IGNORE_INSERTS<sp/>|</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FORMAT_MESSAGE_MAX_WIDTH_MASK,</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msgcode,</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/></highlight><highlight class="comment">/*<sp/>what<sp/>language?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer,</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buffer),</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL);</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len)</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(strcons(len,buffer));</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(msgcode));}</highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>l_opendir(<ref refid="structobj" kindref="compound">LISP</ref><sp/>name)</highlight></codeline>
<codeline lineno="824"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>iflag;</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>value;</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/>DIR<sp/>*d;</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/>iflag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/>value<sp/>=<sp/>cons(NIL,NIL);</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/>d<sp/>=<sp/>(DIR<sp/>*)<sp/>must_malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(DIR));</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/>d-&gt;h<sp/>=<sp/>INVALID_HANDLE_VALUE;</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/>value-&gt;type<sp/>=<sp/>(short)<sp/>tc_opendir;</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/>d-&gt;count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/>CAR(value)<sp/>=<sp/>(<ref refid="structobj" kindref="compound">LISP</ref>)<sp/>d;</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((d-&gt;h<sp/>=<sp/>FindFirstFile(get_c_string(name),&amp;d-&gt;s))<sp/>==<sp/>INVALID_HANDLE_VALUE)</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(err(</highlight><highlight class="stringliteral">&quot;FindFirstFile&quot;</highlight><highlight class="normal">,llast_win32_errmsg(0)));</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/>no_interrupt(iflag);</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(value);}</highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal">DIR<sp/>*get_opendir(<ref refid="structobj" kindref="compound">LISP</ref><sp/>v,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>oflag)</highlight></codeline>
<codeline lineno="840"><highlight class="normal">{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NTYPEP(v,tc_opendir)<sp/>err(&quot;not<sp/>an<sp/>opendir&quot;,v);</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/>if<sp/>NULLP(CAR(v))</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oflag)<sp/>err(</highlight><highlight class="stringliteral">&quot;opendir<sp/>not<sp/>open&quot;</highlight><highlight class="normal">,v);</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NULL);}</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">((DIR<sp/>*)CAR(v));}</highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>l_closedir(<ref refid="structobj" kindref="compound">LISP</ref><sp/>v)</highlight></codeline>
<codeline lineno="847"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>iflag;</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/>DIR<sp/>*d;</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/>HANDLE<sp/>h;</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/>iflag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/>d<sp/>=<sp/>get_opendir(v,1);</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/>CAR(v)<sp/>=<sp/>NIL;</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/>h<sp/>=<sp/>d-&gt;h;</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/>free(d);</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((h<sp/>!=<sp/>INVALID_HANDLE_VALUE)<sp/>&amp;&amp;<sp/>!FindClose(h))</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(err(</highlight><highlight class="stringliteral">&quot;closedir&quot;</highlight><highlight class="normal">,llast_win32_errmsg(0)));</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/>no_interrupt(iflag);</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/>opendir_gc_free(<ref refid="structobj" kindref="compound">LISP</ref><sp/>v)</highlight></codeline>
<codeline lineno="861"><highlight class="normal">{DIR<sp/>*d;</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((d<sp/>=<sp/>get_opendir(v,0)))</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/>{FindClose(d-&gt;h);</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/>free(d);</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/>CAR(v)<sp/>=<sp/>NIL;}}</highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>l_readdir(<ref refid="structobj" kindref="compound">LISP</ref><sp/>v)</highlight></codeline>
<codeline lineno="868"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>iflag;</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/>DIR<sp/>*d;</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/>d<sp/>=<sp/>get_opendir(v,1);</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/>iflag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d-&gt;count<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!FindNextFile(d-&gt;h,&amp;d-&gt;s))</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GetLastError()<sp/>==<sp/>ERROR_NO_MORE_FILES)</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{no_interrupt(1);</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/>++d-&gt;count;</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/>no_interrupt(iflag);</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(strcons(-1,d-&gt;s.cFileName));}</highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>opendir_prin1(<ref refid="structobj" kindref="compound">LISP</ref><sp/>ptr,</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgen__printio" kindref="compound">gen_printio</ref><sp/>*f)</highlight></codeline>
<codeline lineno="882"><highlight class="normal">{</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[256];</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/>sprintf(buffer,</highlight><highlight class="stringliteral">&quot;#&lt;OPENDIR<sp/>%p&gt;&quot;</highlight><highlight class="normal">,get_opendir(ptr,0));</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/>gput_st(f,buffer);}</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="887"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>file_times(<ref refid="structobj" kindref="compound">LISP</ref><sp/>fname)</highlight></codeline>
<codeline lineno="889"><highlight class="normal">{</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">stat<sp/>st;</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iflag,ret;</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/>iflag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/>ret<sp/>=<sp/>stat(get_c_string(fname),&amp;st);</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/>no_interrupt(iflag);</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret)</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(cons(flocons(st.st_ctime),</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cons(flocons(st.st_mtime),NIL)));}</highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(unix)<sp/>||<sp/>defined(WIN32)</highlight></codeline>
<codeline lineno="901"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(unix)</highlight></codeline>
<codeline lineno="903"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>decode_st_moden(mode_t<sp/>mode)</highlight></codeline>
<codeline lineno="904"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>ret<sp/>=<sp/>NIL;</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode<sp/>&amp;<sp/>S_ISUID)<sp/>ret<sp/>=<sp/>cons(cintern(</highlight><highlight class="stringliteral">&quot;SUID&quot;</highlight><highlight class="normal">),ret);</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode<sp/>&amp;<sp/>S_ISGID)<sp/>ret<sp/>=<sp/>cons(cintern(</highlight><highlight class="stringliteral">&quot;SGID&quot;</highlight><highlight class="normal">),ret);</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode<sp/>&amp;<sp/>S_IRUSR)<sp/>ret<sp/>=<sp/>cons(cintern(</highlight><highlight class="stringliteral">&quot;RUSR&quot;</highlight><highlight class="normal">),ret);</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode<sp/>&amp;<sp/>S_IWUSR)<sp/>ret<sp/>=<sp/>cons(cintern(</highlight><highlight class="stringliteral">&quot;WUSR&quot;</highlight><highlight class="normal">),ret);</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode<sp/>&amp;<sp/>S_IXUSR)<sp/>ret<sp/>=<sp/>cons(cintern(</highlight><highlight class="stringliteral">&quot;XUSR&quot;</highlight><highlight class="normal">),ret);</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode<sp/>&amp;<sp/>S_IRGRP)<sp/>ret<sp/>=<sp/>cons(cintern(</highlight><highlight class="stringliteral">&quot;RGRP&quot;</highlight><highlight class="normal">),ret);</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode<sp/>&amp;<sp/>S_IWGRP)<sp/>ret<sp/>=<sp/>cons(cintern(</highlight><highlight class="stringliteral">&quot;WGRP&quot;</highlight><highlight class="normal">),ret);</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode<sp/>&amp;<sp/>S_IXGRP)<sp/>ret<sp/>=<sp/>cons(cintern(</highlight><highlight class="stringliteral">&quot;XGRP&quot;</highlight><highlight class="normal">),ret);</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode<sp/>&amp;<sp/>S_IROTH)<sp/>ret<sp/>=<sp/>cons(cintern(</highlight><highlight class="stringliteral">&quot;ROTH&quot;</highlight><highlight class="normal">),ret);</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode<sp/>&amp;<sp/>S_IWOTH)<sp/>ret<sp/>=<sp/>cons(cintern(</highlight><highlight class="stringliteral">&quot;WOTH&quot;</highlight><highlight class="normal">),ret);</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode<sp/>&amp;<sp/>S_IXOTH)<sp/>ret<sp/>=<sp/>cons(cintern(</highlight><highlight class="stringliteral">&quot;XOTH&quot;</highlight><highlight class="normal">),ret);</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(S_ISFIFO(mode))<sp/>ret<sp/>=<sp/>cons(cintern(</highlight><highlight class="stringliteral">&quot;FIFO&quot;</highlight><highlight class="normal">),ret);</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(S_ISDIR(mode))<sp/>ret<sp/>=<sp/>cons(cintern(</highlight><highlight class="stringliteral">&quot;DIR&quot;</highlight><highlight class="normal">),ret);</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(S_ISCHR(mode))<sp/>ret<sp/>=<sp/>cons(cintern(</highlight><highlight class="stringliteral">&quot;CHR&quot;</highlight><highlight class="normal">),ret);</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(S_ISBLK(mode))<sp/>ret<sp/>=<sp/>cons(cintern(</highlight><highlight class="stringliteral">&quot;BLK&quot;</highlight><highlight class="normal">),ret);</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(S_ISREG(mode))<sp/>ret<sp/>=<sp/>cons(cintern(</highlight><highlight class="stringliteral">&quot;REG&quot;</highlight><highlight class="normal">),ret);</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(S_ISLNK(mode))<sp/>ret<sp/>=<sp/>cons(cintern(</highlight><highlight class="stringliteral">&quot;LNK&quot;</highlight><highlight class="normal">),ret);</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(S_ISSOCK(mode))<sp/>ret<sp/>=<sp/>cons(cintern(</highlight><highlight class="stringliteral">&quot;SOCK&quot;</highlight><highlight class="normal">),ret);</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(ret);}</highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>encode_st_mode(<ref refid="structobj" kindref="compound">LISP</ref><sp/>l)</highlight></codeline>
<codeline lineno="926"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(assemble_options(l,</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;SUID&quot;</highlight><highlight class="normal">,S_ISUID,</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;SGID&quot;</highlight><highlight class="normal">,S_ISGID,</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;RUSR&quot;</highlight><highlight class="normal">,S_IRUSR,</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;WUSR&quot;</highlight><highlight class="normal">,S_IWUSR,</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;XUSR&quot;</highlight><highlight class="normal">,S_IXUSR,</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;RGRP&quot;</highlight><highlight class="normal">,S_IRGRP,</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;WGRP&quot;</highlight><highlight class="normal">,S_IWGRP,</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;XGRP&quot;</highlight><highlight class="normal">,S_IXGRP,</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ROTH&quot;</highlight><highlight class="normal">,S_IROTH,</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;WOTH&quot;</highlight><highlight class="normal">,S_IWOTH,</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;XOTH&quot;</highlight><highlight class="normal">,S_IXOTH,</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL)));}</highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="940"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32</highlight></codeline>
<codeline lineno="942"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>decode_st_moden(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mode)</highlight></codeline>
<codeline lineno="944"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>ret<sp/>=<sp/>NIL;</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode<sp/>&amp;<sp/>_S_IREAD)<sp/>ret<sp/>=<sp/>cons(cintern(</highlight><highlight class="stringliteral">&quot;RUSR&quot;</highlight><highlight class="normal">),ret);</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode<sp/>&amp;<sp/>_S_IWRITE)<sp/>ret<sp/>=<sp/>cons(cintern(</highlight><highlight class="stringliteral">&quot;WUSR&quot;</highlight><highlight class="normal">),ret);</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode<sp/>&amp;<sp/>_S_IEXEC)<sp/>ret<sp/>=<sp/>cons(cintern(</highlight><highlight class="stringliteral">&quot;XUSR&quot;</highlight><highlight class="normal">),ret);</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode<sp/>&amp;<sp/>_S_IFDIR)<sp/>ret<sp/>=<sp/>cons(cintern(</highlight><highlight class="stringliteral">&quot;DIR&quot;</highlight><highlight class="normal">),ret);</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode<sp/>&amp;<sp/>_S_IFCHR)<sp/>ret<sp/>=<sp/>cons(cintern(</highlight><highlight class="stringliteral">&quot;CHR&quot;</highlight><highlight class="normal">),ret);</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode<sp/>&amp;<sp/>_S_IFREG)<sp/>ret<sp/>=<sp/>cons(cintern(</highlight><highlight class="stringliteral">&quot;REG&quot;</highlight><highlight class="normal">),ret);</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(ret);}</highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>encode_st_mode(<ref refid="structobj" kindref="compound">LISP</ref><sp/>l)</highlight></codeline>
<codeline lineno="954"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(assemble_options(l,</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;RUSR&quot;</highlight><highlight class="normal">,_S_IREAD,</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;WUSR&quot;</highlight><highlight class="normal">,_S_IWRITE,</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;XUSR&quot;</highlight><highlight class="normal">,_S_IEXEC,</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL)));}</highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="960"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>decode_st_mode(<ref refid="structobj" kindref="compound">LISP</ref><sp/>value)</highlight></codeline>
<codeline lineno="962"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(decode_st_moden(get_c_long(value)));}</highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>decode_stat(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>stat<sp/>*s)</highlight></codeline>
<codeline lineno="965"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(symalist(</highlight><highlight class="stringliteral">&quot;dev&quot;</highlight><highlight class="normal">,flocons(s-&gt;st_dev),</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ino&quot;</highlight><highlight class="normal">,flocons(s-&gt;st_ino),</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;mode&quot;</highlight><highlight class="normal">,decode_st_moden(s-&gt;st_mode),</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;nlink&quot;</highlight><highlight class="normal">,flocons(s-&gt;st_nlink),</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;uid&quot;</highlight><highlight class="normal">,flocons(s-&gt;st_uid),</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;gid&quot;</highlight><highlight class="normal">,flocons(s-&gt;st_gid),</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;rdev&quot;</highlight><highlight class="normal">,flocons(s-&gt;st_rdev),</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;size&quot;</highlight><highlight class="normal">,flocons(s-&gt;st_size),</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;atime&quot;</highlight><highlight class="normal">,flocons(s-&gt;st_atime),</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;mtime&quot;</highlight><highlight class="normal">,flocons(s-&gt;st_mtime),</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ctime&quot;</highlight><highlight class="normal">,flocons(s-&gt;st_ctime),</highlight></codeline>
<codeline lineno="976"><highlight class="normal">#</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>defined(unix)</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;blksize&quot;</highlight><highlight class="normal">,flocons(s-&gt;st_blksize),</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;blocks&quot;</highlight><highlight class="normal">,flocons(s-&gt;st_blocks),</highlight></codeline>
<codeline lineno="979"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="980"><highlight class="normal">#</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>defined(__osf__)</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;flags&quot;</highlight><highlight class="normal">,flocons(s-&gt;st_flags),</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;gen&quot;</highlight><highlight class="normal">,flocons(s-&gt;st_gen),</highlight></codeline>
<codeline lineno="983"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL));}</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>g_stat(<ref refid="structobj" kindref="compound">LISP</ref><sp/>fname,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*fcn)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>stat<sp/>*))</highlight></codeline>
<codeline lineno="988"><highlight class="normal">{</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">stat<sp/>st;</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iflag,ret;</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/>iflag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/>memset(&amp;st,0,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>stat));</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/>ret<sp/>=<sp/>(*fcn)(get_c_string(fname),&amp;st);</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/>no_interrupt(iflag);</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret)</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(decode_stat(&amp;st));}</highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>l_stat(<ref refid="structobj" kindref="compound">LISP</ref><sp/>fname)</highlight></codeline>
<codeline lineno="1000"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(g_stat(fname,stat));}</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>l_fstat(<ref refid="structobj" kindref="compound">LISP</ref><sp/>f)</highlight></codeline>
<codeline lineno="1003"><highlight class="normal">{</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">stat<sp/>st;</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iflag,ret;</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/>iflag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/>ret<sp/>=<sp/>fstat(fileno(get_c_file(f,NULL)),&amp;st);</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/>no_interrupt(iflag);</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret)</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(decode_stat(&amp;st));}</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>unix</highlight></codeline>
<codeline lineno="1014"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>l_lstat(<ref refid="structobj" kindref="compound">LISP</ref><sp/>fname)</highlight></codeline>
<codeline lineno="1015"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(g_stat(fname,lstat));}</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1017"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__osf__)<sp/>||<sp/>defined(SUN5)</highlight></codeline>
<codeline lineno="1019"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>l_fnmatch(<ref refid="structobj" kindref="compound">LISP</ref><sp/>pat,<ref refid="structobj" kindref="compound">LISP</ref><sp/>str,<ref refid="structobj" kindref="compound">LISP</ref><sp/>flgs)</highlight></codeline>
<codeline lineno="1021"><highlight class="normal">{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fnmatch(get_c_string(pat),</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_c_string(str),</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0))</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(a_true_value());}</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1029"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(unix)<sp/>||<sp/>defined(WIN32)</highlight></codeline>
<codeline lineno="1031"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lchmod(<ref refid="structobj" kindref="compound">LISP</ref><sp/>path,<ref refid="structobj" kindref="compound">LISP</ref><sp/>mode)</highlight></codeline>
<codeline lineno="1033"><highlight class="normal">{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(chmod(get_c_string(path),get_c_long(mode)))</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(err(</highlight><highlight class="stringliteral">&quot;chmod&quot;</highlight><highlight class="normal">,llast_c_errmsg(-1)));</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1039"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>unix</highlight></codeline>
<codeline lineno="1042"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lutime(<ref refid="structobj" kindref="compound">LISP</ref><sp/>fname,<ref refid="structobj" kindref="compound">LISP</ref><sp/>mod,<ref refid="structobj" kindref="compound">LISP</ref><sp/>ac)</highlight></codeline>
<codeline lineno="1044"><highlight class="normal">{</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">utimbuf<sp/>x;</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/>x.modtime<sp/>=<sp/>get_c_long(mod);</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/>x.actime<sp/>=<sp/>NNULLP(ac)<sp/>?<sp/>get_c_long(ac)<sp/>:<sp/>time(NULL);</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(utime(get_c_string(fname),<sp/>&amp;x))</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(err(</highlight><highlight class="stringliteral">&quot;utime&quot;</highlight><highlight class="normal">,llast_c_errmsg(-1)));</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lfchmod(<ref refid="structobj" kindref="compound">LISP</ref><sp/>file,<ref refid="structobj" kindref="compound">LISP</ref><sp/>mode)</highlight></codeline>
<codeline lineno="1054"><highlight class="normal">{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fchmod(fileno(get_c_file(file,NULL)),get_c_long(mode)))</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(err(</highlight><highlight class="stringliteral">&quot;fchmod&quot;</highlight><highlight class="normal">,llast_c_errmsg(-1)));</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>encode_open_flags(<ref refid="structobj" kindref="compound">LISP</ref><sp/>l)</highlight></codeline>
<codeline lineno="1060"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(assemble_options(l,</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;NONBLOCK&quot;</highlight><highlight class="normal">,O_NONBLOCK,</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;APPEND&quot;</highlight><highlight class="normal">,O_APPEND,</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;RDONLY&quot;</highlight><highlight class="normal">,O_RDONLY,</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;WRONLY&quot;</highlight><highlight class="normal">,O_WRONLY,</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;RDWR&quot;</highlight><highlight class="normal">,O_RDWR,</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;CREAT&quot;</highlight><highlight class="normal">,O_CREAT,</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;TRUNC&quot;</highlight><highlight class="normal">,O_TRUNC,</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;EXCL&quot;</highlight><highlight class="normal">,O_EXCL,</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL)));}</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>get_fd(<ref refid="structobj" kindref="compound">LISP</ref><sp/>ptr)</highlight></codeline>
<codeline lineno="1072"><highlight class="normal">{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>TYPEP(ptr,tc_c_file)</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/>return(fileno(get_c_file(ptr,NULL)));</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/>else</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/>return(get_c_long(ptr));}</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>gsetlk(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>op,<ref refid="structobj" kindref="compound">LISP</ref><sp/>lfd,<ref refid="structobj" kindref="compound">LISP</ref><sp/>ltype,<ref refid="structobj" kindref="compound">LISP</ref><sp/>whence,<ref refid="structobj" kindref="compound">LISP</ref><sp/>start,<ref refid="structobj" kindref="compound">LISP</ref><sp/>len)</highlight></codeline>
<codeline lineno="1078"><highlight class="normal">{</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">flock<sp/>f;</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd<sp/>=<sp/>get_fd(lfd);</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/>f.l_type<sp/>=<sp/>get_c_long(ltype);</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/>f.l_whence<sp/>=<sp/>NNULLP(whence)<sp/>?<sp/>get_c_long(whence)<sp/>:<sp/>SEEK_SET;</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/>f.l_start<sp/>=<sp/>NNULLP(start)<sp/>?<sp/>get_c_long(start)<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/>f.l_len<sp/>=<sp/>NNULLP(len)<sp/>?<sp/>get_c_long(len)<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/>f.l_pid<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fcntl(fd,op,&amp;f)<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(llast_c_errmsg(-1));</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(op<sp/>!=<sp/>F_GETLK)</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f.l_type<sp/>==<sp/>F_UNLCK)</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(listn(2,flocons(f.l_type),flocons(f.l_pid)));}</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lF_SETLK(<ref refid="structobj" kindref="compound">LISP</ref><sp/>fd,<ref refid="structobj" kindref="compound">LISP</ref><sp/>ltype,<ref refid="structobj" kindref="compound">LISP</ref><sp/>whence,<ref refid="structobj" kindref="compound">LISP</ref><sp/>start,<ref refid="structobj" kindref="compound">LISP</ref><sp/>len)</highlight></codeline>
<codeline lineno="1095"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(gsetlk(F_SETLK,fd,ltype,whence,start,len));}</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lF_SETLKW(<ref refid="structobj" kindref="compound">LISP</ref><sp/>fd,<ref refid="structobj" kindref="compound">LISP</ref><sp/>ltype,<ref refid="structobj" kindref="compound">LISP</ref><sp/>whence,<ref refid="structobj" kindref="compound">LISP</ref><sp/>start,<ref refid="structobj" kindref="compound">LISP</ref><sp/>len)</highlight></codeline>
<codeline lineno="1098"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(gsetlk(F_SETLKW,fd,ltype,whence,start,len));}</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lF_GETLK(<ref refid="structobj" kindref="compound">LISP</ref><sp/>fd,<ref refid="structobj" kindref="compound">LISP</ref><sp/>ltype,<ref refid="structobj" kindref="compound">LISP</ref><sp/>whence,<ref refid="structobj" kindref="compound">LISP</ref><sp/>start,<ref refid="structobj" kindref="compound">LISP</ref><sp/>len)</highlight></codeline>
<codeline lineno="1101"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(gsetlk(F_GETLK,fd,ltype,whence,start,len));}</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1104"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1106"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>delete_file(<ref refid="structobj" kindref="compound">LISP</ref><sp/>fname)</highlight></codeline>
<codeline lineno="1108"><highlight class="normal">{</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iflag,ret;</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/>iflag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VMS</highlight></codeline>
<codeline lineno="1111"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>ret<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">(get_c_string(fname));</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="1113"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>unlink(get_c_string(fname));</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1115"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>no_interrupt(iflag);</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret)</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(strcons(-1,last_c_errmsg(-1)));</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>utime2str(<ref refid="structobj" kindref="compound">LISP</ref><sp/>u)</highlight></codeline>
<codeline lineno="1122"><highlight class="normal">{time_t<sp/>bt;</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">tm<sp/>*btm;</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>sbuff[100];</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/>bt<sp/>=<sp/>get_c_long(u);</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((btm<sp/>=<sp/>localtime(&amp;bt)))</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/>{sprintf(sbuff,</highlight><highlight class="stringliteral">&quot;%04d%02d%02d%02d%02d%02d%02d&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>btm-&gt;tm_year+1900,btm-&gt;tm_mon<sp/>+<sp/>1,btm-&gt;tm_mday,</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>btm-&gt;tm_hour,btm-&gt;tm_min,btm-&gt;tm_sec,0);</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(strcons(strlen(sbuff),sbuff));}</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32</highlight></codeline>
<codeline lineno="1135"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>win32_debug(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1136"><highlight class="normal">{DebugBreak();</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1139"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VMS</highlight></codeline>
<codeline lineno="1141"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>vms_debug(arg)</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>arg;</highlight></codeline>
<codeline lineno="1144"><highlight class="normal">{</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>arg1[257];</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data;</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NULLP(arg)</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/>lib$signal(SS$_DEBUG,0);</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/>else</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/>{data<sp/>=<sp/>get_c_string(arg);</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/>arg1[0]<sp/>=<sp/>strlen(data);</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;arg1[1],data,arg1[0]);</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/>lib$signal(SS$_DEBUG,1,arg1);}</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">dsc$descriptor<sp/>*set_dsc_cst(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>dsc$descriptor<sp/>*d,</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s)</highlight></codeline>
<codeline lineno="1156"><highlight class="normal">{d-&gt;dsc$w_length<sp/>=<sp/>strlen(s);</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/>d-&gt;dsc$b_dtype<sp/>=<sp/>DSC$K_DTYPE_T;</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/>d-&gt;dsc$b_class<sp/>=<sp/>DSC$K_CLASS_S;</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/>d-&gt;dsc$a_pointer<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(d);}</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>err_vms(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>retval)</highlight></codeline>
<codeline lineno="1164"><highlight class="normal">{</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errmsg,buff[100];</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(errmsg<sp/>=<sp/>strerror(EVMSERR,retval))</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/>err(errmsg,NIL);</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/>{sprintf(buff,</highlight><highlight class="stringliteral">&quot;VMS<sp/>ERROR<sp/>%d&quot;</highlight><highlight class="normal">,retval);</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/>err(buff,NIL);}}</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lcrembx(<ref refid="structobj" kindref="compound">LISP</ref><sp/>l)</highlight></codeline>
<codeline lineno="1172"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>tmp;</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>chan;</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prmflg,maxmsg,bufquo,promsk,acmode,iflag,retval;</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">dsc$descriptor<sp/>lognam;</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/>set_dsc_cst(&amp;lognam,get_c_string(car(l)));</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/>tmp<sp/>=<sp/>cadr(assq(cintern(</highlight><highlight class="stringliteral">&quot;prmflg&quot;</highlight><highlight class="normal">),l));</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/>prmflg<sp/>=<sp/>NNULLP(tmp)<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/>tmp<sp/>=<sp/>cadr(assq(cintern(</highlight><highlight class="stringliteral">&quot;maxmsg&quot;</highlight><highlight class="normal">),l));</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/>maxmsg<sp/>=<sp/>NNULLP(tmp)<sp/>?<sp/>get_c_long(tmp)<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/>tmp<sp/>=<sp/>cadr(assq(cintern(</highlight><highlight class="stringliteral">&quot;bufquo&quot;</highlight><highlight class="normal">),l));</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/>bufquo<sp/>=<sp/>NNULLP(tmp)<sp/>?<sp/>get_c_long(tmp)<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/>tmp<sp/>=<sp/>cadr(assq(cintern(</highlight><highlight class="stringliteral">&quot;promsk&quot;</highlight><highlight class="normal">),l));</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/>promsk<sp/>=<sp/>NNULLP(tmp)<sp/>?<sp/>get_c_long(tmp)<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/>tmp<sp/>=<sp/>cadr(assq(cintern(</highlight><highlight class="stringliteral">&quot;acmode&quot;</highlight><highlight class="normal">),l));</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/>acmode<sp/>=<sp/>NNULLP(tmp)<sp/>?<sp/>get_c_long(tmp)<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/>tmp<sp/>=<sp/>cons(flocons(-1),leval(sym_channels,NIL));</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/>iflag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/>retval<sp/>=<sp/>sys$crembx(prmflg,&amp;chan,maxmsg,bufquo,promsk,acmode,&amp;lognam);</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(retval<sp/>!=<sp/>SS$_NORMAL)</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/>{no_interrupt(iflag);</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/>err_vms(retval);}</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/>setvar(sym_channels,tmp,NIL);</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/>tmp<sp/>=<sp/>car(tmp);</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/>tmp-&gt;storage_as.flonum.data<sp/>=<sp/>chan;</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/>no_interrupt(iflag);</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(tmp);}</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"></highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lset_logical(<ref refid="structobj" kindref="compound">LISP</ref><sp/>name,<ref refid="structobj" kindref="compound">LISP</ref><sp/>value,<ref refid="structobj" kindref="compound">LISP</ref><sp/>table,<ref refid="structobj" kindref="compound">LISP</ref><sp/>attributes)</highlight></codeline>
<codeline lineno="1200"><highlight class="normal">{</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">dsc$descriptor<sp/>dname,dvalue,dtable;</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>status,iflag;</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/>iflag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/>status<sp/>=<sp/>lib$set_logical(set_dsc_cst(&amp;dname,get_c_string(name)),</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULLP(value)<sp/>?<sp/>0<sp/>:<sp/>set_dsc_cst(&amp;dvalue,</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_c_string(value)),</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULLP(table)<sp/>?<sp/>0<sp/>:<sp/>set_dsc_cst(&amp;dtable,</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_c_string(table)),</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assemble_options(attributes,</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;NO_ALIAS&quot;</highlight><highlight class="normal">,LNM$M_NO_ALIAS,</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;CONFINE&quot;</highlight><highlight class="normal">,LNM$M_CONFINE,</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;CRELOG&quot;</highlight><highlight class="normal">,LNM$M_CRELOG,</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;TABLE&quot;</highlight><highlight class="normal">,LNM$M_TABLE,</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;CONCEALED&quot;</highlight><highlight class="normal">,LNM$M_CONCEALED,</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;TERMINAL&quot;</highlight><highlight class="normal">,LNM$M_TERMINAL,</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;EXISTS&quot;</highlight><highlight class="normal">,LNM$M_EXISTS,</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;SHAREABLE&quot;</highlight><highlight class="normal">,LNM$M_SHAREABLE,</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;CREATE_IF&quot;</highlight><highlight class="normal">,LNM$M_CREATE_IF,</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;CASE_BLIND&quot;</highlight><highlight class="normal">,LNM$M_CASE_BLIND,</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL),</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0);</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status<sp/>!=<sp/>SS$_NORMAL)</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/>err_vms(status);</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/>no_interrupt(iflag);</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1227"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lgetenv(<ref refid="structobj" kindref="compound">LISP</ref><sp/>var)</highlight></codeline>
<codeline lineno="1229"><highlight class="normal">{</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str;</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((str<sp/>=<sp/>getenv(get_c_string(var))))</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(strcons(strlen(str),str));</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>unix_time(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1236"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(time(NULL)));}</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>unix_ctime(<ref refid="structobj" kindref="compound">LISP</ref><sp/>value)</highlight></codeline>
<codeline lineno="1239"><highlight class="normal">{time_t<sp/>b;</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buff,*p;</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NNULLP(value)</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/>b<sp/>=<sp/>get_c_long(value);</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/>else</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/>time(&amp;b);</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/>if<sp/>((buff<sp/>=<sp/>ctime(&amp;b)))</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((p<sp/>=<sp/>strchr(buff,</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)))<sp/>*p<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(strcons(strlen(buff),buff));}</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>http_date(<ref refid="structobj" kindref="compound">LISP</ref><sp/>value)</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>returns<sp/>the<sp/>internet<sp/>standard<sp/>RFC<sp/>1123<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal">{time_t<sp/>b;</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buff[256];</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">tm<sp/>*t;</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NNULLP(value)</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/>b<sp/>=<sp/>get_c_long(value);</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/>else</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/>time(&amp;b);</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/>if<sp/>(!(t<sp/>=<sp/>gmtime(&amp;b)))<sp/>return(NIL);</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/>(sprintf</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/>(buff,&quot;%s,<sp/>%02d<sp/>%s<sp/>%04d<sp/>%02d:%02d:%02d<sp/>GMT&quot;,</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/>&amp;&quot;Sun\0Mon\0Tue\0Wed\0Thu\0Fri\0Sat&quot;[t-&gt;tm_wday*4],</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/>t-&gt;tm_mday,</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/>&amp;&quot;Jan\0Feb\0Mar\0Apr\0May\0Jun\0Jul\0Aug\0Sep\0Oct\0Nov\0Dec&quot;[t-&gt;tm_mon*4],</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/>t-&gt;tm_year+1900,</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/>t-&gt;tm_hour,</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/>t-&gt;tm_min,</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/>t-&gt;tm_sec));</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/>return(strcons(strlen(buff),buff));}</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"></highlight></codeline>
<codeline lineno="1272"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__osf__)</highlight></codeline>
<codeline lineno="1273"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>http_date_parse(<ref refid="structobj" kindref="compound">LISP</ref><sp/>input)</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>handle<sp/>RFC<sp/>822,<sp/>RFC<sp/>850,<sp/>RFC<sp/>1123<sp/>and<sp/>the<sp/>ANSI<sp/>C<sp/>ascitime()<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal">{</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">tm<sp/>tm,*lc;</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/>time_t<sp/>t;</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gmtoff;</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str<sp/>=<sp/>get_c_string(input),*format;</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/>t<sp/>=<sp/>time(NULL);</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lc<sp/>=<sp/>localtime(&amp;t))</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/>gmtoff<sp/>=<sp/>lc-&gt;tm_gmtoff;</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strchr(str,</highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>strchr(str,</highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">))<sp/></highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>rfc-850:<sp/>Sunday,<sp/>06-Nov-94<sp/>08:49:37<sp/>GMT<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/>format<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;%a,<sp/>%d-%b-%y<sp/>%H:%M:%S<sp/>GMT&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strchr(str,</highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>rfc-1123:<sp/>Sun,<sp/>06<sp/>Nov<sp/>1994<sp/>08:49:37<sp/>GMT<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/>format<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;%a,<sp/>%d<sp/>%b<sp/>%Y<sp/>%H:%M:%S<sp/>GMT&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ascitime:<sp/>Sun<sp/>Nov<sp/><sp/>6<sp/>08:49:37<sp/>1994<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/>{format<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;%c&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/>gmtoff<sp/>=<sp/>0;}</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strptime(str,format,&amp;tm))</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/>{t<sp/>=<sp/>mktime(&amp;tm);</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>unfortunately<sp/>there<sp/>is<sp/>no<sp/>documented<sp/>way<sp/>to<sp/>tell<sp/>mktime</highlight></codeline>
<codeline lineno="1296"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>assume<sp/>GMT.<sp/>Except<sp/>for<sp/>saving<sp/>the<sp/>value<sp/>of<sp/>the<sp/>current</highlight></codeline>
<codeline lineno="1297"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timezone,<sp/>setting<sp/>TZ<sp/>to<sp/>GMT,<sp/>doing<sp/>a<sp/>tzset()<sp/>then<sp/>doing</highlight></codeline>
<codeline lineno="1298"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>our<sp/>mktime()<sp/>followed<sp/>by<sp/>setting<sp/>the<sp/>time<sp/>zone<sp/>back<sp/>to<sp/>the<sp/>way</highlight></codeline>
<codeline lineno="1299"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>was<sp/>before.<sp/>That<sp/>is<sp/>fairly<sp/>horrible,<sp/>so<sp/>instead<sp/>we<sp/>work<sp/>around</highlight></codeline>
<codeline lineno="1300"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this<sp/>by<sp/>adding<sp/>the<sp/>gmtoff<sp/>we<sp/>computed<sp/>above,<sp/>which<sp/>of<sp/>course<sp/>may</highlight></codeline>
<codeline lineno="1301"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>have<sp/>changed<sp/>since<sp/>we<sp/>computed<sp/>it<sp/>(if<sp/>the<sp/>system<sp/>manager<sp/>switched</highlight></codeline>
<codeline lineno="1302"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>daylight<sp/>savings<sp/>time<sp/>modes,<sp/>for<sp/>example).</highlight></codeline>
<codeline lineno="1303"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>There<sp/>is<sp/>an<sp/>executable<sp/>/usr/lib/mh/dp<sp/>which<sp/>is<sp/>presumably</highlight></codeline>
<codeline lineno="1304"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doing<sp/>the<sp/>same<sp/>sort<sp/>of<sp/>thing,<sp/>although<sp/>perhaps<sp/>it<sp/>uses<sp/>tzset<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(t<sp/>+<sp/>gmtoff));}</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1310"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>hpux</highlight></codeline>
<codeline lineno="1313"><highlight class="preprocessor"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>usleep(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>winks)<sp/></highlight><highlight class="comment">/*<sp/>added,<sp/>dcd<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">timeval<sp/>sleepytime;</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/>sleepytime.tv_sec<sp/>=<sp/>winks<sp/>/<sp/>1000000;</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/>sleepytime.tv_usec<sp/>=<sp/>winks<sp/>%<sp/>1000000;</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>select(0,0,0,0,&amp;sleepytime);</highlight></codeline>
<codeline lineno="1319"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1321"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1322"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(sun_old)<sp/>||<sp/>defined(sgi)</highlight></codeline>
<codeline lineno="1323"><highlight class="preprocessor"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>usleep(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>winks)</highlight></codeline>
<codeline lineno="1324"><highlight class="normal">{</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">timespec<sp/>x;</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/>x.tv_sec<sp/>=<sp/>winks<sp/>/<sp/>1000000;</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/>x.tv_nsec<sp/>=<sp/>(winks<sp/>%<sp/>1000000)<sp/>*<sp/>1000;</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(nanosleep(&amp;x,NULL));}</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1329"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lsleep(<ref refid="structobj" kindref="compound">LISP</ref><sp/>ns)</highlight></codeline>
<codeline lineno="1331"><highlight class="normal">{</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val<sp/>=<sp/>get_c_double(ns);</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>unix</highlight></codeline>
<codeline lineno="1333"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>usleep((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(val<sp/>*<sp/>1.0e6));</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="1335"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32</highlight></codeline>
<codeline lineno="1336"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>Sleep((DWORD)(val<sp/>*<sp/>1000));</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="1338"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>sleep((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)val);</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1340"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1341"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"></highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>url_encode(<ref refid="structobj" kindref="compound">LISP</ref><sp/>in)</highlight></codeline>
<codeline lineno="1344"><highlight class="normal">{</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>spaces=0,specials=0,regulars=0,c;</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str<sp/>=<sp/>get_c_string(in),*p,*r;</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>out;</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(p=str,spaces=0,specials=0,regulars=0;(c<sp/>=<sp/>*p);++p)</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>++spaces;</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(isalnum(c)<sp/>||<sp/>strchr(</highlight><highlight class="stringliteral">&quot;*-._@&quot;</highlight><highlight class="normal">,c)))<sp/>++specials;</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>++regulars;</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((spaces<sp/>==<sp/>0)<sp/>&amp;&amp;<sp/>(specials<sp/>==<sp/>0))</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(in);</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/>out<sp/>=<sp/>strcons(spaces<sp/>+<sp/>regulars<sp/>+<sp/>specials<sp/>*<sp/>3,NULL);</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(p=str,r=get_c_string(out);(c<sp/>=<sp/>*p);++p)</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*r++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(isalnum(c)<sp/>||<sp/>strchr(</highlight><highlight class="stringliteral">&quot;*-._@&quot;</highlight><highlight class="normal">,c)))</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{sprintf(r,</highlight><highlight class="stringliteral">&quot;%%%02X&quot;</highlight><highlight class="normal">,c<sp/>&amp;<sp/>0xFF);</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>+=<sp/>3;}</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*r++<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/>*r<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(out);}</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"></highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>url_decode(<ref refid="structobj" kindref="compound">LISP</ref><sp/>in)</highlight></codeline>
<codeline lineno="1366"><highlight class="normal">{</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pluses=0,specials=0,regulars=0,c,j;</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str<sp/>=<sp/>get_c_string(in),*p,*r;</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>out;</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(p=str,pluses=0,specials=0,regulars=0;(c<sp/>=<sp/>*p);++p)</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">)<sp/>++pluses;</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;%&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isxdigit(p[1])<sp/>&amp;&amp;<sp/>isxdigit(p[2]))</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/>++specials;</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>++regulars;</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((pluses<sp/>==<sp/>0)<sp/>&amp;&amp;<sp/>(specials<sp/>==<sp/>0))</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(in);</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/>out<sp/>=<sp/>strcons(regulars<sp/>+<sp/>pluses<sp/>+<sp/>specials,NULL);</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(p=str,r=get_c_string(out);(c<sp/>=<sp/>*p);++p)</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*r++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;%&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(*r<sp/>=<sp/>0,j=1;j&lt;3;++j)</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/>*r<sp/>=<sp/>*r<sp/>*<sp/>16<sp/>+<sp/>((isdigit(p[j]))</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>(p[j]<sp/>-<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(toupper(p[j])<sp/>-<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>+<sp/>10));</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++r;}</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*r++<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/>*r<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(out);}</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"></highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>html_encode(<ref refid="structobj" kindref="compound">LISP</ref><sp/>in)</highlight></codeline>
<codeline lineno="1397"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>j,n,m;</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,*ptr;</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>out;</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(TYPE(in))</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_string:</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_symbol:</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(in);}</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/>str<sp/>=<sp/>get_c_string(in);</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/>n<sp/>=<sp/>strlen(str);</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0,m=0;j<sp/>&lt;<sp/>n;<sp/>++j)</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(str[j])</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/>m<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&amp;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/>m<sp/>+=<sp/>5;</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/>m<sp/>+=<sp/>6;</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/>++m;}</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>==<sp/>m)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(in);</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/>out<sp/>=<sp/>strcons(m,NULL);</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0,ptr=get_c_string(out);j<sp/>&lt;<sp/>n;<sp/>++j)</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(str[j])</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/>strcpy(ptr,</highlight><highlight class="stringliteral">&quot;&amp;gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr<sp/>+=<sp/>strlen(ptr);</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/>strcpy(ptr,</highlight><highlight class="stringliteral">&quot;&amp;lt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr<sp/>+=<sp/>strlen(ptr);</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&amp;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/>strcpy(ptr,</highlight><highlight class="stringliteral">&quot;&amp;amp;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr<sp/>+=<sp/>strlen(ptr);</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(ptr,</highlight><highlight class="stringliteral">&quot;&amp;quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr<sp/>+=<sp/>strlen(ptr);</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/>*ptr++<sp/>=<sp/>str[j];}</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(out);}</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"></highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>html_decode(<ref refid="structobj" kindref="compound">LISP</ref><sp/>in)</highlight></codeline>
<codeline lineno="1447"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(in);}</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"></highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lgets(<ref refid="structobj" kindref="compound">LISP</ref><sp/>file,<ref refid="structobj" kindref="compound">LISP</ref><sp/>buffn)</highlight></codeline>
<codeline lineno="1450"><highlight class="normal">{FILE<sp/>*f;</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iflag;</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[2048],*ptr;</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/>f<sp/>=<sp/>get_c_file(file,stdin);</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NULLP(buffn)</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/>n<sp/>=<sp/>sizeof(buffer);</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/>else<sp/>if<sp/>((n<sp/>=<sp/>get_c_long(buffn))<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/>err(&quot;size<sp/>must<sp/>be<sp/>&gt;=<sp/>0&quot;,buffn);</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/>else<sp/>if<sp/>(n<sp/>&gt;<sp/>sizeof(buffer))</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/>err(&quot;not<sp/>handling<sp/>buffer<sp/>of<sp/>size&quot;,listn(2,buffn,flocons(sizeof(buffer))));</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/>iflag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/>if<sp/>((ptr<sp/>=<sp/>fgets(buffer,n,f)))</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/>{no_interrupt(iflag);</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(strcons(strlen(buffer),buffer));}</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/>no_interrupt(iflag);</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"></highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>readline(<ref refid="structobj" kindref="compound">LISP</ref><sp/>file)</highlight></codeline>
<codeline lineno="1469"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>result;</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*start,*ptr;</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/>result<sp/>=<sp/>lgets(file,NIL);</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NULLP(result)<sp/>return(NIL);</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/>start<sp/>=<sp/>get_c_string(result);</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/>if<sp/>((ptr<sp/>=<sp/>strchr(start,&apos;\n&apos;)))</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/>{*ptr<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>we<sp/>also<sp/>change<sp/>the<sp/>dim,<sp/>because<sp/>otherwise<sp/>our<sp/>equal?<sp/>function</highlight></codeline>
<codeline lineno="1477"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>confused.<sp/>What<sp/>we<sp/>really<sp/>need<sp/>are<sp/>arrays<sp/>with<sp/>fill<sp/>pointers.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/>result-&gt;storage_as.string.dim<sp/>=<sp/>ptr<sp/>-<sp/>start;</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);}</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>we<sp/>should<sp/>be<sp/>doing<sp/>lgets<sp/>until<sp/>we<sp/><sp/>get<sp/>a<sp/>string<sp/>with<sp/>a<sp/>newline<sp/>or<sp/>NIL,</highlight></codeline>
<codeline lineno="1482"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>then<sp/>append<sp/>the<sp/>results<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);}</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"></highlight></codeline>
<codeline lineno="1485"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>WIN32</highlight></codeline>
<codeline lineno="1486"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>l_chown(<ref refid="structobj" kindref="compound">LISP</ref><sp/>path,<ref refid="structobj" kindref="compound">LISP</ref><sp/>uid,<ref refid="structobj" kindref="compound">LISP</ref><sp/>gid)</highlight></codeline>
<codeline lineno="1488"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>iflag;</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/>iflag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(chown(get_c_string(path),get_c_long(uid),get_c_long(gid)))</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;chown&quot;</highlight><highlight class="normal">,cons(path,llast_c_errmsg(-1)));</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/>no_interrupt(iflag);</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"></highlight></codeline>
<codeline lineno="1495"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1496"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1497"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(unix)<sp/>&amp;&amp;<sp/>!defined(linux)</highlight></codeline>
<codeline lineno="1498"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>l_lchown(<ref refid="structobj" kindref="compound">LISP</ref><sp/>path,<ref refid="structobj" kindref="compound">LISP</ref><sp/>uid,<ref refid="structobj" kindref="compound">LISP</ref><sp/>gid)</highlight></codeline>
<codeline lineno="1499"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>iflag;</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/>iflag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lchown(get_c_string(path),get_c_long(uid),get_c_long(gid)))</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;lchown&quot;</highlight><highlight class="normal">,cons(path,llast_c_errmsg(-1)));</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/>no_interrupt(iflag);</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1506"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1507"><highlight class="normal"></highlight></codeline>
<codeline lineno="1508"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>unix</highlight></codeline>
<codeline lineno="1509"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>popen_l(<ref refid="structobj" kindref="compound">LISP</ref><sp/>name,<ref refid="structobj" kindref="compound">LISP</ref><sp/>how)</highlight></codeline>
<codeline lineno="1511"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(fopen_cg(popen,</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_c_string(name),</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULLP(how)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>:<sp/>get_c_string(how)));}</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"></highlight></codeline>
<codeline lineno="1515"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>note:<sp/>if<sp/>the<sp/>user<sp/>fails<sp/>to<sp/>call<sp/>pclose<sp/>then<sp/>the<sp/>gc<sp/>is<sp/>going</highlight></codeline>
<codeline lineno="1516"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>utilize<sp/>fclose,<sp/>which<sp/>can<sp/>result<sp/>in<sp/>a<sp/>&lt;defunct&gt;</highlight></codeline>
<codeline lineno="1517"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>process<sp/>laying<sp/>around.<sp/>However,<sp/>we<sp/>don&apos;t<sp/>want<sp/>to</highlight></codeline>
<codeline lineno="1518"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>modify<sp/>file_gc_free<sp/>nor<sp/>add<sp/>a<sp/>new<sp/>datatype.</highlight></codeline>
<codeline lineno="1519"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>So<sp/>beware.</highlight></codeline>
<codeline lineno="1520"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>pclose_l(<ref refid="structobj" kindref="compound">LISP</ref><sp/>ptr)</highlight></codeline>
<codeline lineno="1522"><highlight class="normal">{FILE<sp/>*f<sp/>=<sp/>get_c_file(ptr,NULL);</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>iflag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>retval,xerrno;</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/>retval<sp/>=<sp/>pclose(f);</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/>xerrno<sp/>=<sp/>errno;</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/>ptr-&gt;storage_as.c_file.f<sp/>=<sp/>(FILE<sp/>*)<sp/>NULL;</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/>free(ptr-&gt;storage_as.c_file.name);</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/>ptr-&gt;storage_as.c_file.name<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/>no_interrupt(iflag);</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(retval<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;pclose&quot;</highlight><highlight class="normal">,llast_c_errmsg(xerrno));</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(retval));}</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"></highlight></codeline>
<codeline lineno="1535"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1536"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>so_init_name(<ref refid="structobj" kindref="compound">LISP</ref><sp/>fname,<ref refid="structobj" kindref="compound">LISP</ref><sp/>iname)</highlight></codeline>
<codeline lineno="1538"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>init_name;</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NNULLP(iname)</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/>init_name<sp/>=<sp/>iname;</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/>else</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/>{init_name<sp/>=<sp/>car(last(lstrbreakup(fname,cintern(</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(VMS)</highlight></codeline>
<codeline lineno="1544"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>init_name<sp/>=<sp/>lstrunbreakup(butlast(lstrbreakup(init_name,cintern(</highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">))),</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cintern(</highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1547"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>init_name<sp/>=<sp/>string_append(listn(2,cintern(</highlight><highlight class="stringliteral">&quot;init_&quot;</highlight><highlight class="normal">),init_name));}</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(intern(init_name));}</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"></highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>so_ext(<ref refid="structobj" kindref="compound">LISP</ref><sp/>fname)</highlight></codeline>
<codeline lineno="1551"><highlight class="normal">{</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ext<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;.so&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>lext;</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(hpux)</highlight></codeline>
<codeline lineno="1554"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>ext<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;.sl&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1556"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>defined(vms)</highlight></codeline>
<codeline lineno="1557"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>ext<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1559"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>defined(WIN32)</highlight></codeline>
<codeline lineno="1560"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>ext<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;.dll&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1562"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>lext<sp/>=<sp/>strcons(strlen(ext),ext);</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NULLP(fname)</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/>return(lext);</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/>else</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/>return(string_append(listn(2,fname,lext)));}</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"></highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>load_so(<ref refid="structobj" kindref="compound">LISP</ref><sp/>fname,<ref refid="structobj" kindref="compound">LISP</ref><sp/>iname)</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>note:<sp/>error<sp/>cases<sp/>can<sp/>leak<sp/>memory<sp/>in<sp/>this<sp/>procedure.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1570"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>init_name;</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/>void<sp/>(*fcn)(void)<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__osf__)<sp/>||<sp/>defined(sun)<sp/>||<sp/>defined(linux)<sp/>||<sp/>defined(sgi)</highlight></codeline>
<codeline lineno="1573"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handle;</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1575"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>defined(hpux)</highlight></codeline>
<codeline lineno="1576"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>shl_t<sp/>handle;</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1578"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>defined(VMS)</highlight></codeline>
<codeline lineno="1579"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">dsc$descriptor<sp/>filename,symbol,defaultd;</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>status;</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>dsym;</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1583"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32</highlight></codeline>
<codeline lineno="1584"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>HINSTANCE<sp/>handle;</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1586"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>iflag;</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/>init_name<sp/>=<sp/>so_init_name(fname,iname);</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/>iflag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(siod_verbose_check(3))</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/>{put_st(</highlight><highlight class="stringliteral">&quot;so-loading<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/>put_st(get_c_string(fname));</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/>put_st(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);}</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__osf__)<sp/>||<sp/>defined(sun)<sp/>||<sp/>defined(linux)<sp/>||<sp/>defined(sgi)</highlight></codeline>
<codeline lineno="1594"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>!defined(__osf__)</highlight></codeline>
<codeline lineno="1595"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>Observed<sp/>bug:<sp/>values<sp/>of<sp/>LD_LIBRARY_PATH<sp/>established<sp/>with<sp/>putenv</highlight></codeline>
<codeline lineno="1596"><highlight class="comment"><sp/><sp/><sp/><sp/>-after-<sp/>a<sp/>process<sp/>has<sp/>started<sp/>are<sp/>ignored.<sp/>Work<sp/>around<sp/>follows.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(access(get_c_string(fname),F_OK))</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/>fname<sp/>=<sp/>string_append(listn(3,</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcons(-1,siod_lib),</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcons(-1,</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fname));</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1603"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(handle<sp/>=<sp/>dlopen(get_c_string(fname),RTLD_LAZY)))</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/>err(dlerror(),fname);</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(fcn<sp/>=<sp/>dlsym(handle,get_c_string(init_name))))</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/>err(dlerror(),init_name);</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1608"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>defined(hpux)</highlight></codeline>
<codeline lineno="1609"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(access(get_c_string(fname),F_OK))</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/>fname<sp/>=<sp/>string_append(listn(3,</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcons(-1,siod_lib),</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcons(-1,</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fname));</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(handle<sp/>=<sp/>shl_load(get_c_string(fname),BIND_DEFERRED,0L)))</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;shl_load&quot;</highlight><highlight class="normal">,llast_c_errmsg(errno));</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shl_findsym(&amp;handle,get_c_string(init_name),TYPE_PROCEDURE,&amp;fcn))</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;shl_findsym&quot;</highlight><highlight class="normal">,llast_c_errmsg(errno));</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1619"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>defined(VMS)</highlight></codeline>
<codeline lineno="1620"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>dsym<sp/>=<sp/>cintern(</highlight><highlight class="stringliteral">&quot;*require-so-dir*&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NNULLP(symbol_boundp(dsym,NIL))<sp/>&amp;&amp;<sp/>NNULLP(symbol_value(dsym,NIL)))</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/>set_dsc_cst(&amp;defaultd,get_c_string(symbol_value(dsym,NIL)));</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/>dsym<sp/>=<sp/>NIL;</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/>status<sp/>=<sp/>lib$find_image_symbol(set_dsc_cst(&amp;filename,</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_c_string(fname)),</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_dsc_cst(&amp;symbol,</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_c_string(init_name)),</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;fcn,</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULLP(dsym)<sp/>?<sp/>0<sp/>:<sp/>&amp;defaultd);</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status<sp/>!=<sp/>SS$_NORMAL)</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/>err_vms(status);</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1634"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32</highlight></codeline>
<codeline lineno="1635"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(handle<sp/>=<sp/>LoadLibrary(get_c_string(fname))))</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;LoadLibrary&quot;</highlight><highlight class="normal">,fname);</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(fcn<sp/>=<sp/>(LPVOID)GetProcAddress(handle,get_c_string(init_name))))</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;GetProcAddress&quot;</highlight><highlight class="normal">,init_name);</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1640"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fcn)</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/>(*fcn)();</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;did<sp/>not<sp/>load<sp/>function&quot;</highlight><highlight class="normal">,init_name);</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/>no_interrupt(iflag);</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(siod_verbose_check(3))</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/>put_st(</highlight><highlight class="stringliteral">&quot;done.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(init_name);}</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"></highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>require_so(<ref refid="structobj" kindref="compound">LISP</ref><sp/>fname)</highlight></codeline>
<codeline lineno="1650"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>init_name;</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/>init_name<sp/>=<sp/>so_init_name(fname,NIL);</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NULLP(symbol_boundp(init_name,NIL))<sp/>||</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>NULLP(symbol_value(init_name,NIL)))</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/>{load_so(fname,NIL);</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(setvar(init_name,a_true_value(),NIL));}</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"></highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>siod_lib_l(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1660"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(rintern(siod_lib));}</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"></highlight></codeline>
<codeline lineno="1662"><highlight class="normal"></highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>ccall_catch_1(<ref refid="structobj" kindref="compound">LISP</ref><sp/>(*fcn)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg)</highlight></codeline>
<codeline lineno="1664"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>val;</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/>val<sp/>=<sp/>(*fcn)(arg);</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/>catch_framep<sp/>=<sp/>catch_framep-&gt;next;</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(val);}</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"></highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>ccall_catch(<ref refid="structobj" kindref="compound">LISP</ref><sp/>tag,<ref refid="structobj" kindref="compound">LISP</ref><sp/>(*fcn)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg)</highlight></codeline>
<codeline lineno="1670"><highlight class="normal">{</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcatch__frame" kindref="compound">catch_frame</ref><sp/>frame;</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k;</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/>frame.tag<sp/>=<sp/>tag;</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/>frame.next<sp/>=<sp/>catch_framep;</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/>k<sp/>=<sp/>setjmp(frame.cframe);</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/>catch_framep<sp/>=<sp/>&amp;frame;</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/>{catch_framep<sp/>=<sp/>frame.next;</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(frame.retval);}</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(ccall_catch_1(fcn,arg));}</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"></highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>decode_tm(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>tm<sp/>*t)</highlight></codeline>
<codeline lineno="1682"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(symalist(</highlight><highlight class="stringliteral">&quot;sec&quot;</highlight><highlight class="normal">,flocons(t-&gt;tm_sec),</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;min&quot;</highlight><highlight class="normal">,flocons(t-&gt;tm_min),</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;hour&quot;</highlight><highlight class="normal">,flocons(t-&gt;tm_hour),</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;mday&quot;</highlight><highlight class="normal">,flocons(t-&gt;tm_mday),</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;mon&quot;</highlight><highlight class="normal">,flocons(t-&gt;tm_mon),</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;year&quot;</highlight><highlight class="normal">,flocons(t-&gt;tm_year),</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;wday&quot;</highlight><highlight class="normal">,flocons(t-&gt;tm_wday),</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;yday&quot;</highlight><highlight class="normal">,flocons(t-&gt;tm_yday),</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;isdst&quot;</highlight><highlight class="normal">,flocons(t-&gt;tm_isdst),</highlight></codeline>
<codeline lineno="1691"><highlight class="normal">#</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>defined(__osf__)</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;gmtoff&quot;</highlight><highlight class="normal">,flocons(t-&gt;__tm_gmtoff),</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;tm_zone&quot;</highlight><highlight class="normal">,(t-&gt;__tm_zone)<sp/>?<sp/>rintern(t-&gt;__tm_zone)<sp/>:<sp/>NIL,</highlight></codeline>
<codeline lineno="1694"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL));}</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"></highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>symalist(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*arg,...)</highlight></codeline>
<codeline lineno="1698"><highlight class="normal">{va_list<sp/>args;</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>result,l,val;</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key;</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!arg)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/>va_start(args,arg);</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/>val<sp/>=<sp/>va_arg(args,<ref refid="structobj" kindref="compound">LISP</ref>);</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/>result<sp/>=<sp/>cons(cons(cintern(arg),val),NIL);</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/>l<sp/>=<sp/>result;</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">((key<sp/>=<sp/>va_arg(args,</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)))</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/>{val<sp/>=<sp/>va_arg(args,<ref refid="structobj" kindref="compound">LISP</ref>);</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/>CDR(l)<sp/>=<sp/>cons(cons(cintern(key),val),NIL);</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/>l<sp/>=<sp/>CDR(l);}</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/>va_end(args);</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);}</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"></highlight></codeline>
<codeline lineno="1713"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>encode_tm(<ref refid="structobj" kindref="compound">LISP</ref><sp/>alist,</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>tm<sp/>*t)</highlight></codeline>
<codeline lineno="1714"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>val;</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/>val<sp/>=<sp/>cdr(assq(cintern(</highlight><highlight class="stringliteral">&quot;sec&quot;</highlight><highlight class="normal">),alist));</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/>t-&gt;tm_sec<sp/>=<sp/>NULLP(val)<sp/>?<sp/>0<sp/>:<sp/>get_c_long(val);</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/>val<sp/>=<sp/>cdr(assq(cintern(</highlight><highlight class="stringliteral">&quot;min&quot;</highlight><highlight class="normal">),alist));</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/>t-&gt;tm_min<sp/>=<sp/>NULLP(val)<sp/>?<sp/>0<sp/>:<sp/>get_c_long(val);</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/>val<sp/>=<sp/>cdr(assq(cintern(</highlight><highlight class="stringliteral">&quot;hour&quot;</highlight><highlight class="normal">),alist));</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/>t-&gt;tm_hour<sp/>=<sp/>NULLP(val)<sp/>?<sp/>0<sp/>:<sp/>get_c_long(val);</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/>val<sp/>=<sp/>cdr(assq(cintern(</highlight><highlight class="stringliteral">&quot;mday&quot;</highlight><highlight class="normal">),alist));</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/>t-&gt;tm_mday<sp/>=<sp/>NULLP(val)<sp/>?<sp/>0<sp/>:<sp/>get_c_long(val);</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/>val<sp/>=<sp/>cdr(assq(cintern(</highlight><highlight class="stringliteral">&quot;mon&quot;</highlight><highlight class="normal">),alist));</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/>t-&gt;tm_mon<sp/>=<sp/>NULLP(val)<sp/>?<sp/>0<sp/>:<sp/>get_c_long(val);</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/>val<sp/>=<sp/>cdr(assq(cintern(</highlight><highlight class="stringliteral">&quot;year&quot;</highlight><highlight class="normal">),alist));</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/>t-&gt;tm_year<sp/>=<sp/>NULLP(val)<sp/>?<sp/>0<sp/>:<sp/>get_c_long(val);</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/>val<sp/>=<sp/>cdr(assq(cintern(</highlight><highlight class="stringliteral">&quot;wday&quot;</highlight><highlight class="normal">),alist));</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/>t-&gt;tm_wday<sp/>=<sp/>NULLP(val)<sp/>?<sp/>0<sp/>:<sp/>get_c_long(val);</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/>val<sp/>=<sp/>cdr(assq(cintern(</highlight><highlight class="stringliteral">&quot;yday&quot;</highlight><highlight class="normal">),alist));</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/>t-&gt;tm_yday<sp/>=<sp/>NULLP(val)<sp/>?<sp/>0<sp/>:<sp/>get_c_long(val);</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/>val<sp/>=<sp/>cdr(assq(cintern(</highlight><highlight class="stringliteral">&quot;isdst&quot;</highlight><highlight class="normal">),alist));</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/>t-&gt;tm_isdst<sp/>=<sp/>NULLP(val)<sp/>?<sp/>-1<sp/>:<sp/>get_c_long(val);</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__osf__)</highlight></codeline>
<codeline lineno="1734"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>val<sp/>=<sp/>cdr(assq(cintern(</highlight><highlight class="stringliteral">&quot;gmtoff&quot;</highlight><highlight class="normal">),alist));</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/>t-&gt;__tm_gmtoff<sp/>=<sp/>NULLP(val)<sp/>?<sp/>0<sp/>:<sp/>get_c_long(val);</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1737"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"></highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>llocaltime(<ref refid="structobj" kindref="compound">LISP</ref><sp/>value)</highlight></codeline>
<codeline lineno="1740"><highlight class="normal">{time_t<sp/>b;</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">tm<sp/>*t;</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NNULLP(value)</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/>b<sp/>=<sp/>get_c_long(value);</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/>else</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/>time(&amp;b);</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/>if<sp/>((t<sp/>=<sp/>localtime(&amp;b)))</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/>return(decode_tm(t));</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/>else</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/>return(err(&quot;localtime&quot;,llast_c_errmsg(-1)));}</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"></highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lgmtime(<ref refid="structobj" kindref="compound">LISP</ref><sp/>value)</highlight></codeline>
<codeline lineno="1752"><highlight class="normal">{time_t<sp/>b;</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">tm<sp/>*t;</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NNULLP(value)</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/>b<sp/>=<sp/>get_c_long(value);</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/>else</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/>time(&amp;b);</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/>if<sp/>((t<sp/>=<sp/>gmtime(&amp;b)))</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/>return(decode_tm(t));</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/>else</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/>return(err(&quot;gmtime&quot;,llast_c_errmsg(-1)));}</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"></highlight></codeline>
<codeline lineno="1763"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(unix)<sp/>||<sp/>defined(WIN32)</highlight></codeline>
<codeline lineno="1764"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>ltzset(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1765"><highlight class="normal">{tzset();</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1768"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lmktime(<ref refid="structobj" kindref="compound">LISP</ref><sp/>alist)</highlight></codeline>
<codeline lineno="1770"><highlight class="normal">{</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">tm<sp/>tm;</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/>time_t<sp/>t;</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/>encode_tm(alist,&amp;tm);</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/>t<sp/>=<sp/>mktime(&amp;tm);</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(t));}</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"></highlight></codeline>
<codeline lineno="1776"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__osf__)<sp/>||<sp/>defined(SUN5)<sp/>||<sp/>defined(linux)</highlight></codeline>
<codeline lineno="1777"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lstrptime(<ref refid="structobj" kindref="compound">LISP</ref><sp/>str,<ref refid="structobj" kindref="compound">LISP</ref><sp/>fmt,<ref refid="structobj" kindref="compound">LISP</ref><sp/>in)</highlight></codeline>
<codeline lineno="1779"><highlight class="normal">{</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">tm<sp/>tm;</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/>encode_tm(in,&amp;tm);</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strptime(get_c_string(str),get_c_string(fmt),&amp;tm))</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(SUN5)</highlight></codeline>
<codeline lineno="1784"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>SUN<sp/>software<sp/>incorrectly<sp/>sets<sp/>this<sp/>to<sp/>0,<sp/>but<sp/>until<sp/>further</highlight></codeline>
<codeline lineno="1785"><highlight class="comment"><sp/><sp/><sp/><sp/>analysis<sp/>(such<sp/>as<sp/>by<sp/>mktime)<sp/>it<sp/>is<sp/>too<sp/>early<sp/>to<sp/>conclude<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>tm.tm_isdst<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1788"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(decode_tm(&amp;tm));</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"></highlight></codeline>
<codeline lineno="1793"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1794"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1795"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>unix</highlight></codeline>
<codeline lineno="1796"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lstrftime(<ref refid="structobj" kindref="compound">LISP</ref><sp/>fmt,<ref refid="structobj" kindref="compound">LISP</ref><sp/>in)</highlight></codeline>
<codeline lineno="1798"><highlight class="normal">{</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">tm<sp/>tm;</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/>time_t<sp/>b;</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">tm<sp/>*t;</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buff[1024];</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NNULLP(in)</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/>{encode_tm(in,&amp;tm);</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>&amp;tm;}</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/>{time(&amp;b);</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(t<sp/>=<sp/>gmtime(&amp;b)))</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((ret<sp/>=<sp/>strftime(buff,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buff),get_c_string(fmt),t)))</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(strcons(ret,buff));</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"></highlight></codeline>
<codeline lineno="1815"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1816"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lchdir(<ref refid="structobj" kindref="compound">LISP</ref><sp/>dir)</highlight></codeline>
<codeline lineno="1818"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>iflag;</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>unix</highlight></codeline>
<codeline lineno="1820"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>FILE<sp/>*f;</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd;</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1823"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path;</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(TYPE(dir))</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>tc_c_file:</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>unix</highlight></codeline>
<codeline lineno="1827"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>=<sp/>get_c_file(dir,NULL);</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fd<sp/>=<sp/>fileno(f);</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>iflag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fchdir(fd))</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(err(</highlight><highlight class="stringliteral">&quot;fchdir&quot;</highlight><highlight class="normal">,llast_c_errmsg(-1)));</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>no_interrupt(iflag);</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="1834"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;fchdir<sp/>not<sp/>supported<sp/>in<sp/>os&quot;</highlight><highlight class="normal">,NIL);</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1836"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>path<sp/>=<sp/>get_c_string(dir);</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>iflag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(chdir(path))</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(err(</highlight><highlight class="stringliteral">&quot;chdir&quot;</highlight><highlight class="normal">,llast_c_errmsg(-1)));</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>no_interrupt(iflag);</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}}</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"></highlight></codeline>
<codeline lineno="1845"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__osf__)</highlight></codeline>
<codeline lineno="1846"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>rld_pathnames(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>this<sp/>is<sp/>a<sp/>quick<sp/>diagnostic<sp/>to<sp/>know<sp/>what<sp/>images<sp/>we<sp/>are<sp/>running<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1848"><highlight class="normal">{</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path;</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>result<sp/>=<sp/>NIL;</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(path=_rld_first_pathname();path;path=_rld_next_pathname())</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/>result<sp/>=<sp/>cons(strcons(strlen(path),path),result);</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(nreverse(result));}</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1854"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1855"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>unix</highlight></codeline>
<codeline lineno="1856"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lgetpass(<ref refid="structobj" kindref="compound">LISP</ref><sp/>lprompt)</highlight></codeline>
<codeline lineno="1857"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>iflag;</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*result;</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/>iflag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/>result<sp/>=<sp/>getpass(NULLP(lprompt)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>:<sp/>get_c_string(lprompt));</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/>no_interrupt(iflag);</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result)</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(strcons(strlen(result),result));</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1867"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1868"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>unix</highlight></codeline>
<codeline lineno="1869"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lpipe(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1870"><highlight class="normal">{</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>filedes[2];</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>iflag;</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>f1,f2;</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/>f1<sp/>=<sp/>cons(NIL,NIL);</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/>f2<sp/>=<sp/>cons(NIL,NIL);</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/>iflag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pipe(filedes)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/>{f1-&gt;type<sp/>=<sp/>tc_c_file;</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/>f1-&gt;storage_as.c_file.f<sp/>=<sp/>fdopen(filedes[0],</highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/>f2-&gt;type<sp/>=<sp/>tc_c_file;</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/>f2-&gt;storage_as.c_file.f<sp/>=<sp/>fdopen(filedes[1],</highlight><highlight class="stringliteral">&quot;w&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/>no_interrupt(iflag);</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(listn(2,f1,f2));}</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(err(</highlight><highlight class="stringliteral">&quot;pipe&quot;</highlight><highlight class="normal">,llast_c_errmsg(-1)));}</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1886"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1887"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CTYPE_FLOAT<sp/><sp/><sp/>1</highlight></codeline>
<codeline lineno="1888"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>CTYPE_DOUBLE<sp/><sp/>2</highlight></codeline>
<codeline lineno="1889"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>CTYPE_CHAR<sp/><sp/><sp/><sp/>3</highlight></codeline>
<codeline lineno="1890"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>CTYPE_UCHAR<sp/><sp/><sp/>4</highlight></codeline>
<codeline lineno="1891"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>CTYPE_SHORT<sp/><sp/><sp/>5</highlight></codeline>
<codeline lineno="1892"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>CTYPE_USHORT<sp/><sp/>6</highlight></codeline>
<codeline lineno="1893"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>CTYPE_INT<sp/><sp/><sp/><sp/><sp/>7</highlight></codeline>
<codeline lineno="1894"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>CTYPE_UINT<sp/><sp/><sp/><sp/>8</highlight></codeline>
<codeline lineno="1895"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>CTYPE_LONG<sp/><sp/><sp/><sp/>9</highlight></codeline>
<codeline lineno="1896"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>CTYPE_ULONG<sp/><sp/>10</highlight></codeline>
<codeline lineno="1897"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>err_large_index(<ref refid="structobj" kindref="compound">LISP</ref><sp/>ind)</highlight></codeline>
<codeline lineno="1899"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(err(</highlight><highlight class="stringliteral">&quot;index<sp/>too<sp/>large&quot;</highlight><highlight class="normal">,ind));}</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"></highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>datref(<ref refid="structobj" kindref="compound">LISP</ref><sp/>dat,<ref refid="structobj" kindref="compound">LISP</ref><sp/>ctype,<ref refid="structobj" kindref="compound">LISP</ref><sp/>ind)</highlight></codeline>
<codeline lineno="1902"><highlight class="normal">{</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data;</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>size,i;</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/>data<sp/>=<sp/>get_c_string_dim(dat,&amp;size);</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/>i<sp/>=<sp/>get_c_long(ind);</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>0)<sp/>err(</highlight><highlight class="stringliteral">&quot;negative<sp/>index&quot;</highlight><highlight class="normal">,ind);</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(get_c_long(ctype))</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CTYPE_FLOAT:</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((i+1)<sp/>*<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">))<sp/>&gt;<sp/>size)<sp/>err_large_index(ind);</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)data)[i]));</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CTYPE_DOUBLE:</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((i+1)<sp/>*<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">))<sp/>&gt;<sp/>size)<sp/>err_large_index(ind);</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)data)[i]));</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CTYPE_LONG:</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((i+1)<sp/>*<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">))<sp/>&gt;<sp/>size)<sp/>err_large_index(ind);</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(((</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*)data)[i]));</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CTYPE_SHORT:</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((i+1)<sp/>*<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal">))<sp/>&gt;<sp/>size)<sp/>err_large_index(ind);</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(((</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*)data)[i]));</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CTYPE_CHAR:</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((i+1)<sp/>*<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">))<sp/>&gt;<sp/>size)<sp/>err_large_index(ind);</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data)[i]));</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CTYPE_INT:</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((i+1)<sp/>*<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">))<sp/>&gt;<sp/>size)<sp/>err_large_index(ind);</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)data)[i]));</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CTYPE_ULONG:</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((i+1)<sp/>*<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">))<sp/>&gt;<sp/>size)<sp/>err_large_index(ind);</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*)data)[i]));</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CTYPE_USHORT:</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((i+1)<sp/>*<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal">))<sp/>&gt;<sp/>size)<sp/>err_large_index(ind);</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*)data)[i]));</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CTYPE_UCHAR:</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((i+1)<sp/>*<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">))<sp/>&gt;<sp/>size)<sp/>err_large_index(ind);</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data)[i]));</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CTYPE_UINT:</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((i+1)<sp/>*<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">))<sp/>&gt;<sp/>size)<sp/>err_large_index(ind);</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)data)[i]));</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(err(</highlight><highlight class="stringliteral">&quot;unknown<sp/>CTYPE&quot;</highlight><highlight class="normal">,ctype));}}</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"></highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>sdatref(<ref refid="structobj" kindref="compound">LISP</ref><sp/>spec,<ref refid="structobj" kindref="compound">LISP</ref><sp/>dat)</highlight></codeline>
<codeline lineno="1942"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(datref(dat,car(spec),cdr(spec)));}</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"></highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>mkdatref(<ref refid="structobj" kindref="compound">LISP</ref><sp/>ctype,<ref refid="structobj" kindref="compound">LISP</ref><sp/>ind)</highlight></codeline>
<codeline lineno="1945"><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(closure(cons(ctype,ind),</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>leval(cintern(</highlight><highlight class="stringliteral">&quot;sdatref&quot;</highlight><highlight class="normal">),NIL)));}</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"></highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>datlength(<ref refid="structobj" kindref="compound">LISP</ref><sp/>dat,<ref refid="structobj" kindref="compound">LISP</ref><sp/>ctype)</highlight></codeline>
<codeline lineno="1949"><highlight class="normal">{</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data;</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/>data<sp/>=<sp/>get_c_string_dim(dat,&amp;size);</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(get_c_long(ctype))</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CTYPE_FLOAT:</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(size<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CTYPE_DOUBLE:</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(size<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CTYPE_LONG:</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(size<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CTYPE_SHORT:</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(size<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CTYPE_CHAR:</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(size<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CTYPE_INT:</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(size<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CTYPE_ULONG:</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(size<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CTYPE_USHORT:</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(size<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CTYPE_UCHAR:</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(size<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CTYPE_UINT:</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(flocons(size<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(err(</highlight><highlight class="stringliteral">&quot;unknown<sp/>CTYPE&quot;</highlight><highlight class="normal">,ctype));}}</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"></highlight></codeline>
<codeline lineno="1976"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>cgi_main(<ref refid="structobj" kindref="compound">LISP</ref><sp/>flag,<ref refid="structobj" kindref="compound">LISP</ref><sp/>result)</highlight></codeline>
<codeline lineno="1977"><highlight class="normal">{</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>code;</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/>code<sp/>=<sp/>FLONUMP(flag)<sp/>?<sp/>((long)FLONM(flag))<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CONSP(result)<sp/>&amp;&amp;<sp/>TYPEP(car(result),tc_string))</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((code<sp/>!=<sp/>4)<sp/>&amp;&amp;<sp/>(code<sp/>!=<sp/>6))</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>put_st(</highlight><highlight class="stringliteral">&quot;Status:<sp/>500<sp/>Server<sp/>Error<sp/>(Application)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((code<sp/>!=<sp/>5)<sp/>&amp;&amp;<sp/>(code<sp/>!=<sp/>6))</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>put_st(</highlight><highlight class="stringliteral">&quot;Content-type:<sp/>text/html\n\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>put_st(</highlight><highlight class="stringliteral">&quot;Content-type:<sp/>text/xml\n\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><sp/><sp/>put_st(</highlight><highlight class="stringliteral">&quot;&lt;?xml<sp/>version=\&quot;1.0\&quot;<sp/>encoding=\&quot;ISO-8859-1\&quot;<sp/>?&gt;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/>put_st(</highlight><highlight class="stringliteral">&quot;&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;Server<sp/>Error<sp/>(Application)&lt;/TITLE&gt;&lt;/HEAD&gt;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/><sp/>put_st(</highlight><highlight class="stringliteral">&quot;&lt;BODY&gt;&lt;H1&gt;Server<sp/>Error<sp/>(Application)&lt;/H1&gt;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/><sp/><sp/>put_st(</highlight><highlight class="stringliteral">&quot;An<sp/>application<sp/>on<sp/>this<sp/>server<sp/>has<sp/>encountered<sp/>an<sp/>error\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/>put_st(</highlight><highlight class="stringliteral">&quot;which<sp/>prevents<sp/>it<sp/>from<sp/>fulfilling<sp/>your<sp/>request.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/>put_st(</highlight><highlight class="stringliteral">&quot;&lt;P&gt;&lt;PRE&gt;&lt;B&gt;Error<sp/>Message:&lt;/B&gt;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/>lprint(car(result),NIL);</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NNULLP(cdr(result))</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{put_st(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lprint(cdr(result),NIL);}</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/>put_st(</highlight><highlight class="stringliteral">&quot;&lt;/PRE&gt;&lt;/P&gt;&lt;/BODY&gt;&lt;/HTML&gt;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;cgi-main&quot;</highlight><highlight class="normal">,NIL);}</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"></highlight></codeline>
<codeline lineno="2001"><highlight class="normal"></highlight></codeline>
<codeline lineno="2002"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>htqs_arg(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*value)</highlight></codeline>
<codeline lineno="2003"><highlight class="normal">{</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>tmpbuff[1024],*p1,*p2;</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((strcmp(value,</highlight><highlight class="stringliteral">&quot;(repl)&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>||</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>(strcmp(value,</highlight><highlight class="stringliteral">&quot;repl&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0))</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(repl_driver(1,1,NULL));</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strchr(value,</highlight><highlight class="charliteral">&apos;(&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/><sp/>{strcpy(tmpbuff,</highlight><highlight class="stringliteral">&quot;(require<sp/>\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(p1<sp/>=<sp/>&amp;tmpbuff[strlen(tmpbuff)],p2<sp/>=<sp/>value;*p2;++p2)</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strchr(</highlight><highlight class="stringliteral">&quot;\\\&quot;&quot;</highlight><highlight class="normal">,*p2))<sp/>*p1++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*p1++<sp/>=<sp/>*p2;}</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/><sp/><sp/>*p1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/><sp/><sp/>strcat(tmpbuff,</highlight><highlight class="stringliteral">&quot;\&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(repl_c_string(tmpbuff,0,0,0));}</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(repl_c_string(value,0,0,0));}</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"></highlight></codeline>
<codeline lineno="2018"><highlight class="normal"></highlight></codeline>
<codeline lineno="2019"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__stdcall<sp/>siod_main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**env)</highlight></codeline>
<codeline lineno="2020"><highlight class="normal">{</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j,retval<sp/>=<sp/>0,iargc,mainflag<sp/>=<sp/>0,text_plain_flag<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*iargv[2],*start,*end,htqs_arg_tmp[100];</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>l;</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/>iargv[0]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iargc=0,j=1;j&lt;argc;<sp/>++j)</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*(start<sp/>=<sp/>argv[j])<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(*start)</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(end<sp/>=<sp/>strstr(start,</highlight><highlight class="stringliteral">&quot;,-&quot;</highlight><highlight class="normal">)))<sp/>end<sp/>=<sp/>&amp;start[strlen(start)];</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>iargv[1]<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>malloc(end-start+1);</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>memcpy(iargv[1],start,end-start);</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>iargv[1][end-start]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((strncmp(iargv[1],</highlight><highlight class="stringliteral">&quot;-v&quot;</highlight><highlight class="normal">,2)<sp/>==<sp/>0)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(atol(&amp;iargv[1][2])<sp/>&gt;<sp/>0)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(iargv[1][2]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{printf(</highlight><highlight class="stringliteral">&quot;Content-type:<sp/>text/plain\r\n\r\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text_plain_flag<sp/>=<sp/>1;}</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((strncmp(iargv[1],</highlight><highlight class="stringliteral">&quot;-m&quot;</highlight><highlight class="normal">,2)<sp/>==<sp/>0))</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mainflag<sp/>=<sp/>atol(&amp;iargv[1][2]);</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>process_cla(2,iargv,1);</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Note:<sp/>Not<sp/>doing<sp/>free(iargv[1]);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/>(*end)<sp/>?<sp/>end+1<sp/>:<sp/>end;}}</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/><sp/>++iargc;</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/>print_welcome();</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/>print_hs_1();</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/>init_storage();</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(l=NIL,j=0;j&lt;argc;++j)</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/>l<sp/>=<sp/>cons(strcons(strlen(argv[j]),argv[j]),l);</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/>setvar(cintern(</highlight><highlight class="stringliteral">&quot;*args*&quot;</highlight><highlight class="normal">),nreverse(l),NIL);</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/>l<sp/>=<sp/>NIL;</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(l=NIL,j=0;env<sp/>&amp;&amp;<sp/>env[j];++j)</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/><sp/>l<sp/>=<sp/>cons(strcons(strlen(env[j]),env[j]),l);</highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/>setvar(cintern(</highlight><highlight class="stringliteral">&quot;*env*&quot;</highlight><highlight class="normal">),nreverse(l),NIL);</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/>l<sp/>=<sp/>NIL;</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/>init_subrs();</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/>init_trace();</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/>init_slibu();</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;__cgi-main&quot;</highlight><highlight class="normal">,cgi_main);</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iargc<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/><sp/>retval<sp/>=<sp/>repl_driver(1,1,NULL);</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=1;j&lt;(((mainflag<sp/>&gt;=<sp/>2)<sp/>&amp;&amp;<sp/>(argc<sp/>&gt;<sp/>3))<sp/>?<sp/>3<sp/>:<sp/>argc);++j)</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(argv[j][0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/><sp/><sp/>{retval<sp/>=<sp/>htqs_arg(argv[j]);</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(retval<sp/>!=<sp/>0)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mainflag)</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((mainflag<sp/>&gt;<sp/>2)<sp/>&amp;&amp;<sp/>!text_plain_flag)</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/><sp/>{sprintf(htqs_arg_tmp,</highlight><highlight class="stringliteral">&quot;(__cgi-main<sp/>%d<sp/>(*catch<sp/>&apos;errobj<sp/>(main))))&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mainflag);</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>retval<sp/>=<sp/>htqs_arg(htqs_arg_tmp);}</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/><sp/><sp/>retval<sp/>=<sp/>htqs_arg(</highlight><highlight class="stringliteral">&quot;(main)&quot;</highlight><highlight class="normal">);}</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(siod_verbose_check(2))</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;EXIT\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VMS</highlight></codeline>
<codeline lineno="2076"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(retval<sp/>==<sp/>0)<sp/>retval<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2078"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(retval);}</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"></highlight></codeline>
<codeline lineno="2080"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>position_script(FILE<sp/>*f,</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buff,</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bufflen)</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>recognizes<sp/>#!/<sp/>sequence.<sp/>Exersize:<sp/>compute<sp/>the<sp/>probability</highlight></codeline>
<codeline lineno="2082"><highlight class="comment"><sp/><sp/><sp/>of<sp/>the<sp/>sequence<sp/>showing<sp/>up<sp/>in<sp/>a<sp/>file<sp/>of<sp/>N<sp/>random<sp/>bytes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2083"><highlight class="normal">{</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c,s<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>pos<sp/>=<sp/>-1,offset;</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/>buff[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(offset=0;offset&lt;250000;++offset)</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/>{c<sp/>=<sp/>getc(f);</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(c)<sp/></highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EOF:<sp/></highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(-1);</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;#&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/></highlight><highlight class="charliteral">&apos;#&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pos<sp/>=<sp/>offset;</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;!&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>(s<sp/>==<sp/></highlight><highlight class="charliteral">&apos;#&apos;</highlight><highlight class="normal">)<sp/>?<sp/></highlight><highlight class="charliteral">&apos;!&apos;</highlight><highlight class="normal"><sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>==<sp/></highlight><highlight class="charliteral">&apos;!&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">while</highlight><highlight class="normal">((c<sp/>=<sp/>getc(f))<sp/>!=<sp/>EOF)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/><sp/></highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;((c<sp/>=<sp/>getc(f))<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>(c<sp/>!=<sp/>EOF)<sp/>&amp;&amp;<sp/>(j+1<sp/>&lt;=<sp/>bufflen);++j)</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{buff[j]<sp/>=<sp/>c;<sp/>buff[j+1]<sp/>=<sp/>0;}</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strspn(buff,</highlight><highlight class="stringliteral">&quot;<sp/>\t\r&quot;</highlight><highlight class="normal">)<sp/>==<sp/>strlen(buff))<sp/>buff[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(pos);}</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;}}</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(-1);}</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"></highlight></codeline>
<codeline lineno="2113"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32</highlight></codeline>
<codeline lineno="2114"><highlight class="preprocessor"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*find_exe_self(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cmd)</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>is<sp/>for<sp/>the<sp/>benefit<sp/>of<sp/>WINDOWS<sp/>NT,<sp/>which<sp/>is<sp/>in<sp/>fact</highlight></codeline>
<codeline lineno="2116"><highlight class="comment"><sp/><sp/><sp/><sp/>unix<sp/>compatible<sp/>in<sp/>what<sp/>it<sp/>passes<sp/>in<sp/>as<sp/>argv[0].<sp/>There</highlight></codeline>
<codeline lineno="2117"><highlight class="comment"><sp/><sp/><sp/><sp/>are<sp/>other<sp/>ways<sp/>of<sp/>getting<sp/>a<sp/>handle<sp/>to<sp/>the<sp/>current<sp/>executable.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2118"><highlight class="normal">{DWORD<sp/>retsize;</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>exe_self[512];</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/>retsize<sp/>=<sp/>SearchPath(NULL,cmd,</highlight><highlight class="stringliteral">&quot;.EXE&quot;</highlight><highlight class="normal">,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(exe_self),exe_self,NULL);</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(retsize<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(strdup(exe_self));</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(cmd);}</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2126"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2127"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__stdcall<sp/>siod_shuffle_args(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*pargc,</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>***pargv)</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>shuffle<sp/>arguments<sp/>in<sp/>the<sp/>same<sp/>way<sp/>that<sp/>the<sp/>unix<sp/>exec<sp/>loader</highlight></codeline>
<codeline lineno="2129"><highlight class="comment"><sp/><sp/><sp/><sp/>would<sp/>do<sp/>for<sp/>a<sp/>#!/xxx<sp/>script<sp/>execution.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2130"><highlight class="normal">{FILE<sp/>*f;</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>flagbuff[100],**argv,**nargv,offbuff[10];</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>pos;</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,nargc,j,k;</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/>argc<sp/>=<sp/>*pargc;</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/>argv<sp/>=<sp/>*pargv;</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32</highlight></codeline>
<codeline lineno="2137"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>argv[0]<sp/>=<sp/>find_exe_self(argv[0]);</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/>process_cla(1,argv,1);</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2140"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(f<sp/>=<sp/>fopen(argv[0],</highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">)))</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="comment">/*<sp/>perror(argv[0]);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/>pos<sp/>=<sp/>position_script(f,flagbuff,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(flagbuff));</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/>fclose(f);</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/>nargc<sp/>=<sp/>argc<sp/>+<sp/>((*flagbuff)<sp/>?<sp/>2<sp/>:<sp/>1);</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/>nargv<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>*<sp/>nargc);</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/>nargv[j++]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;siod.exe&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*flagbuff)<sp/>nargv[j++]<sp/>=<sp/>strdup(flagbuff);</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/>sprintf(offbuff,</highlight><highlight class="stringliteral">&quot;%ld&quot;</highlight><highlight class="normal">,pos);</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/>nargv[j]<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>malloc(strlen(offbuff)+strlen(argv[0])+2);</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/>sprintf(nargv[j],</highlight><highlight class="stringliteral">&quot;%s%c%s&quot;</highlight><highlight class="normal">,offbuff,VLOAD_OFFSET_HACK_CHAR,argv[0]);</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/>j++;</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(k=1;k&lt;argc;++k)<sp/>nargv[j++]<sp/>=<sp/>argv[k];</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/>*pargc<sp/>=<sp/>nargc;</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/>*pargv<sp/>=<sp/>nargv;</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"></highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>lposition_script(<ref refid="structobj" kindref="compound">LISP</ref><sp/>lfile)</highlight></codeline>
<codeline lineno="2161"><highlight class="normal">{FILE<sp/>*f;</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>iflag,pos;</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>flbuff[100];</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/>f<sp/>=<sp/>get_c_file(lfile,stdin);</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/>iflag<sp/>=<sp/>no_interrupt(1);</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/>pos<sp/>=<sp/>position_script(f,flbuff,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(flbuff));</highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><sp/>no_interrupt(iflag);</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(cons(flocons(pos),strcons(-1,flbuff)));}</highlight></codeline>
<codeline lineno="2170"><highlight class="normal"></highlight></codeline>
<codeline lineno="2171"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__stdcall<sp/>siod_init(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv)</highlight></codeline>
<codeline lineno="2172"><highlight class="normal">{process_cla(argc,argv,0);</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/>init_storage();</highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/>init_subrs();</highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/>init_trace();</highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/>init_slibu();}</highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="2178"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__stdcall<sp/>init_slibu(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2179"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(unix)</highlight></codeline>
<codeline lineno="2181"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tmp1,*tmp2;</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2183"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>defined(unix)<sp/>||<sp/>defined(WIN32)</highlight></codeline>
<codeline lineno="2184"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>tc_opendir<sp/>=<sp/>allocate_user_tc();</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/>set_gc_hooks(tc_opendir,</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opendir_gc_free,</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;j);</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/>set_print_hooks(tc_opendir,opendir_prin1);</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;chmod&quot;</highlight><highlight class="normal">,lchmod);</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2194"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><sp/>gc_protect_sym(&amp;sym_channels,</highlight><highlight class="stringliteral">&quot;*channels*&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2196"><highlight class="normal"><sp/>setvar(sym_channels,NIL,NIL);</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32</highlight></codeline>
<codeline lineno="2198"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>init_subr_0(</highlight><highlight class="stringliteral">&quot;win32-debug&quot;</highlight><highlight class="normal">,win32_debug);</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2200"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>VMS</highlight></codeline>
<codeline lineno="2201"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;vms-debug&quot;</highlight><highlight class="normal">,vms_debug);</highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/>init_lsubr(</highlight><highlight class="stringliteral">&quot;sys$crembx&quot;</highlight><highlight class="normal">,lcrembx);</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/>init_subr_4(</highlight><highlight class="stringliteral">&quot;lib$set_logical&quot;</highlight><highlight class="normal">,lset_logical);</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2205"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>init_lsubr(</highlight><highlight class="stringliteral">&quot;system&quot;</highlight><highlight class="normal">,lsystem);</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>WIN32</highlight></codeline>
<codeline lineno="2207"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>init_subr_0(</highlight><highlight class="stringliteral">&quot;getgid&quot;</highlight><highlight class="normal">,lgetgid);</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/>init_subr_0(</highlight><highlight class="stringliteral">&quot;getuid&quot;</highlight><highlight class="normal">,lgetuid);</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2210"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>defined(unix)<sp/>||<sp/>defined(WIN32)</highlight></codeline>
<codeline lineno="2211"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>init_subr_0(</highlight><highlight class="stringliteral">&quot;getcwd&quot;</highlight><highlight class="normal">,lgetcwd);</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2213"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>unix</highlight></codeline>
<codeline lineno="2214"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;crypt&quot;</highlight><highlight class="normal">,lcrypt);</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;getpwuid&quot;</highlight><highlight class="normal">,lgetpwuid);</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;getpwnam&quot;</highlight><highlight class="normal">,lgetpwnam);</highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/>init_subr_0(</highlight><highlight class="stringliteral">&quot;getpwent&quot;</highlight><highlight class="normal">,lgetpwent);</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/>init_subr_0(</highlight><highlight class="stringliteral">&quot;setpwent&quot;</highlight><highlight class="normal">,lsetpwent);</highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/>init_subr_0(</highlight><highlight class="stringliteral">&quot;endpwent&quot;</highlight><highlight class="normal">,lendpwent);</highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;setuid&quot;</highlight><highlight class="normal">,lsetuid);</highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;seteuid&quot;</highlight><highlight class="normal">,lseteuid);</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/>init_subr_0(</highlight><highlight class="stringliteral">&quot;geteuid&quot;</highlight><highlight class="normal">,lgeteuid);</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__osf__)</highlight></codeline>
<codeline lineno="2224"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;setpwfile&quot;</highlight><highlight class="normal">,lsetpwfile);</highlight></codeline>
<codeline lineno="2225"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2226"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;putpwent&quot;</highlight><highlight class="normal">,lputpwent);</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;access-problem?&quot;</highlight><highlight class="normal">,laccess_problem);</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/>init_subr_3(</highlight><highlight class="stringliteral">&quot;utime&quot;</highlight><highlight class="normal">,lutime);</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;fchmod&quot;</highlight><highlight class="normal">,lfchmod);</highlight></codeline>
<codeline lineno="2230"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2231"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;random&quot;</highlight><highlight class="normal">,lrandom);</highlight></codeline>
<codeline lineno="2232"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;srandom&quot;</highlight><highlight class="normal">,lsrandom);</highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;first&quot;</highlight><highlight class="normal">,car);</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;rest&quot;</highlight><highlight class="normal">,cdr);</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>unix</highlight></codeline>
<codeline lineno="2236"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>init_subr_0(</highlight><highlight class="stringliteral">&quot;fork&quot;</highlight><highlight class="normal">,lfork);</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/>init_subr_3(</highlight><highlight class="stringliteral">&quot;exec&quot;</highlight><highlight class="normal">,lexec);</highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;nice&quot;</highlight><highlight class="normal">,lnice);</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;wait&quot;</highlight><highlight class="normal">,lwait);</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/>init_subr_0(</highlight><highlight class="stringliteral">&quot;getpgrp&quot;</highlight><highlight class="normal">,lgetpgrp);</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;getgrgid&quot;</highlight><highlight class="normal">,lgetgrgid);</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;setpgid&quot;</highlight><highlight class="normal">,lsetpgid);</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;kill&quot;</highlight><highlight class="normal">,lkill);</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2245"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;%%%memref&quot;</highlight><highlight class="normal">,lmemref_byte);</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/>init_subr_0(</highlight><highlight class="stringliteral">&quot;getpid&quot;</highlight><highlight class="normal">,lgetpid);</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>WIN32</highlight></codeline>
<codeline lineno="2248"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>init_subr_0(</highlight><highlight class="stringliteral">&quot;getppid&quot;</highlight><highlight class="normal">,lgetppid);</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2250"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;exit&quot;</highlight><highlight class="normal">,lexit);</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;trunc&quot;</highlight><highlight class="normal">,ltrunc);</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>unix</highlight></codeline>
<codeline lineno="2253"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;putenv&quot;</highlight><highlight class="normal">,lputenv);</highlight></codeline>
<codeline lineno="2254"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2255"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>init_subr_0(</highlight><highlight class="stringliteral">&quot;md5-init&quot;</highlight><highlight class="normal">,md5_init);</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"><sp/>init_subr_3(</highlight><highlight class="stringliteral">&quot;md5-update&quot;</highlight><highlight class="normal">,md5_update);</highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;md5-final&quot;</highlight><highlight class="normal">,md5_final);</highlight></codeline>
<codeline lineno="2258"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__osf__)<sp/>||<sp/>defined(sun)</highlight></codeline>
<codeline lineno="2259"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;cpu-usage-limits&quot;</highlight><highlight class="normal">,cpu_usage_limits);</highlight></codeline>
<codeline lineno="2260"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2261"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>defined(__osf__)<sp/>||<sp/>defined(SUN5)</highlight></codeline>
<codeline lineno="2262"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;current-resource-usage&quot;</highlight><highlight class="normal">,current_resource_usage);</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2264"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/><sp/>defined(unix)<sp/>||<sp/>defined(WIN32)</highlight></codeline>
<codeline lineno="2265"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;opendir&quot;</highlight><highlight class="normal">,l_opendir);</highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;closedir&quot;</highlight><highlight class="normal">,l_closedir);</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;readdir&quot;</highlight><highlight class="normal">,l_readdir);</highlight></codeline>
<codeline lineno="2268"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2269"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;delete-file&quot;</highlight><highlight class="normal">,delete_file);</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;file-times&quot;</highlight><highlight class="normal">,file_times);</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;unix-time-&gt;strtime&quot;</highlight><highlight class="normal">,utime2str);</highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/>init_subr_0(</highlight><highlight class="stringliteral">&quot;unix-time&quot;</highlight><highlight class="normal">,unix_time);</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;unix-ctime&quot;</highlight><highlight class="normal">,unix_ctime);</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;getenv&quot;</highlight><highlight class="normal">,lgetenv);</highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;sleep&quot;</highlight><highlight class="normal">,lsleep);</highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;url-encode&quot;</highlight><highlight class="normal">,url_encode);</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;url-decode&quot;</highlight><highlight class="normal">,url_decode);</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;gets&quot;</highlight><highlight class="normal">,lgets);</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;readline&quot;</highlight><highlight class="normal">,readline);</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;html-encode&quot;</highlight><highlight class="normal">,html_encode);</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;html-decode&quot;</highlight><highlight class="normal">,html_decode);</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(unix)<sp/>||<sp/>defined(WIN32)</highlight></codeline>
<codeline lineno="2283"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;decode-file-mode&quot;</highlight><highlight class="normal">,decode_st_mode);</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;encode-file-mode&quot;</highlight><highlight class="normal">,encode_st_mode);</highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;stat&quot;</highlight><highlight class="normal">,l_stat);</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;fstat&quot;</highlight><highlight class="normal">,l_fstat);</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2288"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>unix</highlight></codeline>
<codeline lineno="2289"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;encode-open-flags&quot;</highlight><highlight class="normal">,encode_open_flags);</highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;lstat&quot;</highlight><highlight class="normal">,l_lstat);</highlight></codeline>
<codeline lineno="2291"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2292"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>defined(__osf__)<sp/>||<sp/>defined(SUN5)</highlight></codeline>
<codeline lineno="2293"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>init_subr_3(</highlight><highlight class="stringliteral">&quot;fnmatch&quot;</highlight><highlight class="normal">,l_fnmatch);</highlight></codeline>
<codeline lineno="2294"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2295"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>unix</highlight></codeline>
<codeline lineno="2296"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;symlink&quot;</highlight><highlight class="normal">,lsymlink);</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;link&quot;</highlight><highlight class="normal">,llink);</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;unlink&quot;</highlight><highlight class="normal">,lunlink);</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;rmdir&quot;</highlight><highlight class="normal">,lrmdir);</highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;mkdir&quot;</highlight><highlight class="normal">,lmkdir);</highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;rename&quot;</highlight><highlight class="normal">,lrename);</highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;readlink&quot;</highlight><highlight class="normal">,lreadlink);</highlight></codeline>
<codeline lineno="2303"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2304"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifndef<sp/>WIN32</highlight></codeline>
<codeline lineno="2305"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>init_subr_3(</highlight><highlight class="stringliteral">&quot;chown&quot;</highlight><highlight class="normal">,l_chown);</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2307"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>defined(unix)<sp/>&amp;&amp;<sp/>!defined(linux)</highlight></codeline>
<codeline lineno="2308"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>init_subr_3(</highlight><highlight class="stringliteral">&quot;lchown&quot;</highlight><highlight class="normal">,l_lchown);</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2310"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;http-date&quot;</highlight><highlight class="normal">,http_date);</highlight></codeline>
<codeline lineno="2311"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__osf__)</highlight></codeline>
<codeline lineno="2312"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;http-date-parse&quot;</highlight><highlight class="normal">,http_date_parse);</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2314"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>unix</highlight></codeline>
<codeline lineno="2315"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;popen&quot;</highlight><highlight class="normal">,popen_l);</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;pclose&quot;</highlight><highlight class="normal">,pclose_l);</highlight></codeline>
<codeline lineno="2317"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2318"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;load-so&quot;</highlight><highlight class="normal">,load_so);</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;require-so&quot;</highlight><highlight class="normal">,require_so);</highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;so-ext&quot;</highlight><highlight class="normal">,so_ext);</highlight></codeline>
<codeline lineno="2321"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>unix</highlight></codeline>
<codeline lineno="2322"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>setvar(cintern(</highlight><highlight class="stringliteral">&quot;SEEK_SET&quot;</highlight><highlight class="normal">),flocons(SEEK_SET),NIL);</highlight></codeline>
<codeline lineno="2323"><highlight class="normal"><sp/>setvar(cintern(</highlight><highlight class="stringliteral">&quot;SEEK_CUR&quot;</highlight><highlight class="normal">),flocons(SEEK_CUR),NIL);</highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/>setvar(cintern(</highlight><highlight class="stringliteral">&quot;SEEK_END&quot;</highlight><highlight class="normal">),flocons(SEEK_END),NIL);</highlight></codeline>
<codeline lineno="2325"><highlight class="normal"><sp/>setvar(cintern(</highlight><highlight class="stringliteral">&quot;F_RDLCK&quot;</highlight><highlight class="normal">),flocons(F_RDLCK),NIL);</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/>setvar(cintern(</highlight><highlight class="stringliteral">&quot;F_WRLCK&quot;</highlight><highlight class="normal">),flocons(F_WRLCK),NIL);</highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/>setvar(cintern(</highlight><highlight class="stringliteral">&quot;F_UNLCK&quot;</highlight><highlight class="normal">),flocons(F_UNLCK),NIL);</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/>init_subr_5(</highlight><highlight class="stringliteral">&quot;F_SETLK&quot;</highlight><highlight class="normal">,lF_SETLK);</highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/>init_subr_5(</highlight><highlight class="stringliteral">&quot;F_SETLKW&quot;</highlight><highlight class="normal">,lF_SETLKW);</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/>init_subr_5(</highlight><highlight class="stringliteral">&quot;F_GETLK&quot;</highlight><highlight class="normal">,lF_GETLK);</highlight></codeline>
<codeline lineno="2331"><highlight class="normal"></highlight></codeline>
<codeline lineno="2332"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2333"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>init_subr_0(</highlight><highlight class="stringliteral">&quot;siod-lib&quot;</highlight><highlight class="normal">,siod_lib_l);</highlight></codeline>
<codeline lineno="2334"><highlight class="normal"></highlight></codeline>
<codeline lineno="2335"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>unix</highlight></codeline>
<codeline lineno="2336"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((!(tmp1<sp/>=<sp/>getenv(ld_library_path_env)))<sp/>||</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>(!strstr(tmp1,siod_lib)))</highlight></codeline>
<codeline lineno="2338"><highlight class="normal"><sp/><sp/><sp/>{tmp2<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>must_malloc(strlen(ld_library_path_env)<sp/>+<sp/>1<sp/>+</highlight></codeline>
<codeline lineno="2339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((tmp1)<sp/>?<sp/>strlen(tmp1)<sp/>+<sp/>1<sp/>:<sp/>0)<sp/>+</highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strlen(siod_lib)<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="2341"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(tmp2,</highlight><highlight class="stringliteral">&quot;%s=%s%s%s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ld_library_path_env,</highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tmp1)<sp/>?<sp/>tmp1<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tmp1)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>siod_lib);</highlight></codeline>
<codeline lineno="2346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>note<sp/>that<sp/>we<sp/>cannot<sp/>free<sp/>the<sp/>string<sp/>afterwards.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/><sp/><sp/><sp/>putenv(tmp2);}</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2349"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>vms</highlight></codeline>
<codeline lineno="2350"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>setvar(cintern(</highlight><highlight class="stringliteral">&quot;*require-so-dir*&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/><sp/><sp/>string_append(listn(2,</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcons(-1,siod_lib),</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcons(-1,</highlight><highlight class="stringliteral">&quot;.EXE&quot;</highlight><highlight class="normal">))),</highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/><sp/><sp/>NIL);</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2356"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;localtime&quot;</highlight><highlight class="normal">,llocaltime);</highlight></codeline>
<codeline lineno="2357"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;gmtime&quot;</highlight><highlight class="normal">,lgmtime);</highlight></codeline>
<codeline lineno="2358"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(unix)<sp/>||<sp/>defined(WIN32)</highlight></codeline>
<codeline lineno="2359"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>init_subr_0(</highlight><highlight class="stringliteral">&quot;tzset&quot;</highlight><highlight class="normal">,ltzset);</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2361"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;mktime&quot;</highlight><highlight class="normal">,lmktime);</highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;chdir&quot;</highlight><highlight class="normal">,lchdir);</highlight></codeline>
<codeline lineno="2363"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__osf__)</highlight></codeline>
<codeline lineno="2364"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>init_subr_0(</highlight><highlight class="stringliteral">&quot;rld-pathnames&quot;</highlight><highlight class="normal">,rld_pathnames);</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2366"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>defined(__osf__)<sp/>||<sp/>defined(SUN5)<sp/>||<sp/>defined(linux)</highlight></codeline>
<codeline lineno="2367"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>init_subr_3(</highlight><highlight class="stringliteral">&quot;strptime&quot;</highlight><highlight class="normal">,lstrptime);</highlight></codeline>
<codeline lineno="2368"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2369"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>unix</highlight></codeline>
<codeline lineno="2370"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;strftime&quot;</highlight><highlight class="normal">,lstrftime);</highlight></codeline>
<codeline lineno="2371"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;getpass&quot;</highlight><highlight class="normal">,lgetpass);</highlight></codeline>
<codeline lineno="2372"><highlight class="normal"><sp/>init_subr_0(</highlight><highlight class="stringliteral">&quot;pipe&quot;</highlight><highlight class="normal">,lpipe);</highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;alarm&quot;</highlight><highlight class="normal">,lalarm);</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2375"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/>setvar(cintern(</highlight><highlight class="stringliteral">&quot;CTYPE_FLOAT&quot;</highlight><highlight class="normal">),flocons(CTYPE_FLOAT),NIL);</highlight></codeline>
<codeline lineno="2377"><highlight class="normal"><sp/>setvar(cintern(</highlight><highlight class="stringliteral">&quot;CTYPE_DOUBLE&quot;</highlight><highlight class="normal">),flocons(CTYPE_DOUBLE),NIL);</highlight></codeline>
<codeline lineno="2378"><highlight class="normal"><sp/>setvar(cintern(</highlight><highlight class="stringliteral">&quot;CTYPE_LONG&quot;</highlight><highlight class="normal">),flocons(CTYPE_LONG),NIL);</highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/>setvar(cintern(</highlight><highlight class="stringliteral">&quot;CTYPE_SHORT&quot;</highlight><highlight class="normal">),flocons(CTYPE_SHORT),NIL);</highlight></codeline>
<codeline lineno="2380"><highlight class="normal"><sp/>setvar(cintern(</highlight><highlight class="stringliteral">&quot;CTYPE_CHAR&quot;</highlight><highlight class="normal">),flocons(CTYPE_CHAR),NIL);</highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/>setvar(cintern(</highlight><highlight class="stringliteral">&quot;CTYPE_INT&quot;</highlight><highlight class="normal">),flocons(CTYPE_INT),NIL);</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/>setvar(cintern(</highlight><highlight class="stringliteral">&quot;CTYPE_ULONG&quot;</highlight><highlight class="normal">),flocons(CTYPE_ULONG),NIL);</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/>setvar(cintern(</highlight><highlight class="stringliteral">&quot;CTYPE_USHORT&quot;</highlight><highlight class="normal">),flocons(CTYPE_USHORT),NIL);</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/>setvar(cintern(</highlight><highlight class="stringliteral">&quot;CTYPE_UCHAR&quot;</highlight><highlight class="normal">),flocons(CTYPE_UCHAR),NIL);</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/>setvar(cintern(</highlight><highlight class="stringliteral">&quot;CTYPE_UINT&quot;</highlight><highlight class="normal">),flocons(CTYPE_UINT),NIL);</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/>init_subr_3(</highlight><highlight class="stringliteral">&quot;datref&quot;</highlight><highlight class="normal">,datref);</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;sdatref&quot;</highlight><highlight class="normal">,sdatref);</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;mkdatref&quot;</highlight><highlight class="normal">,mkdatref);</highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/>init_subr_2(</highlight><highlight class="stringliteral">&quot;datlength&quot;</highlight><highlight class="normal">,datlength);</highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/>init_subr_1(</highlight><highlight class="stringliteral">&quot;position-script&quot;</highlight><highlight class="normal">,lposition_script);</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"></highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/>init_slibu_version();}</highlight></codeline>
    </programlisting>
    <location file="C:/Users/josburn/Documents/programming/siod/libsiod/slibu.c"/>
  </compounddef>
</doxygen>

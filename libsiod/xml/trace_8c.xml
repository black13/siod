<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.3.1">
  <compounddef id="trace_8c" kind="file">
    <compoundname>trace.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">setjmp.h</includes>
    <includes refid="siod_8h" local="yes">siod.h</includes>
    <includes refid="siodp_8h" local="yes">siodp.h</includes>
    <incdepgraph>
      <node id="52">
        <label>siodp.h</label>
        <link refid="siodp_8h_source"/>
      </node>
      <node id="50">
        <label>setjmp.h</label>
      </node>
      <node id="51">
        <label>siod.h</label>
        <link refid="siod_8h_source"/>
      </node>
      <node id="48">
        <label>trace.c</label>
        <link refid="trace.c"/>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="trace_8c_1adb212b0d40aba75c855e5240fafcedf7" prot="public" static="yes" mutable="no">
        <type>long</type>
        <definition>long tc_closure_traced</definition>
        <argsstring></argsstring>
        <name>tc_closure_traced</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/trace.c" line="26" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/trace.c" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="trace_8c_1af6f99a616ab6d0c413c196f694607b8f" prot="public" static="yes" mutable="no">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP sym_traced</definition>
        <argsstring></argsstring>
        <name>sym_traced</name>
        <initializer>= NIL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/trace.c" line="28" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/trace.c" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="trace_8c_1aff59f7efc57680c3fb5e251e19ff82b3" prot="public" static="yes" mutable="no">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP sym_quote</definition>
        <argsstring></argsstring>
        <name>sym_quote</name>
        <initializer>= NIL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/trace.c" line="29" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/trace.c" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="trace_8c_1a2ed06f802483cf6ede56d00b59aa3b25" prot="public" static="yes" mutable="no">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP sym_begin</definition>
        <argsstring></argsstring>
        <name>sym_begin</name>
        <initializer>= NIL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/trace.c" line="30" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/trace.c" bodystart="30" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="trace_8c_1a30b569b21635f5eae1ef8ebc3e7e164c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void init_trace_version</definition>
        <argsstring>(void)</argsstring>
        <name>init_trace_version</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/trace.c" line="21" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/trace.c" bodystart="20" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="trace_8c_1aae45113bbd95c1ced96e275567e2e235" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP ltrace_fcn_name</definition>
        <argsstring>(LISP body)</argsstring>
        <name>ltrace_fcn_name</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>body</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/trace.c" line="32" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/trace.c" bodystart="42" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="trace_8c_1a061b980772ac9dc29d65eb42e8945a85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP ltrace_1</definition>
        <argsstring>(LISP fcn_name, LISP env)</argsstring>
        <name>ltrace_1</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>fcn_name</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>env</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/trace.c" line="33" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/trace.c" bodystart="55" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="trace_8c_1a392a95885a40914ae55879186f53ce00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP ltrace</definition>
        <argsstring>(LISP fcn_names, LISP env)</argsstring>
        <name>ltrace</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>fcn_names</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>env</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/trace.c" line="34" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/trace.c" bodystart="71" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="trace_8c_1ae8a318d9fb8d946c19cb40dd13397d7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP luntrace_1</definition>
        <argsstring>(LISP fcn)</argsstring>
        <name>luntrace_1</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>fcn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/trace.c" line="35" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/trace.c" bodystart="77" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="trace_8c_1a100cfc87b927eeb084aa33ccd64fb1e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP luntrace</definition>
        <argsstring>(LISP fcns)</argsstring>
        <name>luntrace</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>fcns</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/trace.c" line="36" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/trace.c" bodystart="86" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="trace_8c_1aa46d220b06cf476bf9815561b85de2db" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ct_gc_scan</definition>
        <argsstring>(LISP ptr)</argsstring>
        <name>ct_gc_scan</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/trace.c" line="37" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/trace.c" bodystart="92" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="trace_8c_1a405ed9411ab5c28a707763493d8578c0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>static LISP ct_gc_mark</definition>
        <argsstring>(LISP ptr)</argsstring>
        <name>ct_gc_mark</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/trace.c" line="38" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/trace.c" bodystart="96" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="trace_8c_1a90bcef07ff657f8a72f00958bddb9095" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ct_prin1</definition>
        <argsstring>(LISP ptr, struct gen_printio *f)</argsstring>
        <name>ct_prin1</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>struct <ref refid="structgen__printio" kindref="compound">gen_printio</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/trace.c" line="39" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/trace.c" bodystart="100" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="trace_8c_1a9c3f55ebd88b35c5bf665ea2740b5b7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structobj" kindref="compound">LISP</ref></type>
        <definition>LISP ct_eval</definition>
        <argsstring>(LISP ct, LISP *px, LISP *penv)</argsstring>
        <name>ct_eval</name>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref></type>
          <declname>ct</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref> *</type>
          <declname>px</declname>
        </param>
        <param>
          <type><ref refid="structobj" kindref="compound">LISP</ref> *</type>
          <declname>penv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/trace.c" line="40" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/trace.c" bodystart="107" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="trace_8c_1aea5276cf7d82b8bfffd5480ca21e042e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void __stdcall</type>
        <definition>void __stdcall init_trace</definition>
        <argsstring>(void)</argsstring>
        <name>init_trace</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/josburn/Documents/programming/siod/libsiod/trace.c" line="130" bodyfile="C:/Users/josburn/Documents/programming/siod/libsiod/trace.c" bodystart="129" bodyend="146"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/><sp/><sp/><sp/>COPYRIGHT<sp/>(c)<sp/>1992-1994<sp/>BY</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>MITECH<sp/>CORPORATION,<sp/>ACTON,<sp/>MASSACHUSETTS.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>See<sp/>the<sp/>source<sp/>file<sp/>SLIB.C<sp/>for<sp/>more<sp/>information.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment">(trace<sp/>procedure1<sp/>procedure2<sp/>...)</highlight></codeline>
<codeline lineno="6"><highlight class="comment">(untrace<sp/>procedure1<sp/>procedure2<sp/>...)</highlight></codeline>
<codeline lineno="7"><highlight class="comment"></highlight></codeline>
<codeline lineno="8"><highlight class="comment">Currently<sp/>only<sp/>user-defined<sp/>procedures<sp/>can<sp/>be<sp/>traced.</highlight></codeline>
<codeline lineno="9"><highlight class="comment">Fancy<sp/>printing<sp/>features<sp/>such<sp/>as<sp/>indentation<sp/>based<sp/>on</highlight></codeline>
<codeline lineno="10"><highlight class="comment">recursion<sp/>level<sp/>will<sp/>also<sp/>have<sp/>to<sp/>wait<sp/>for<sp/>a<sp/>future<sp/>version.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"></highlight></codeline>
<codeline lineno="12"><highlight class="comment"></highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;setjmp.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;siod.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;siodp.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init_trace_version(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="21"><highlight class="normal">{setvar(cintern(</highlight><highlight class="stringliteral">&quot;*trace-version*&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>cintern(</highlight><highlight class="stringliteral">&quot;$Id:<sp/>trace.c,v<sp/>1.3<sp/>1997/05/11<sp/>11:35:47<sp/>gjc<sp/>Exp<sp/>$&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>NIL);}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>tc_closure_traced<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>sym_traced<sp/>=<sp/>NIL;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>sym_quote<sp/>=<sp/>NIL;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>sym_begin<sp/>=<sp/>NIL;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>ltrace_fcn_name(<ref refid="structobj" kindref="compound">LISP</ref><sp/>body);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>ltrace_1(<ref refid="structobj" kindref="compound">LISP</ref><sp/>fcn_name,<ref refid="structobj" kindref="compound">LISP</ref><sp/>env);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>ltrace(<ref refid="structobj" kindref="compound">LISP</ref><sp/>fcn_names,<ref refid="structobj" kindref="compound">LISP</ref><sp/>env);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>luntrace_1(<ref refid="structobj" kindref="compound">LISP</ref><sp/>fcn);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>luntrace(<ref refid="structobj" kindref="compound">LISP</ref><sp/>fcns);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ct_gc_scan(<ref refid="structobj" kindref="compound">LISP</ref><sp/>ptr);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>ct_gc_mark(<ref refid="structobj" kindref="compound">LISP</ref><sp/>ptr);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ct_prin1(<ref refid="structobj" kindref="compound">LISP</ref><sp/>ptr,</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgen__printio" kindref="compound">gen_printio</ref><sp/>*f);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>ct_eval(<ref refid="structobj" kindref="compound">LISP</ref><sp/>ct,<ref refid="structobj" kindref="compound">LISP</ref><sp/>*px,<ref refid="structobj" kindref="compound">LISP</ref><sp/>*penv);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>ltrace_fcn_name(<ref refid="structobj" kindref="compound">LISP</ref><sp/>body)</highlight></codeline>
<codeline lineno="43"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>tmp;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NCONSP(body)<sp/>return(NIL);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/>if<sp/>NEQ(CAR(body),sym_begin)<sp/>return(NIL);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/>tmp<sp/>=<sp/>CDR(body);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/>if<sp/>NCONSP(tmp)<sp/>return(NIL);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/>tmp<sp/>=<sp/>CAR(tmp);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/>if<sp/>NCONSP(tmp)<sp/>return(NIL);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/>if<sp/>NEQ(CAR(tmp),sym_quote)<sp/>return(NIL);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/>tmp<sp/>=<sp/>CDR(tmp);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/>if<sp/>NCONSP(tmp)<sp/>return(NIL);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/>return(CAR(tmp));}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>ltrace_1(<ref refid="structobj" kindref="compound">LISP</ref><sp/>fcn_name,<ref refid="structobj" kindref="compound">LISP</ref><sp/>env)</highlight></codeline>
<codeline lineno="56"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>fcn,code;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/>fcn<sp/>=<sp/>leval(fcn_name,env);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TYPE(fcn)<sp/>==<sp/>tc_closure)</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/>{code<sp/>=<sp/>fcn-&gt;storage_as.closure.code;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>NULLP(ltrace_fcn_name(cdr(code)))</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setcdr(code,cons(sym_begin,</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cons(cons(sym_quote,cons(fcn_name,NIL)),</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cons(cdr(code),NIL))));</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>fcn-&gt;type<sp/>=<sp/>(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal">)<sp/>tc_closure_traced;}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/>else<sp/>if<sp/>(TYPE(fcn)<sp/>==<sp/>tc_closure_traced)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/>else</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/>err(&quot;not<sp/>a<sp/>closure,<sp/>cannot<sp/>trace&quot;,fcn);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/>return(NIL);}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>ltrace(<ref refid="structobj" kindref="compound">LISP</ref><sp/>fcn_names,<ref refid="structobj" kindref="compound">LISP</ref><sp/>env)</highlight></codeline>
<codeline lineno="72"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>l;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(l=fcn_names;NNULLP(l);l=cdr(l))</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/>ltrace_1(car(l),env);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>luntrace_1(<ref refid="structobj" kindref="compound">LISP</ref><sp/>fcn)</highlight></codeline>
<codeline lineno="78"><highlight class="normal">{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TYPE(fcn)<sp/>==<sp/>tc_closure)</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TYPE(fcn)<sp/>==<sp/>tc_closure_traced)</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/>fcn-&gt;type<sp/>=<sp/>tc_closure;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;not<sp/>a<sp/>closure,<sp/>cannot<sp/>untrace&quot;</highlight><highlight class="normal">,fcn);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>luntrace(<ref refid="structobj" kindref="compound">LISP</ref><sp/>fcns)</highlight></codeline>
<codeline lineno="87"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>l;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(l=fcns;NNULLP(l);l=cdr(l))</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/>luntrace_1(car(l));</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ct_gc_scan(<ref refid="structobj" kindref="compound">LISP</ref><sp/>ptr)</highlight></codeline>
<codeline lineno="93"><highlight class="normal">{CAR(ptr)<sp/>=<sp/>gc_relocate(CAR(ptr));</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/>CDR(ptr)<sp/>=<sp/>gc_relocate(CDR(ptr));}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structobj" kindref="compound">LISP</ref><sp/>ct_gc_mark(<ref refid="structobj" kindref="compound">LISP</ref><sp/>ptr)</highlight></codeline>
<codeline lineno="97"><highlight class="normal">{gc_mark(ptr-&gt;storage_as.closure.code);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(ptr-&gt;storage_as.closure.env);}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ct_prin1(<ref refid="structobj" kindref="compound">LISP</ref><sp/>ptr,</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgen__printio" kindref="compound">gen_printio</ref><sp/>*f)</highlight></codeline>
<codeline lineno="101"><highlight class="normal">{gput_st(f,</highlight><highlight class="stringliteral">&quot;#&lt;CLOSURE(TRACED)<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/>lprin1g(car(ptr-&gt;storage_as.closure.code),f);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/>gput_st(f,</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/>lprin1g(cdr(ptr-&gt;storage_as.closure.code),f);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/>gput_st(f,</highlight><highlight class="stringliteral">&quot;&gt;&quot;</highlight><highlight class="normal">);}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><ref refid="structobj" kindref="compound">LISP</ref><sp/>ct_eval(<ref refid="structobj" kindref="compound">LISP</ref><sp/>ct,<ref refid="structobj" kindref="compound">LISP</ref><sp/>*px,<ref refid="structobj" kindref="compound">LISP</ref><sp/>*penv)</highlight></codeline>
<codeline lineno="108"><highlight class="normal">{<ref refid="structobj" kindref="compound">LISP</ref><sp/>fcn_name,args,env,result,l;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/>fcn_name<sp/>=<sp/>ltrace_fcn_name(cdr(ct-&gt;storage_as.closure.code));</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/>args<sp/>=<sp/>leval_args(CDR(*px),*penv);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/>fput_st(stdout,</highlight><highlight class="stringliteral">&quot;-&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/>lprin1f(fcn_name,stdout);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(l=args;NNULLP(l);l=cdr(l))</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/>{fput_st(stdout,</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>lprin1f(car(l),stdout);}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/>fput_st(stdout,</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/>env<sp/>=<sp/>extend_env(args,</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>car(ct-&gt;storage_as.closure.code),</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ct-&gt;storage_as.closure.env);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/>result<sp/>=<sp/>leval(cdr(ct-&gt;storage_as.closure.code),env);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/>fput_st(stdout,</highlight><highlight class="stringliteral">&quot;&lt;-&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/>lprin1f(fcn_name,stdout);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/>fput_st(stdout,</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/>lprin1f(result,stdout);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/>fput_st(stdout,</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/>*px<sp/>=<sp/>result;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NIL);}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__stdcall<sp/>init_trace(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="130"><highlight class="normal">{</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/>tc_closure_traced<sp/>=<sp/>allocate_user_tc();</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/>set_gc_hooks(tc_closure_traced,</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ct_gc_mark,</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ct_gc_scan,</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;j);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/>gc_protect_sym(&amp;sym_traced,</highlight><highlight class="stringliteral">&quot;*traced*&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/>setvar(sym_traced,NIL,NIL);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/>gc_protect_sym(&amp;sym_begin,</highlight><highlight class="stringliteral">&quot;begin&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/>gc_protect_sym(&amp;sym_quote,</highlight><highlight class="stringliteral">&quot;quote&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/>set_print_hooks(tc_closure_traced,ct_prin1);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/>set_eval_hooks(tc_closure_traced,ct_eval);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/>init_fsubr(</highlight><highlight class="stringliteral">&quot;trace&quot;</highlight><highlight class="normal">,ltrace);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/>init_lsubr(</highlight><highlight class="stringliteral">&quot;untrace&quot;</highlight><highlight class="normal">,luntrace);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/>init_trace_version();}</highlight></codeline>
    </programlisting>
    <location file="C:/Users/josburn/Documents/programming/siod/libsiod/trace.c"/>
  </compounddef>
</doxygen>
